
NewEditedCarForLinkdIn.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005d8a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010c  00800060  00005d8a  00005e1e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004a  0080016c  0080016c  00005f2a  2**0
                  ALLOC
  3 .stab         00004a40  00000000  00000000  00005f2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001afd  00000000  00000000  0000a96c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000220  00000000  00000000  0000c469  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000278  00000000  00000000  0000c689  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002a72  00000000  00000000  0000c901  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000177d  00000000  00000000  0000f373  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000015b6  00000000  00000000  00010af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000240  00000000  00000000  000120a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000361  00000000  00000000  000122e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000df4  00000000  00000000  00012649  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001343d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 d3 0d 	jmp	0x1ba6	; 0x1ba6 <__vector_1>
       8:	0c 94 00 0e 	jmp	0x1c00	; 0x1c00 <__vector_2>
       c:	0c 94 2d 0e 	jmp	0x1c5a	; 0x1c5a <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 0b 1d 	jmp	0x3a16	; 0x3a16 <__vector_5>
      18:	0c 94 95 1d 	jmp	0x3b2a	; 0x3b2a <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 85 1d 	jmp	0x3b0a	; 0x3b0a <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 de 1c 	jmp	0x39bc	; 0x39bc <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 d1 1e 	jmp	0x3da2	; 0x3da2 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e8       	ldi	r30, 0x8A	; 138
      68:	fd e5       	ldi	r31, 0x5D	; 93
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 36       	cpi	r26, 0x6C	; 108
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e6       	ldi	r26, 0x6C	; 108
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3b       	cpi	r26, 0xB6	; 182
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 2f 2e 	call	0x5c5e	; 0x5c5e <main>
      8a:	0c 94 c3 2e 	jmp	0x5d86	; 0x5d86 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__ashldi3>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	df 93       	push	r29
      9a:	cf 93       	push	r28
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
      a0:	60 97       	sbiw	r28, 0x10	; 16
      a2:	0f b6       	in	r0, 0x3f	; 63
      a4:	f8 94       	cli
      a6:	de bf       	out	0x3e, r29	; 62
      a8:	0f be       	out	0x3f, r0	; 63
      aa:	cd bf       	out	0x3d, r28	; 61
      ac:	a8 2f       	mov	r26, r24
      ae:	00 23       	and	r16, r16
      b0:	09 f4       	brne	.+2      	; 0xb4 <__ashldi3+0x22>
      b2:	61 c0       	rjmp	.+194    	; 0x176 <__ashldi3+0xe4>
      b4:	7e 01       	movw	r14, r28
      b6:	08 94       	sec
      b8:	e1 1c       	adc	r14, r1
      ba:	f1 1c       	adc	r15, r1
      bc:	88 e0       	ldi	r24, 0x08	; 8
      be:	f7 01       	movw	r30, r14
      c0:	11 92       	st	Z+, r1
      c2:	8a 95       	dec	r24
      c4:	e9 f7       	brne	.-6      	; 0xc0 <__ashldi3+0x2e>
      c6:	29 83       	std	Y+1, r18	; 0x01
      c8:	3a 83       	std	Y+2, r19	; 0x02
      ca:	4b 83       	std	Y+3, r20	; 0x03
      cc:	5c 83       	std	Y+4, r21	; 0x04
      ce:	6d 83       	std	Y+5, r22	; 0x05
      d0:	7e 83       	std	Y+6, r23	; 0x06
      d2:	af 83       	std	Y+7, r26	; 0x07
      d4:	98 87       	std	Y+8, r25	; 0x08
      d6:	80 e2       	ldi	r24, 0x20	; 32
      d8:	80 1b       	sub	r24, r16
      da:	e8 2f       	mov	r30, r24
      dc:	ff 27       	eor	r31, r31
      de:	e7 fd       	sbrc	r30, 7
      e0:	f0 95       	com	r31
      e2:	49 81       	ldd	r20, Y+1	; 0x01
      e4:	5a 81       	ldd	r21, Y+2	; 0x02
      e6:	6b 81       	ldd	r22, Y+3	; 0x03
      e8:	7c 81       	ldd	r23, Y+4	; 0x04
      ea:	18 16       	cp	r1, r24
      ec:	84 f0       	brlt	.+32     	; 0x10e <__ashldi3+0x7c>
      ee:	19 86       	std	Y+9, r1	; 0x09
      f0:	1a 86       	std	Y+10, r1	; 0x0a
      f2:	1b 86       	std	Y+11, r1	; 0x0b
      f4:	1c 86       	std	Y+12, r1	; 0x0c
      f6:	88 27       	eor	r24, r24
      f8:	99 27       	eor	r25, r25
      fa:	8e 1b       	sub	r24, r30
      fc:	9f 0b       	sbc	r25, r31
      fe:	04 c0       	rjmp	.+8      	; 0x108 <__ashldi3+0x76>
     100:	44 0f       	add	r20, r20
     102:	55 1f       	adc	r21, r21
     104:	66 1f       	adc	r22, r22
     106:	77 1f       	adc	r23, r23
     108:	8a 95       	dec	r24
     10a:	d2 f7       	brpl	.-12     	; 0x100 <__ashldi3+0x6e>
     10c:	28 c0       	rjmp	.+80     	; 0x15e <__ashldi3+0xcc>
     10e:	20 2f       	mov	r18, r16
     110:	33 27       	eor	r19, r19
     112:	27 fd       	sbrc	r18, 7
     114:	30 95       	com	r19
     116:	db 01       	movw	r26, r22
     118:	ca 01       	movw	r24, r20
     11a:	02 2e       	mov	r0, r18
     11c:	04 c0       	rjmp	.+8      	; 0x126 <__ashldi3+0x94>
     11e:	88 0f       	add	r24, r24
     120:	99 1f       	adc	r25, r25
     122:	aa 1f       	adc	r26, r26
     124:	bb 1f       	adc	r27, r27
     126:	0a 94       	dec	r0
     128:	d2 f7       	brpl	.-12     	; 0x11e <__ashldi3+0x8c>
     12a:	89 87       	std	Y+9, r24	; 0x09
     12c:	9a 87       	std	Y+10, r25	; 0x0a
     12e:	ab 87       	std	Y+11, r26	; 0x0b
     130:	bc 87       	std	Y+12, r27	; 0x0c
     132:	04 c0       	rjmp	.+8      	; 0x13c <__ashldi3+0xaa>
     134:	76 95       	lsr	r23
     136:	67 95       	ror	r22
     138:	57 95       	ror	r21
     13a:	47 95       	ror	r20
     13c:	ea 95       	dec	r30
     13e:	d2 f7       	brpl	.-12     	; 0x134 <__ashldi3+0xa2>
     140:	8d 81       	ldd	r24, Y+5	; 0x05
     142:	9e 81       	ldd	r25, Y+6	; 0x06
     144:	af 81       	ldd	r26, Y+7	; 0x07
     146:	b8 85       	ldd	r27, Y+8	; 0x08
     148:	04 c0       	rjmp	.+8      	; 0x152 <__ashldi3+0xc0>
     14a:	88 0f       	add	r24, r24
     14c:	99 1f       	adc	r25, r25
     14e:	aa 1f       	adc	r26, r26
     150:	bb 1f       	adc	r27, r27
     152:	2a 95       	dec	r18
     154:	d2 f7       	brpl	.-12     	; 0x14a <__ashldi3+0xb8>
     156:	48 2b       	or	r20, r24
     158:	59 2b       	or	r21, r25
     15a:	6a 2b       	or	r22, r26
     15c:	7b 2b       	or	r23, r27
     15e:	4d 87       	std	Y+13, r20	; 0x0d
     160:	5e 87       	std	Y+14, r21	; 0x0e
     162:	6f 87       	std	Y+15, r22	; 0x0f
     164:	78 8b       	std	Y+16, r23	; 0x10
     166:	29 85       	ldd	r18, Y+9	; 0x09
     168:	3a 85       	ldd	r19, Y+10	; 0x0a
     16a:	4b 85       	ldd	r20, Y+11	; 0x0b
     16c:	5c 85       	ldd	r21, Y+12	; 0x0c
     16e:	6d 85       	ldd	r22, Y+13	; 0x0d
     170:	7e 85       	ldd	r23, Y+14	; 0x0e
     172:	af 85       	ldd	r26, Y+15	; 0x0f
     174:	98 89       	ldd	r25, Y+16	; 0x10
     176:	8a 2f       	mov	r24, r26
     178:	60 96       	adiw	r28, 0x10	; 16
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	f8 94       	cli
     17e:	de bf       	out	0x3e, r29	; 62
     180:	0f be       	out	0x3f, r0	; 63
     182:	cd bf       	out	0x3d, r28	; 61
     184:	cf 91       	pop	r28
     186:	df 91       	pop	r29
     188:	0f 91       	pop	r16
     18a:	ff 90       	pop	r15
     18c:	ef 90       	pop	r14
     18e:	08 95       	ret

00000190 <__fixunssfsi>:
     190:	ef 92       	push	r14
     192:	ff 92       	push	r15
     194:	0f 93       	push	r16
     196:	1f 93       	push	r17
     198:	7b 01       	movw	r14, r22
     19a:	8c 01       	movw	r16, r24
     19c:	20 e0       	ldi	r18, 0x00	; 0
     19e:	30 e0       	ldi	r19, 0x00	; 0
     1a0:	40 e0       	ldi	r20, 0x00	; 0
     1a2:	5f e4       	ldi	r21, 0x4F	; 79
     1a4:	0e 94 50 05 	call	0xaa0	; 0xaa0 <__gesf2>
     1a8:	88 23       	and	r24, r24
     1aa:	8c f0       	brlt	.+34     	; 0x1ce <__fixunssfsi+0x3e>
     1ac:	c8 01       	movw	r24, r16
     1ae:	b7 01       	movw	r22, r14
     1b0:	20 e0       	ldi	r18, 0x00	; 0
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	40 e0       	ldi	r20, 0x00	; 0
     1b6:	5f e4       	ldi	r21, 0x4F	; 79
     1b8:	0e 94 1c 03 	call	0x638	; 0x638 <__subsf3>
     1bc:	0e 94 0e 06 	call	0xc1c	; 0xc1c <__fixsfsi>
     1c0:	9b 01       	movw	r18, r22
     1c2:	ac 01       	movw	r20, r24
     1c4:	20 50       	subi	r18, 0x00	; 0
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 48       	sbci	r21, 0x80	; 128
     1cc:	06 c0       	rjmp	.+12     	; 0x1da <__fixunssfsi+0x4a>
     1ce:	c8 01       	movw	r24, r16
     1d0:	b7 01       	movw	r22, r14
     1d2:	0e 94 0e 06 	call	0xc1c	; 0xc1c <__fixsfsi>
     1d6:	9b 01       	movw	r18, r22
     1d8:	ac 01       	movw	r20, r24
     1da:	b9 01       	movw	r22, r18
     1dc:	ca 01       	movw	r24, r20
     1de:	1f 91       	pop	r17
     1e0:	0f 91       	pop	r16
     1e2:	ff 90       	pop	r15
     1e4:	ef 90       	pop	r14
     1e6:	08 95       	ret

000001e8 <__floatundisf>:
     1e8:	a2 e0       	ldi	r26, 0x02	; 2
     1ea:	b0 e0       	ldi	r27, 0x00	; 0
     1ec:	ea ef       	ldi	r30, 0xFA	; 250
     1ee:	f0 e0       	ldi	r31, 0x00	; 0
     1f0:	0c 94 8c 2e 	jmp	0x5d18	; 0x5d18 <__prologue_saves__>
     1f4:	12 2f       	mov	r17, r18
     1f6:	b3 2e       	mov	r11, r19
     1f8:	a4 2e       	mov	r10, r20
     1fa:	95 2e       	mov	r9, r21
     1fc:	86 2e       	mov	r8, r22
     1fe:	37 2e       	mov	r3, r23
     200:	28 2e       	mov	r2, r24
     202:	9a 83       	std	Y+2, r25	; 0x02
     204:	c2 2e       	mov	r12, r18
     206:	d3 2e       	mov	r13, r19
     208:	e4 2e       	mov	r14, r20
     20a:	f5 2e       	mov	r15, r21
     20c:	a7 01       	movw	r20, r14
     20e:	96 01       	movw	r18, r12
     210:	60 e0       	ldi	r22, 0x00	; 0
     212:	70 e0       	ldi	r23, 0x00	; 0
     214:	80 e0       	ldi	r24, 0x00	; 0
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	21 17       	cp	r18, r17
     21a:	a1 f4       	brne	.+40     	; 0x244 <__floatundisf+0x5c>
     21c:	3b 15       	cp	r19, r11
     21e:	91 f4       	brne	.+36     	; 0x244 <__floatundisf+0x5c>
     220:	4a 15       	cp	r20, r10
     222:	81 f4       	brne	.+32     	; 0x244 <__floatundisf+0x5c>
     224:	59 15       	cp	r21, r9
     226:	71 f4       	brne	.+28     	; 0x244 <__floatundisf+0x5c>
     228:	68 15       	cp	r22, r8
     22a:	61 f4       	brne	.+24     	; 0x244 <__floatundisf+0x5c>
     22c:	73 15       	cp	r23, r3
     22e:	51 f4       	brne	.+20     	; 0x244 <__floatundisf+0x5c>
     230:	82 15       	cp	r24, r2
     232:	41 f4       	brne	.+16     	; 0x244 <__floatundisf+0x5c>
     234:	aa 81       	ldd	r26, Y+2	; 0x02
     236:	9a 17       	cp	r25, r26
     238:	29 f4       	brne	.+10     	; 0x244 <__floatundisf+0x5c>
     23a:	c7 01       	movw	r24, r14
     23c:	b6 01       	movw	r22, r12
     23e:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__floatunsisf>
     242:	aa c0       	rjmp	.+340    	; 0x398 <__floatundisf+0x1b0>
     244:	21 2f       	mov	r18, r17
     246:	3b 2d       	mov	r19, r11
     248:	4a 2d       	mov	r20, r10
     24a:	59 2d       	mov	r21, r9
     24c:	68 2d       	mov	r22, r8
     24e:	73 2d       	mov	r23, r3
     250:	82 2d       	mov	r24, r2
     252:	9a 81       	ldd	r25, Y+2	; 0x02
     254:	00 e2       	ldi	r16, 0x20	; 32
     256:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__lshrdi3>
     25a:	c9 01       	movw	r24, r18
     25c:	da 01       	movw	r26, r20
     25e:	80 30       	cpi	r24, 0x00	; 0
     260:	e0 e0       	ldi	r30, 0x00	; 0
     262:	9e 07       	cpc	r25, r30
     264:	e1 e0       	ldi	r30, 0x01	; 1
     266:	ae 07       	cpc	r26, r30
     268:	e0 e0       	ldi	r30, 0x00	; 0
     26a:	be 07       	cpc	r27, r30
     26c:	80 f4       	brcc	.+32     	; 0x28e <__floatundisf+0xa6>
     26e:	8f 3f       	cpi	r24, 0xFF	; 255
     270:	91 05       	cpc	r25, r1
     272:	a1 05       	cpc	r26, r1
     274:	b1 05       	cpc	r27, r1
     276:	31 f0       	breq	.+12     	; 0x284 <__floatundisf+0x9c>
     278:	28 f0       	brcs	.+10     	; 0x284 <__floatundisf+0x9c>
     27a:	28 e0       	ldi	r18, 0x08	; 8
     27c:	30 e0       	ldi	r19, 0x00	; 0
     27e:	40 e0       	ldi	r20, 0x00	; 0
     280:	50 e0       	ldi	r21, 0x00	; 0
     282:	16 c0       	rjmp	.+44     	; 0x2b0 <__floatundisf+0xc8>
     284:	20 e0       	ldi	r18, 0x00	; 0
     286:	30 e0       	ldi	r19, 0x00	; 0
     288:	40 e0       	ldi	r20, 0x00	; 0
     28a:	50 e0       	ldi	r21, 0x00	; 0
     28c:	11 c0       	rjmp	.+34     	; 0x2b0 <__floatundisf+0xc8>
     28e:	80 30       	cpi	r24, 0x00	; 0
     290:	f0 e0       	ldi	r31, 0x00	; 0
     292:	9f 07       	cpc	r25, r31
     294:	f0 e0       	ldi	r31, 0x00	; 0
     296:	af 07       	cpc	r26, r31
     298:	f1 e0       	ldi	r31, 0x01	; 1
     29a:	bf 07       	cpc	r27, r31
     29c:	28 f0       	brcs	.+10     	; 0x2a8 <__floatundisf+0xc0>
     29e:	28 e1       	ldi	r18, 0x18	; 24
     2a0:	30 e0       	ldi	r19, 0x00	; 0
     2a2:	40 e0       	ldi	r20, 0x00	; 0
     2a4:	50 e0       	ldi	r21, 0x00	; 0
     2a6:	04 c0       	rjmp	.+8      	; 0x2b0 <__floatundisf+0xc8>
     2a8:	20 e1       	ldi	r18, 0x10	; 16
     2aa:	30 e0       	ldi	r19, 0x00	; 0
     2ac:	40 e0       	ldi	r20, 0x00	; 0
     2ae:	50 e0       	ldi	r21, 0x00	; 0
     2b0:	02 2e       	mov	r0, r18
     2b2:	04 c0       	rjmp	.+8      	; 0x2bc <__floatundisf+0xd4>
     2b4:	b6 95       	lsr	r27
     2b6:	a7 95       	ror	r26
     2b8:	97 95       	ror	r25
     2ba:	87 95       	ror	r24
     2bc:	0a 94       	dec	r0
     2be:	d2 f7       	brpl	.-12     	; 0x2b4 <__floatundisf+0xcc>
     2c0:	fc 01       	movw	r30, r24
     2c2:	e8 59       	subi	r30, 0x98	; 152
     2c4:	ff 4f       	sbci	r31, 0xFF	; 255
     2c6:	80 81       	ld	r24, Z
     2c8:	29 01       	movw	r4, r18
     2ca:	3a 01       	movw	r6, r20
     2cc:	48 0e       	add	r4, r24
     2ce:	51 1c       	adc	r5, r1
     2d0:	61 1c       	adc	r6, r1
     2d2:	71 1c       	adc	r7, r1
     2d4:	49 82       	std	Y+1, r4	; 0x01
     2d6:	21 2f       	mov	r18, r17
     2d8:	3b 2d       	mov	r19, r11
     2da:	4a 2d       	mov	r20, r10
     2dc:	59 2d       	mov	r21, r9
     2de:	68 2d       	mov	r22, r8
     2e0:	73 2d       	mov	r23, r3
     2e2:	82 2d       	mov	r24, r2
     2e4:	9a 81       	ldd	r25, Y+2	; 0x02
     2e6:	04 2d       	mov	r16, r4
     2e8:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__lshrdi3>
     2ec:	c9 01       	movw	r24, r18
     2ee:	da 01       	movw	r26, r20
     2f0:	4c 01       	movw	r8, r24
     2f2:	5d 01       	movw	r10, r26
     2f4:	80 e2       	ldi	r24, 0x20	; 32
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	84 19       	sub	r24, r4
     2fa:	95 09       	sbc	r25, r5
     2fc:	04 c0       	rjmp	.+8      	; 0x306 <__floatundisf+0x11e>
     2fe:	cc 0c       	add	r12, r12
     300:	dd 1c       	adc	r13, r13
     302:	ee 1c       	adc	r14, r14
     304:	ff 1c       	adc	r15, r15
     306:	8a 95       	dec	r24
     308:	d2 f7       	brpl	.-12     	; 0x2fe <__floatundisf+0x116>
     30a:	c1 14       	cp	r12, r1
     30c:	d1 04       	cpc	r13, r1
     30e:	e1 04       	cpc	r14, r1
     310:	f1 04       	cpc	r15, r1
     312:	41 f0       	breq	.+16     	; 0x324 <__floatundisf+0x13c>
     314:	81 e0       	ldi	r24, 0x01	; 1
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	a0 e0       	ldi	r26, 0x00	; 0
     31a:	b0 e0       	ldi	r27, 0x00	; 0
     31c:	88 2a       	or	r8, r24
     31e:	99 2a       	or	r9, r25
     320:	aa 2a       	or	r10, r26
     322:	bb 2a       	or	r11, r27
     324:	90 e2       	ldi	r25, 0x20	; 32
     326:	49 16       	cp	r4, r25
     328:	51 04       	cpc	r5, r1
     32a:	61 04       	cpc	r6, r1
     32c:	71 04       	cpc	r7, r1
     32e:	59 f4       	brne	.+22     	; 0x346 <__floatundisf+0x15e>
     330:	0f 2e       	mov	r0, r31
     332:	f0 e0       	ldi	r31, 0x00	; 0
     334:	ef 2e       	mov	r14, r31
     336:	f0 e0       	ldi	r31, 0x00	; 0
     338:	ff 2e       	mov	r15, r31
     33a:	f0 e8       	ldi	r31, 0x80	; 128
     33c:	0f 2f       	mov	r16, r31
     33e:	ff e4       	ldi	r31, 0x4F	; 79
     340:	1f 2f       	mov	r17, r31
     342:	f0 2d       	mov	r31, r0
     344:	21 c0       	rjmp	.+66     	; 0x388 <__floatundisf+0x1a0>
     346:	af e1       	ldi	r26, 0x1F	; 31
     348:	4a 16       	cp	r4, r26
     34a:	51 04       	cpc	r5, r1
     34c:	61 04       	cpc	r6, r1
     34e:	71 04       	cpc	r7, r1
     350:	59 f4       	brne	.+22     	; 0x368 <__floatundisf+0x180>
     352:	0f 2e       	mov	r0, r31
     354:	f0 e0       	ldi	r31, 0x00	; 0
     356:	ef 2e       	mov	r14, r31
     358:	f0 e0       	ldi	r31, 0x00	; 0
     35a:	ff 2e       	mov	r15, r31
     35c:	f0 e0       	ldi	r31, 0x00	; 0
     35e:	0f 2f       	mov	r16, r31
     360:	ff e4       	ldi	r31, 0x4F	; 79
     362:	1f 2f       	mov	r17, r31
     364:	f0 2d       	mov	r31, r0
     366:	10 c0       	rjmp	.+32     	; 0x388 <__floatundisf+0x1a0>
     368:	61 e0       	ldi	r22, 0x01	; 1
     36a:	70 e0       	ldi	r23, 0x00	; 0
     36c:	80 e0       	ldi	r24, 0x00	; 0
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	09 80       	ldd	r0, Y+1	; 0x01
     372:	04 c0       	rjmp	.+8      	; 0x37c <__floatundisf+0x194>
     374:	66 0f       	add	r22, r22
     376:	77 1f       	adc	r23, r23
     378:	88 1f       	adc	r24, r24
     37a:	99 1f       	adc	r25, r25
     37c:	0a 94       	dec	r0
     37e:	d2 f7       	brpl	.-12     	; 0x374 <__floatundisf+0x18c>
     380:	0e 94 b0 05 	call	0xb60	; 0xb60 <__floatsisf>
     384:	7b 01       	movw	r14, r22
     386:	8c 01       	movw	r16, r24
     388:	c5 01       	movw	r24, r10
     38a:	b4 01       	movw	r22, r8
     38c:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__floatunsisf>
     390:	a8 01       	movw	r20, r16
     392:	97 01       	movw	r18, r14
     394:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
     398:	22 96       	adiw	r28, 0x02	; 2
     39a:	e2 e1       	ldi	r30, 0x12	; 18
     39c:	0c 94 a8 2e 	jmp	0x5d50	; 0x5d50 <__epilogue_restores__>

000003a0 <_fpadd_parts>:
     3a0:	a0 e0       	ldi	r26, 0x00	; 0
     3a2:	b0 e0       	ldi	r27, 0x00	; 0
     3a4:	e6 ed       	ldi	r30, 0xD6	; 214
     3a6:	f1 e0       	ldi	r31, 0x01	; 1
     3a8:	0c 94 8c 2e 	jmp	0x5d18	; 0x5d18 <__prologue_saves__>
     3ac:	dc 01       	movw	r26, r24
     3ae:	2b 01       	movw	r4, r22
     3b0:	fa 01       	movw	r30, r20
     3b2:	9c 91       	ld	r25, X
     3b4:	92 30       	cpi	r25, 0x02	; 2
     3b6:	08 f4       	brcc	.+2      	; 0x3ba <_fpadd_parts+0x1a>
     3b8:	39 c1       	rjmp	.+626    	; 0x62c <_fpadd_parts+0x28c>
     3ba:	eb 01       	movw	r28, r22
     3bc:	88 81       	ld	r24, Y
     3be:	82 30       	cpi	r24, 0x02	; 2
     3c0:	08 f4       	brcc	.+2      	; 0x3c4 <_fpadd_parts+0x24>
     3c2:	33 c1       	rjmp	.+614    	; 0x62a <_fpadd_parts+0x28a>
     3c4:	94 30       	cpi	r25, 0x04	; 4
     3c6:	69 f4       	brne	.+26     	; 0x3e2 <_fpadd_parts+0x42>
     3c8:	84 30       	cpi	r24, 0x04	; 4
     3ca:	09 f0       	breq	.+2      	; 0x3ce <_fpadd_parts+0x2e>
     3cc:	2f c1       	rjmp	.+606    	; 0x62c <_fpadd_parts+0x28c>
     3ce:	11 96       	adiw	r26, 0x01	; 1
     3d0:	9c 91       	ld	r25, X
     3d2:	11 97       	sbiw	r26, 0x01	; 1
     3d4:	89 81       	ldd	r24, Y+1	; 0x01
     3d6:	98 17       	cp	r25, r24
     3d8:	09 f4       	brne	.+2      	; 0x3dc <_fpadd_parts+0x3c>
     3da:	28 c1       	rjmp	.+592    	; 0x62c <_fpadd_parts+0x28c>
     3dc:	a0 e6       	ldi	r26, 0x60	; 96
     3de:	b0 e0       	ldi	r27, 0x00	; 0
     3e0:	25 c1       	rjmp	.+586    	; 0x62c <_fpadd_parts+0x28c>
     3e2:	84 30       	cpi	r24, 0x04	; 4
     3e4:	09 f4       	brne	.+2      	; 0x3e8 <_fpadd_parts+0x48>
     3e6:	21 c1       	rjmp	.+578    	; 0x62a <_fpadd_parts+0x28a>
     3e8:	82 30       	cpi	r24, 0x02	; 2
     3ea:	a9 f4       	brne	.+42     	; 0x416 <_fpadd_parts+0x76>
     3ec:	92 30       	cpi	r25, 0x02	; 2
     3ee:	09 f0       	breq	.+2      	; 0x3f2 <_fpadd_parts+0x52>
     3f0:	1d c1       	rjmp	.+570    	; 0x62c <_fpadd_parts+0x28c>
     3f2:	9a 01       	movw	r18, r20
     3f4:	ad 01       	movw	r20, r26
     3f6:	88 e0       	ldi	r24, 0x08	; 8
     3f8:	ea 01       	movw	r28, r20
     3fa:	09 90       	ld	r0, Y+
     3fc:	ae 01       	movw	r20, r28
     3fe:	e9 01       	movw	r28, r18
     400:	09 92       	st	Y+, r0
     402:	9e 01       	movw	r18, r28
     404:	81 50       	subi	r24, 0x01	; 1
     406:	c1 f7       	brne	.-16     	; 0x3f8 <_fpadd_parts+0x58>
     408:	e2 01       	movw	r28, r4
     40a:	89 81       	ldd	r24, Y+1	; 0x01
     40c:	11 96       	adiw	r26, 0x01	; 1
     40e:	9c 91       	ld	r25, X
     410:	89 23       	and	r24, r25
     412:	81 83       	std	Z+1, r24	; 0x01
     414:	08 c1       	rjmp	.+528    	; 0x626 <_fpadd_parts+0x286>
     416:	92 30       	cpi	r25, 0x02	; 2
     418:	09 f4       	brne	.+2      	; 0x41c <_fpadd_parts+0x7c>
     41a:	07 c1       	rjmp	.+526    	; 0x62a <_fpadd_parts+0x28a>
     41c:	12 96       	adiw	r26, 0x02	; 2
     41e:	2d 90       	ld	r2, X+
     420:	3c 90       	ld	r3, X
     422:	13 97       	sbiw	r26, 0x03	; 3
     424:	eb 01       	movw	r28, r22
     426:	8a 81       	ldd	r24, Y+2	; 0x02
     428:	9b 81       	ldd	r25, Y+3	; 0x03
     42a:	14 96       	adiw	r26, 0x04	; 4
     42c:	ad 90       	ld	r10, X+
     42e:	bd 90       	ld	r11, X+
     430:	cd 90       	ld	r12, X+
     432:	dc 90       	ld	r13, X
     434:	17 97       	sbiw	r26, 0x07	; 7
     436:	ec 80       	ldd	r14, Y+4	; 0x04
     438:	fd 80       	ldd	r15, Y+5	; 0x05
     43a:	0e 81       	ldd	r16, Y+6	; 0x06
     43c:	1f 81       	ldd	r17, Y+7	; 0x07
     43e:	91 01       	movw	r18, r2
     440:	28 1b       	sub	r18, r24
     442:	39 0b       	sbc	r19, r25
     444:	b9 01       	movw	r22, r18
     446:	37 ff       	sbrs	r19, 7
     448:	04 c0       	rjmp	.+8      	; 0x452 <_fpadd_parts+0xb2>
     44a:	66 27       	eor	r22, r22
     44c:	77 27       	eor	r23, r23
     44e:	62 1b       	sub	r22, r18
     450:	73 0b       	sbc	r23, r19
     452:	60 32       	cpi	r22, 0x20	; 32
     454:	71 05       	cpc	r23, r1
     456:	0c f0       	brlt	.+2      	; 0x45a <_fpadd_parts+0xba>
     458:	61 c0       	rjmp	.+194    	; 0x51c <_fpadd_parts+0x17c>
     45a:	12 16       	cp	r1, r18
     45c:	13 06       	cpc	r1, r19
     45e:	6c f5       	brge	.+90     	; 0x4ba <_fpadd_parts+0x11a>
     460:	37 01       	movw	r6, r14
     462:	48 01       	movw	r8, r16
     464:	06 2e       	mov	r0, r22
     466:	04 c0       	rjmp	.+8      	; 0x470 <_fpadd_parts+0xd0>
     468:	96 94       	lsr	r9
     46a:	87 94       	ror	r8
     46c:	77 94       	ror	r7
     46e:	67 94       	ror	r6
     470:	0a 94       	dec	r0
     472:	d2 f7       	brpl	.-12     	; 0x468 <_fpadd_parts+0xc8>
     474:	21 e0       	ldi	r18, 0x01	; 1
     476:	30 e0       	ldi	r19, 0x00	; 0
     478:	40 e0       	ldi	r20, 0x00	; 0
     47a:	50 e0       	ldi	r21, 0x00	; 0
     47c:	04 c0       	rjmp	.+8      	; 0x486 <_fpadd_parts+0xe6>
     47e:	22 0f       	add	r18, r18
     480:	33 1f       	adc	r19, r19
     482:	44 1f       	adc	r20, r20
     484:	55 1f       	adc	r21, r21
     486:	6a 95       	dec	r22
     488:	d2 f7       	brpl	.-12     	; 0x47e <_fpadd_parts+0xde>
     48a:	21 50       	subi	r18, 0x01	; 1
     48c:	30 40       	sbci	r19, 0x00	; 0
     48e:	40 40       	sbci	r20, 0x00	; 0
     490:	50 40       	sbci	r21, 0x00	; 0
     492:	2e 21       	and	r18, r14
     494:	3f 21       	and	r19, r15
     496:	40 23       	and	r20, r16
     498:	51 23       	and	r21, r17
     49a:	21 15       	cp	r18, r1
     49c:	31 05       	cpc	r19, r1
     49e:	41 05       	cpc	r20, r1
     4a0:	51 05       	cpc	r21, r1
     4a2:	21 f0       	breq	.+8      	; 0x4ac <_fpadd_parts+0x10c>
     4a4:	21 e0       	ldi	r18, 0x01	; 1
     4a6:	30 e0       	ldi	r19, 0x00	; 0
     4a8:	40 e0       	ldi	r20, 0x00	; 0
     4aa:	50 e0       	ldi	r21, 0x00	; 0
     4ac:	79 01       	movw	r14, r18
     4ae:	8a 01       	movw	r16, r20
     4b0:	e6 28       	or	r14, r6
     4b2:	f7 28       	or	r15, r7
     4b4:	08 29       	or	r16, r8
     4b6:	19 29       	or	r17, r9
     4b8:	3c c0       	rjmp	.+120    	; 0x532 <_fpadd_parts+0x192>
     4ba:	23 2b       	or	r18, r19
     4bc:	d1 f1       	breq	.+116    	; 0x532 <_fpadd_parts+0x192>
     4be:	26 0e       	add	r2, r22
     4c0:	37 1e       	adc	r3, r23
     4c2:	35 01       	movw	r6, r10
     4c4:	46 01       	movw	r8, r12
     4c6:	06 2e       	mov	r0, r22
     4c8:	04 c0       	rjmp	.+8      	; 0x4d2 <_fpadd_parts+0x132>
     4ca:	96 94       	lsr	r9
     4cc:	87 94       	ror	r8
     4ce:	77 94       	ror	r7
     4d0:	67 94       	ror	r6
     4d2:	0a 94       	dec	r0
     4d4:	d2 f7       	brpl	.-12     	; 0x4ca <_fpadd_parts+0x12a>
     4d6:	21 e0       	ldi	r18, 0x01	; 1
     4d8:	30 e0       	ldi	r19, 0x00	; 0
     4da:	40 e0       	ldi	r20, 0x00	; 0
     4dc:	50 e0       	ldi	r21, 0x00	; 0
     4de:	04 c0       	rjmp	.+8      	; 0x4e8 <_fpadd_parts+0x148>
     4e0:	22 0f       	add	r18, r18
     4e2:	33 1f       	adc	r19, r19
     4e4:	44 1f       	adc	r20, r20
     4e6:	55 1f       	adc	r21, r21
     4e8:	6a 95       	dec	r22
     4ea:	d2 f7       	brpl	.-12     	; 0x4e0 <_fpadd_parts+0x140>
     4ec:	21 50       	subi	r18, 0x01	; 1
     4ee:	30 40       	sbci	r19, 0x00	; 0
     4f0:	40 40       	sbci	r20, 0x00	; 0
     4f2:	50 40       	sbci	r21, 0x00	; 0
     4f4:	2a 21       	and	r18, r10
     4f6:	3b 21       	and	r19, r11
     4f8:	4c 21       	and	r20, r12
     4fa:	5d 21       	and	r21, r13
     4fc:	21 15       	cp	r18, r1
     4fe:	31 05       	cpc	r19, r1
     500:	41 05       	cpc	r20, r1
     502:	51 05       	cpc	r21, r1
     504:	21 f0       	breq	.+8      	; 0x50e <_fpadd_parts+0x16e>
     506:	21 e0       	ldi	r18, 0x01	; 1
     508:	30 e0       	ldi	r19, 0x00	; 0
     50a:	40 e0       	ldi	r20, 0x00	; 0
     50c:	50 e0       	ldi	r21, 0x00	; 0
     50e:	59 01       	movw	r10, r18
     510:	6a 01       	movw	r12, r20
     512:	a6 28       	or	r10, r6
     514:	b7 28       	or	r11, r7
     516:	c8 28       	or	r12, r8
     518:	d9 28       	or	r13, r9
     51a:	0b c0       	rjmp	.+22     	; 0x532 <_fpadd_parts+0x192>
     51c:	82 15       	cp	r24, r2
     51e:	93 05       	cpc	r25, r3
     520:	2c f0       	brlt	.+10     	; 0x52c <_fpadd_parts+0x18c>
     522:	1c 01       	movw	r2, r24
     524:	aa 24       	eor	r10, r10
     526:	bb 24       	eor	r11, r11
     528:	65 01       	movw	r12, r10
     52a:	03 c0       	rjmp	.+6      	; 0x532 <_fpadd_parts+0x192>
     52c:	ee 24       	eor	r14, r14
     52e:	ff 24       	eor	r15, r15
     530:	87 01       	movw	r16, r14
     532:	11 96       	adiw	r26, 0x01	; 1
     534:	9c 91       	ld	r25, X
     536:	d2 01       	movw	r26, r4
     538:	11 96       	adiw	r26, 0x01	; 1
     53a:	8c 91       	ld	r24, X
     53c:	98 17       	cp	r25, r24
     53e:	09 f4       	brne	.+2      	; 0x542 <_fpadd_parts+0x1a2>
     540:	45 c0       	rjmp	.+138    	; 0x5cc <_fpadd_parts+0x22c>
     542:	99 23       	and	r25, r25
     544:	39 f0       	breq	.+14     	; 0x554 <_fpadd_parts+0x1b4>
     546:	a8 01       	movw	r20, r16
     548:	97 01       	movw	r18, r14
     54a:	2a 19       	sub	r18, r10
     54c:	3b 09       	sbc	r19, r11
     54e:	4c 09       	sbc	r20, r12
     550:	5d 09       	sbc	r21, r13
     552:	06 c0       	rjmp	.+12     	; 0x560 <_fpadd_parts+0x1c0>
     554:	a6 01       	movw	r20, r12
     556:	95 01       	movw	r18, r10
     558:	2e 19       	sub	r18, r14
     55a:	3f 09       	sbc	r19, r15
     55c:	40 0b       	sbc	r20, r16
     55e:	51 0b       	sbc	r21, r17
     560:	57 fd       	sbrc	r21, 7
     562:	08 c0       	rjmp	.+16     	; 0x574 <_fpadd_parts+0x1d4>
     564:	11 82       	std	Z+1, r1	; 0x01
     566:	33 82       	std	Z+3, r3	; 0x03
     568:	22 82       	std	Z+2, r2	; 0x02
     56a:	24 83       	std	Z+4, r18	; 0x04
     56c:	35 83       	std	Z+5, r19	; 0x05
     56e:	46 83       	std	Z+6, r20	; 0x06
     570:	57 83       	std	Z+7, r21	; 0x07
     572:	1d c0       	rjmp	.+58     	; 0x5ae <_fpadd_parts+0x20e>
     574:	81 e0       	ldi	r24, 0x01	; 1
     576:	81 83       	std	Z+1, r24	; 0x01
     578:	33 82       	std	Z+3, r3	; 0x03
     57a:	22 82       	std	Z+2, r2	; 0x02
     57c:	88 27       	eor	r24, r24
     57e:	99 27       	eor	r25, r25
     580:	dc 01       	movw	r26, r24
     582:	82 1b       	sub	r24, r18
     584:	93 0b       	sbc	r25, r19
     586:	a4 0b       	sbc	r26, r20
     588:	b5 0b       	sbc	r27, r21
     58a:	84 83       	std	Z+4, r24	; 0x04
     58c:	95 83       	std	Z+5, r25	; 0x05
     58e:	a6 83       	std	Z+6, r26	; 0x06
     590:	b7 83       	std	Z+7, r27	; 0x07
     592:	0d c0       	rjmp	.+26     	; 0x5ae <_fpadd_parts+0x20e>
     594:	22 0f       	add	r18, r18
     596:	33 1f       	adc	r19, r19
     598:	44 1f       	adc	r20, r20
     59a:	55 1f       	adc	r21, r21
     59c:	24 83       	std	Z+4, r18	; 0x04
     59e:	35 83       	std	Z+5, r19	; 0x05
     5a0:	46 83       	std	Z+6, r20	; 0x06
     5a2:	57 83       	std	Z+7, r21	; 0x07
     5a4:	82 81       	ldd	r24, Z+2	; 0x02
     5a6:	93 81       	ldd	r25, Z+3	; 0x03
     5a8:	01 97       	sbiw	r24, 0x01	; 1
     5aa:	93 83       	std	Z+3, r25	; 0x03
     5ac:	82 83       	std	Z+2, r24	; 0x02
     5ae:	24 81       	ldd	r18, Z+4	; 0x04
     5b0:	35 81       	ldd	r19, Z+5	; 0x05
     5b2:	46 81       	ldd	r20, Z+6	; 0x06
     5b4:	57 81       	ldd	r21, Z+7	; 0x07
     5b6:	da 01       	movw	r26, r20
     5b8:	c9 01       	movw	r24, r18
     5ba:	01 97       	sbiw	r24, 0x01	; 1
     5bc:	a1 09       	sbc	r26, r1
     5be:	b1 09       	sbc	r27, r1
     5c0:	8f 5f       	subi	r24, 0xFF	; 255
     5c2:	9f 4f       	sbci	r25, 0xFF	; 255
     5c4:	af 4f       	sbci	r26, 0xFF	; 255
     5c6:	bf 43       	sbci	r27, 0x3F	; 63
     5c8:	28 f3       	brcs	.-54     	; 0x594 <_fpadd_parts+0x1f4>
     5ca:	0b c0       	rjmp	.+22     	; 0x5e2 <_fpadd_parts+0x242>
     5cc:	91 83       	std	Z+1, r25	; 0x01
     5ce:	33 82       	std	Z+3, r3	; 0x03
     5d0:	22 82       	std	Z+2, r2	; 0x02
     5d2:	ea 0c       	add	r14, r10
     5d4:	fb 1c       	adc	r15, r11
     5d6:	0c 1d       	adc	r16, r12
     5d8:	1d 1d       	adc	r17, r13
     5da:	e4 82       	std	Z+4, r14	; 0x04
     5dc:	f5 82       	std	Z+5, r15	; 0x05
     5de:	06 83       	std	Z+6, r16	; 0x06
     5e0:	17 83       	std	Z+7, r17	; 0x07
     5e2:	83 e0       	ldi	r24, 0x03	; 3
     5e4:	80 83       	st	Z, r24
     5e6:	24 81       	ldd	r18, Z+4	; 0x04
     5e8:	35 81       	ldd	r19, Z+5	; 0x05
     5ea:	46 81       	ldd	r20, Z+6	; 0x06
     5ec:	57 81       	ldd	r21, Z+7	; 0x07
     5ee:	57 ff       	sbrs	r21, 7
     5f0:	1a c0       	rjmp	.+52     	; 0x626 <_fpadd_parts+0x286>
     5f2:	c9 01       	movw	r24, r18
     5f4:	aa 27       	eor	r26, r26
     5f6:	97 fd       	sbrc	r25, 7
     5f8:	a0 95       	com	r26
     5fa:	ba 2f       	mov	r27, r26
     5fc:	81 70       	andi	r24, 0x01	; 1
     5fe:	90 70       	andi	r25, 0x00	; 0
     600:	a0 70       	andi	r26, 0x00	; 0
     602:	b0 70       	andi	r27, 0x00	; 0
     604:	56 95       	lsr	r21
     606:	47 95       	ror	r20
     608:	37 95       	ror	r19
     60a:	27 95       	ror	r18
     60c:	82 2b       	or	r24, r18
     60e:	93 2b       	or	r25, r19
     610:	a4 2b       	or	r26, r20
     612:	b5 2b       	or	r27, r21
     614:	84 83       	std	Z+4, r24	; 0x04
     616:	95 83       	std	Z+5, r25	; 0x05
     618:	a6 83       	std	Z+6, r26	; 0x06
     61a:	b7 83       	std	Z+7, r27	; 0x07
     61c:	82 81       	ldd	r24, Z+2	; 0x02
     61e:	93 81       	ldd	r25, Z+3	; 0x03
     620:	01 96       	adiw	r24, 0x01	; 1
     622:	93 83       	std	Z+3, r25	; 0x03
     624:	82 83       	std	Z+2, r24	; 0x02
     626:	df 01       	movw	r26, r30
     628:	01 c0       	rjmp	.+2      	; 0x62c <_fpadd_parts+0x28c>
     62a:	d2 01       	movw	r26, r4
     62c:	cd 01       	movw	r24, r26
     62e:	cd b7       	in	r28, 0x3d	; 61
     630:	de b7       	in	r29, 0x3e	; 62
     632:	e2 e1       	ldi	r30, 0x12	; 18
     634:	0c 94 a8 2e 	jmp	0x5d50	; 0x5d50 <__epilogue_restores__>

00000638 <__subsf3>:
     638:	a0 e2       	ldi	r26, 0x20	; 32
     63a:	b0 e0       	ldi	r27, 0x00	; 0
     63c:	e2 e2       	ldi	r30, 0x22	; 34
     63e:	f3 e0       	ldi	r31, 0x03	; 3
     640:	0c 94 98 2e 	jmp	0x5d30	; 0x5d30 <__prologue_saves__+0x18>
     644:	69 83       	std	Y+1, r22	; 0x01
     646:	7a 83       	std	Y+2, r23	; 0x02
     648:	8b 83       	std	Y+3, r24	; 0x03
     64a:	9c 83       	std	Y+4, r25	; 0x04
     64c:	2d 83       	std	Y+5, r18	; 0x05
     64e:	3e 83       	std	Y+6, r19	; 0x06
     650:	4f 83       	std	Y+7, r20	; 0x07
     652:	58 87       	std	Y+8, r21	; 0x08
     654:	e9 e0       	ldi	r30, 0x09	; 9
     656:	ee 2e       	mov	r14, r30
     658:	f1 2c       	mov	r15, r1
     65a:	ec 0e       	add	r14, r28
     65c:	fd 1e       	adc	r15, r29
     65e:	ce 01       	movw	r24, r28
     660:	01 96       	adiw	r24, 0x01	; 1
     662:	b7 01       	movw	r22, r14
     664:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__unpack_f>
     668:	8e 01       	movw	r16, r28
     66a:	0f 5e       	subi	r16, 0xEF	; 239
     66c:	1f 4f       	sbci	r17, 0xFF	; 255
     66e:	ce 01       	movw	r24, r28
     670:	05 96       	adiw	r24, 0x05	; 5
     672:	b8 01       	movw	r22, r16
     674:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__unpack_f>
     678:	8a 89       	ldd	r24, Y+18	; 0x12
     67a:	91 e0       	ldi	r25, 0x01	; 1
     67c:	89 27       	eor	r24, r25
     67e:	8a 8b       	std	Y+18, r24	; 0x12
     680:	c7 01       	movw	r24, r14
     682:	b8 01       	movw	r22, r16
     684:	ae 01       	movw	r20, r28
     686:	47 5e       	subi	r20, 0xE7	; 231
     688:	5f 4f       	sbci	r21, 0xFF	; 255
     68a:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <_fpadd_parts>
     68e:	0e 94 a9 07 	call	0xf52	; 0xf52 <__pack_f>
     692:	a0 96       	adiw	r28, 0x20	; 32
     694:	e6 e0       	ldi	r30, 0x06	; 6
     696:	0c 94 b4 2e 	jmp	0x5d68	; 0x5d68 <__epilogue_restores__+0x18>

0000069a <__addsf3>:
     69a:	a0 e2       	ldi	r26, 0x20	; 32
     69c:	b0 e0       	ldi	r27, 0x00	; 0
     69e:	e3 e5       	ldi	r30, 0x53	; 83
     6a0:	f3 e0       	ldi	r31, 0x03	; 3
     6a2:	0c 94 98 2e 	jmp	0x5d30	; 0x5d30 <__prologue_saves__+0x18>
     6a6:	69 83       	std	Y+1, r22	; 0x01
     6a8:	7a 83       	std	Y+2, r23	; 0x02
     6aa:	8b 83       	std	Y+3, r24	; 0x03
     6ac:	9c 83       	std	Y+4, r25	; 0x04
     6ae:	2d 83       	std	Y+5, r18	; 0x05
     6b0:	3e 83       	std	Y+6, r19	; 0x06
     6b2:	4f 83       	std	Y+7, r20	; 0x07
     6b4:	58 87       	std	Y+8, r21	; 0x08
     6b6:	f9 e0       	ldi	r31, 0x09	; 9
     6b8:	ef 2e       	mov	r14, r31
     6ba:	f1 2c       	mov	r15, r1
     6bc:	ec 0e       	add	r14, r28
     6be:	fd 1e       	adc	r15, r29
     6c0:	ce 01       	movw	r24, r28
     6c2:	01 96       	adiw	r24, 0x01	; 1
     6c4:	b7 01       	movw	r22, r14
     6c6:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__unpack_f>
     6ca:	8e 01       	movw	r16, r28
     6cc:	0f 5e       	subi	r16, 0xEF	; 239
     6ce:	1f 4f       	sbci	r17, 0xFF	; 255
     6d0:	ce 01       	movw	r24, r28
     6d2:	05 96       	adiw	r24, 0x05	; 5
     6d4:	b8 01       	movw	r22, r16
     6d6:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__unpack_f>
     6da:	c7 01       	movw	r24, r14
     6dc:	b8 01       	movw	r22, r16
     6de:	ae 01       	movw	r20, r28
     6e0:	47 5e       	subi	r20, 0xE7	; 231
     6e2:	5f 4f       	sbci	r21, 0xFF	; 255
     6e4:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <_fpadd_parts>
     6e8:	0e 94 a9 07 	call	0xf52	; 0xf52 <__pack_f>
     6ec:	a0 96       	adiw	r28, 0x20	; 32
     6ee:	e6 e0       	ldi	r30, 0x06	; 6
     6f0:	0c 94 b4 2e 	jmp	0x5d68	; 0x5d68 <__epilogue_restores__+0x18>

000006f4 <__mulsf3>:
     6f4:	a0 e2       	ldi	r26, 0x20	; 32
     6f6:	b0 e0       	ldi	r27, 0x00	; 0
     6f8:	e0 e8       	ldi	r30, 0x80	; 128
     6fa:	f3 e0       	ldi	r31, 0x03	; 3
     6fc:	0c 94 8c 2e 	jmp	0x5d18	; 0x5d18 <__prologue_saves__>
     700:	69 83       	std	Y+1, r22	; 0x01
     702:	7a 83       	std	Y+2, r23	; 0x02
     704:	8b 83       	std	Y+3, r24	; 0x03
     706:	9c 83       	std	Y+4, r25	; 0x04
     708:	2d 83       	std	Y+5, r18	; 0x05
     70a:	3e 83       	std	Y+6, r19	; 0x06
     70c:	4f 83       	std	Y+7, r20	; 0x07
     70e:	58 87       	std	Y+8, r21	; 0x08
     710:	ce 01       	movw	r24, r28
     712:	01 96       	adiw	r24, 0x01	; 1
     714:	be 01       	movw	r22, r28
     716:	67 5f       	subi	r22, 0xF7	; 247
     718:	7f 4f       	sbci	r23, 0xFF	; 255
     71a:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__unpack_f>
     71e:	ce 01       	movw	r24, r28
     720:	05 96       	adiw	r24, 0x05	; 5
     722:	be 01       	movw	r22, r28
     724:	6f 5e       	subi	r22, 0xEF	; 239
     726:	7f 4f       	sbci	r23, 0xFF	; 255
     728:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__unpack_f>
     72c:	99 85       	ldd	r25, Y+9	; 0x09
     72e:	92 30       	cpi	r25, 0x02	; 2
     730:	88 f0       	brcs	.+34     	; 0x754 <__mulsf3+0x60>
     732:	89 89       	ldd	r24, Y+17	; 0x11
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	c8 f0       	brcs	.+50     	; 0x76a <__mulsf3+0x76>
     738:	94 30       	cpi	r25, 0x04	; 4
     73a:	19 f4       	brne	.+6      	; 0x742 <__mulsf3+0x4e>
     73c:	82 30       	cpi	r24, 0x02	; 2
     73e:	51 f4       	brne	.+20     	; 0x754 <__mulsf3+0x60>
     740:	04 c0       	rjmp	.+8      	; 0x74a <__mulsf3+0x56>
     742:	84 30       	cpi	r24, 0x04	; 4
     744:	29 f4       	brne	.+10     	; 0x750 <__mulsf3+0x5c>
     746:	92 30       	cpi	r25, 0x02	; 2
     748:	81 f4       	brne	.+32     	; 0x76a <__mulsf3+0x76>
     74a:	80 e6       	ldi	r24, 0x60	; 96
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	c6 c0       	rjmp	.+396    	; 0x8dc <__stack+0x7d>
     750:	92 30       	cpi	r25, 0x02	; 2
     752:	49 f4       	brne	.+18     	; 0x766 <__mulsf3+0x72>
     754:	20 e0       	ldi	r18, 0x00	; 0
     756:	9a 85       	ldd	r25, Y+10	; 0x0a
     758:	8a 89       	ldd	r24, Y+18	; 0x12
     75a:	98 13       	cpse	r25, r24
     75c:	21 e0       	ldi	r18, 0x01	; 1
     75e:	2a 87       	std	Y+10, r18	; 0x0a
     760:	ce 01       	movw	r24, r28
     762:	09 96       	adiw	r24, 0x09	; 9
     764:	bb c0       	rjmp	.+374    	; 0x8dc <__stack+0x7d>
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	49 f4       	brne	.+18     	; 0x77c <__mulsf3+0x88>
     76a:	20 e0       	ldi	r18, 0x00	; 0
     76c:	9a 85       	ldd	r25, Y+10	; 0x0a
     76e:	8a 89       	ldd	r24, Y+18	; 0x12
     770:	98 13       	cpse	r25, r24
     772:	21 e0       	ldi	r18, 0x01	; 1
     774:	2a 8b       	std	Y+18, r18	; 0x12
     776:	ce 01       	movw	r24, r28
     778:	41 96       	adiw	r24, 0x11	; 17
     77a:	b0 c0       	rjmp	.+352    	; 0x8dc <__stack+0x7d>
     77c:	2d 84       	ldd	r2, Y+13	; 0x0d
     77e:	3e 84       	ldd	r3, Y+14	; 0x0e
     780:	4f 84       	ldd	r4, Y+15	; 0x0f
     782:	58 88       	ldd	r5, Y+16	; 0x10
     784:	6d 88       	ldd	r6, Y+21	; 0x15
     786:	7e 88       	ldd	r7, Y+22	; 0x16
     788:	8f 88       	ldd	r8, Y+23	; 0x17
     78a:	98 8c       	ldd	r9, Y+24	; 0x18
     78c:	ee 24       	eor	r14, r14
     78e:	ff 24       	eor	r15, r15
     790:	87 01       	movw	r16, r14
     792:	aa 24       	eor	r10, r10
     794:	bb 24       	eor	r11, r11
     796:	65 01       	movw	r12, r10
     798:	40 e0       	ldi	r20, 0x00	; 0
     79a:	50 e0       	ldi	r21, 0x00	; 0
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	e0 e0       	ldi	r30, 0x00	; 0
     7a2:	f0 e0       	ldi	r31, 0x00	; 0
     7a4:	c1 01       	movw	r24, r2
     7a6:	81 70       	andi	r24, 0x01	; 1
     7a8:	90 70       	andi	r25, 0x00	; 0
     7aa:	89 2b       	or	r24, r25
     7ac:	e9 f0       	breq	.+58     	; 0x7e8 <__mulsf3+0xf4>
     7ae:	e6 0c       	add	r14, r6
     7b0:	f7 1c       	adc	r15, r7
     7b2:	08 1d       	adc	r16, r8
     7b4:	19 1d       	adc	r17, r9
     7b6:	9a 01       	movw	r18, r20
     7b8:	ab 01       	movw	r20, r22
     7ba:	2a 0d       	add	r18, r10
     7bc:	3b 1d       	adc	r19, r11
     7be:	4c 1d       	adc	r20, r12
     7c0:	5d 1d       	adc	r21, r13
     7c2:	80 e0       	ldi	r24, 0x00	; 0
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	a0 e0       	ldi	r26, 0x00	; 0
     7c8:	b0 e0       	ldi	r27, 0x00	; 0
     7ca:	e6 14       	cp	r14, r6
     7cc:	f7 04       	cpc	r15, r7
     7ce:	08 05       	cpc	r16, r8
     7d0:	19 05       	cpc	r17, r9
     7d2:	20 f4       	brcc	.+8      	; 0x7dc <__mulsf3+0xe8>
     7d4:	81 e0       	ldi	r24, 0x01	; 1
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	a0 e0       	ldi	r26, 0x00	; 0
     7da:	b0 e0       	ldi	r27, 0x00	; 0
     7dc:	ba 01       	movw	r22, r20
     7de:	a9 01       	movw	r20, r18
     7e0:	48 0f       	add	r20, r24
     7e2:	59 1f       	adc	r21, r25
     7e4:	6a 1f       	adc	r22, r26
     7e6:	7b 1f       	adc	r23, r27
     7e8:	aa 0c       	add	r10, r10
     7ea:	bb 1c       	adc	r11, r11
     7ec:	cc 1c       	adc	r12, r12
     7ee:	dd 1c       	adc	r13, r13
     7f0:	97 fe       	sbrs	r9, 7
     7f2:	08 c0       	rjmp	.+16     	; 0x804 <__mulsf3+0x110>
     7f4:	81 e0       	ldi	r24, 0x01	; 1
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	a0 e0       	ldi	r26, 0x00	; 0
     7fa:	b0 e0       	ldi	r27, 0x00	; 0
     7fc:	a8 2a       	or	r10, r24
     7fe:	b9 2a       	or	r11, r25
     800:	ca 2a       	or	r12, r26
     802:	db 2a       	or	r13, r27
     804:	31 96       	adiw	r30, 0x01	; 1
     806:	e0 32       	cpi	r30, 0x20	; 32
     808:	f1 05       	cpc	r31, r1
     80a:	49 f0       	breq	.+18     	; 0x81e <__mulsf3+0x12a>
     80c:	66 0c       	add	r6, r6
     80e:	77 1c       	adc	r7, r7
     810:	88 1c       	adc	r8, r8
     812:	99 1c       	adc	r9, r9
     814:	56 94       	lsr	r5
     816:	47 94       	ror	r4
     818:	37 94       	ror	r3
     81a:	27 94       	ror	r2
     81c:	c3 cf       	rjmp	.-122    	; 0x7a4 <__mulsf3+0xb0>
     81e:	fa 85       	ldd	r31, Y+10	; 0x0a
     820:	ea 89       	ldd	r30, Y+18	; 0x12
     822:	2b 89       	ldd	r18, Y+19	; 0x13
     824:	3c 89       	ldd	r19, Y+20	; 0x14
     826:	8b 85       	ldd	r24, Y+11	; 0x0b
     828:	9c 85       	ldd	r25, Y+12	; 0x0c
     82a:	28 0f       	add	r18, r24
     82c:	39 1f       	adc	r19, r25
     82e:	2e 5f       	subi	r18, 0xFE	; 254
     830:	3f 4f       	sbci	r19, 0xFF	; 255
     832:	17 c0       	rjmp	.+46     	; 0x862 <__stack+0x3>
     834:	ca 01       	movw	r24, r20
     836:	81 70       	andi	r24, 0x01	; 1
     838:	90 70       	andi	r25, 0x00	; 0
     83a:	89 2b       	or	r24, r25
     83c:	61 f0       	breq	.+24     	; 0x856 <__mulsf3+0x162>
     83e:	16 95       	lsr	r17
     840:	07 95       	ror	r16
     842:	f7 94       	ror	r15
     844:	e7 94       	ror	r14
     846:	80 e0       	ldi	r24, 0x00	; 0
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	a0 e0       	ldi	r26, 0x00	; 0
     84c:	b0 e8       	ldi	r27, 0x80	; 128
     84e:	e8 2a       	or	r14, r24
     850:	f9 2a       	or	r15, r25
     852:	0a 2b       	or	r16, r26
     854:	1b 2b       	or	r17, r27
     856:	76 95       	lsr	r23
     858:	67 95       	ror	r22
     85a:	57 95       	ror	r21
     85c:	47 95       	ror	r20
     85e:	2f 5f       	subi	r18, 0xFF	; 255
     860:	3f 4f       	sbci	r19, 0xFF	; 255
     862:	77 fd       	sbrc	r23, 7
     864:	e7 cf       	rjmp	.-50     	; 0x834 <__mulsf3+0x140>
     866:	0c c0       	rjmp	.+24     	; 0x880 <__stack+0x21>
     868:	44 0f       	add	r20, r20
     86a:	55 1f       	adc	r21, r21
     86c:	66 1f       	adc	r22, r22
     86e:	77 1f       	adc	r23, r23
     870:	17 fd       	sbrc	r17, 7
     872:	41 60       	ori	r20, 0x01	; 1
     874:	ee 0c       	add	r14, r14
     876:	ff 1c       	adc	r15, r15
     878:	00 1f       	adc	r16, r16
     87a:	11 1f       	adc	r17, r17
     87c:	21 50       	subi	r18, 0x01	; 1
     87e:	30 40       	sbci	r19, 0x00	; 0
     880:	40 30       	cpi	r20, 0x00	; 0
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	59 07       	cpc	r21, r25
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	69 07       	cpc	r22, r25
     88a:	90 e4       	ldi	r25, 0x40	; 64
     88c:	79 07       	cpc	r23, r25
     88e:	60 f3       	brcs	.-40     	; 0x868 <__stack+0x9>
     890:	2b 8f       	std	Y+27, r18	; 0x1b
     892:	3c 8f       	std	Y+28, r19	; 0x1c
     894:	db 01       	movw	r26, r22
     896:	ca 01       	movw	r24, r20
     898:	8f 77       	andi	r24, 0x7F	; 127
     89a:	90 70       	andi	r25, 0x00	; 0
     89c:	a0 70       	andi	r26, 0x00	; 0
     89e:	b0 70       	andi	r27, 0x00	; 0
     8a0:	80 34       	cpi	r24, 0x40	; 64
     8a2:	91 05       	cpc	r25, r1
     8a4:	a1 05       	cpc	r26, r1
     8a6:	b1 05       	cpc	r27, r1
     8a8:	61 f4       	brne	.+24     	; 0x8c2 <__stack+0x63>
     8aa:	47 fd       	sbrc	r20, 7
     8ac:	0a c0       	rjmp	.+20     	; 0x8c2 <__stack+0x63>
     8ae:	e1 14       	cp	r14, r1
     8b0:	f1 04       	cpc	r15, r1
     8b2:	01 05       	cpc	r16, r1
     8b4:	11 05       	cpc	r17, r1
     8b6:	29 f0       	breq	.+10     	; 0x8c2 <__stack+0x63>
     8b8:	40 5c       	subi	r20, 0xC0	; 192
     8ba:	5f 4f       	sbci	r21, 0xFF	; 255
     8bc:	6f 4f       	sbci	r22, 0xFF	; 255
     8be:	7f 4f       	sbci	r23, 0xFF	; 255
     8c0:	40 78       	andi	r20, 0x80	; 128
     8c2:	1a 8e       	std	Y+26, r1	; 0x1a
     8c4:	fe 17       	cp	r31, r30
     8c6:	11 f0       	breq	.+4      	; 0x8cc <__stack+0x6d>
     8c8:	81 e0       	ldi	r24, 0x01	; 1
     8ca:	8a 8f       	std	Y+26, r24	; 0x1a
     8cc:	4d 8f       	std	Y+29, r20	; 0x1d
     8ce:	5e 8f       	std	Y+30, r21	; 0x1e
     8d0:	6f 8f       	std	Y+31, r22	; 0x1f
     8d2:	78 a3       	std	Y+32, r23	; 0x20
     8d4:	83 e0       	ldi	r24, 0x03	; 3
     8d6:	89 8f       	std	Y+25, r24	; 0x19
     8d8:	ce 01       	movw	r24, r28
     8da:	49 96       	adiw	r24, 0x19	; 25
     8dc:	0e 94 a9 07 	call	0xf52	; 0xf52 <__pack_f>
     8e0:	a0 96       	adiw	r28, 0x20	; 32
     8e2:	e2 e1       	ldi	r30, 0x12	; 18
     8e4:	0c 94 a8 2e 	jmp	0x5d50	; 0x5d50 <__epilogue_restores__>

000008e8 <__divsf3>:
     8e8:	a8 e1       	ldi	r26, 0x18	; 24
     8ea:	b0 e0       	ldi	r27, 0x00	; 0
     8ec:	ea e7       	ldi	r30, 0x7A	; 122
     8ee:	f4 e0       	ldi	r31, 0x04	; 4
     8f0:	0c 94 94 2e 	jmp	0x5d28	; 0x5d28 <__prologue_saves__+0x10>
     8f4:	69 83       	std	Y+1, r22	; 0x01
     8f6:	7a 83       	std	Y+2, r23	; 0x02
     8f8:	8b 83       	std	Y+3, r24	; 0x03
     8fa:	9c 83       	std	Y+4, r25	; 0x04
     8fc:	2d 83       	std	Y+5, r18	; 0x05
     8fe:	3e 83       	std	Y+6, r19	; 0x06
     900:	4f 83       	std	Y+7, r20	; 0x07
     902:	58 87       	std	Y+8, r21	; 0x08
     904:	b9 e0       	ldi	r27, 0x09	; 9
     906:	eb 2e       	mov	r14, r27
     908:	f1 2c       	mov	r15, r1
     90a:	ec 0e       	add	r14, r28
     90c:	fd 1e       	adc	r15, r29
     90e:	ce 01       	movw	r24, r28
     910:	01 96       	adiw	r24, 0x01	; 1
     912:	b7 01       	movw	r22, r14
     914:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__unpack_f>
     918:	8e 01       	movw	r16, r28
     91a:	0f 5e       	subi	r16, 0xEF	; 239
     91c:	1f 4f       	sbci	r17, 0xFF	; 255
     91e:	ce 01       	movw	r24, r28
     920:	05 96       	adiw	r24, 0x05	; 5
     922:	b8 01       	movw	r22, r16
     924:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__unpack_f>
     928:	29 85       	ldd	r18, Y+9	; 0x09
     92a:	22 30       	cpi	r18, 0x02	; 2
     92c:	08 f4       	brcc	.+2      	; 0x930 <__divsf3+0x48>
     92e:	7e c0       	rjmp	.+252    	; 0xa2c <__divsf3+0x144>
     930:	39 89       	ldd	r19, Y+17	; 0x11
     932:	32 30       	cpi	r19, 0x02	; 2
     934:	10 f4       	brcc	.+4      	; 0x93a <__divsf3+0x52>
     936:	b8 01       	movw	r22, r16
     938:	7c c0       	rjmp	.+248    	; 0xa32 <__divsf3+0x14a>
     93a:	8a 85       	ldd	r24, Y+10	; 0x0a
     93c:	9a 89       	ldd	r25, Y+18	; 0x12
     93e:	89 27       	eor	r24, r25
     940:	8a 87       	std	Y+10, r24	; 0x0a
     942:	24 30       	cpi	r18, 0x04	; 4
     944:	11 f0       	breq	.+4      	; 0x94a <__divsf3+0x62>
     946:	22 30       	cpi	r18, 0x02	; 2
     948:	31 f4       	brne	.+12     	; 0x956 <__divsf3+0x6e>
     94a:	23 17       	cp	r18, r19
     94c:	09 f0       	breq	.+2      	; 0x950 <__divsf3+0x68>
     94e:	6e c0       	rjmp	.+220    	; 0xa2c <__divsf3+0x144>
     950:	60 e6       	ldi	r22, 0x60	; 96
     952:	70 e0       	ldi	r23, 0x00	; 0
     954:	6e c0       	rjmp	.+220    	; 0xa32 <__divsf3+0x14a>
     956:	34 30       	cpi	r19, 0x04	; 4
     958:	39 f4       	brne	.+14     	; 0x968 <__divsf3+0x80>
     95a:	1d 86       	std	Y+13, r1	; 0x0d
     95c:	1e 86       	std	Y+14, r1	; 0x0e
     95e:	1f 86       	std	Y+15, r1	; 0x0f
     960:	18 8a       	std	Y+16, r1	; 0x10
     962:	1c 86       	std	Y+12, r1	; 0x0c
     964:	1b 86       	std	Y+11, r1	; 0x0b
     966:	04 c0       	rjmp	.+8      	; 0x970 <__divsf3+0x88>
     968:	32 30       	cpi	r19, 0x02	; 2
     96a:	21 f4       	brne	.+8      	; 0x974 <__divsf3+0x8c>
     96c:	84 e0       	ldi	r24, 0x04	; 4
     96e:	89 87       	std	Y+9, r24	; 0x09
     970:	b7 01       	movw	r22, r14
     972:	5f c0       	rjmp	.+190    	; 0xa32 <__divsf3+0x14a>
     974:	2b 85       	ldd	r18, Y+11	; 0x0b
     976:	3c 85       	ldd	r19, Y+12	; 0x0c
     978:	8b 89       	ldd	r24, Y+19	; 0x13
     97a:	9c 89       	ldd	r25, Y+20	; 0x14
     97c:	28 1b       	sub	r18, r24
     97e:	39 0b       	sbc	r19, r25
     980:	3c 87       	std	Y+12, r19	; 0x0c
     982:	2b 87       	std	Y+11, r18	; 0x0b
     984:	ed 84       	ldd	r14, Y+13	; 0x0d
     986:	fe 84       	ldd	r15, Y+14	; 0x0e
     988:	0f 85       	ldd	r16, Y+15	; 0x0f
     98a:	18 89       	ldd	r17, Y+16	; 0x10
     98c:	ad 88       	ldd	r10, Y+21	; 0x15
     98e:	be 88       	ldd	r11, Y+22	; 0x16
     990:	cf 88       	ldd	r12, Y+23	; 0x17
     992:	d8 8c       	ldd	r13, Y+24	; 0x18
     994:	ea 14       	cp	r14, r10
     996:	fb 04       	cpc	r15, r11
     998:	0c 05       	cpc	r16, r12
     99a:	1d 05       	cpc	r17, r13
     99c:	40 f4       	brcc	.+16     	; 0x9ae <__divsf3+0xc6>
     99e:	ee 0c       	add	r14, r14
     9a0:	ff 1c       	adc	r15, r15
     9a2:	00 1f       	adc	r16, r16
     9a4:	11 1f       	adc	r17, r17
     9a6:	21 50       	subi	r18, 0x01	; 1
     9a8:	30 40       	sbci	r19, 0x00	; 0
     9aa:	3c 87       	std	Y+12, r19	; 0x0c
     9ac:	2b 87       	std	Y+11, r18	; 0x0b
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	80 e0       	ldi	r24, 0x00	; 0
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	a0 e0       	ldi	r26, 0x00	; 0
     9bc:	b0 e4       	ldi	r27, 0x40	; 64
     9be:	60 e0       	ldi	r22, 0x00	; 0
     9c0:	70 e0       	ldi	r23, 0x00	; 0
     9c2:	ea 14       	cp	r14, r10
     9c4:	fb 04       	cpc	r15, r11
     9c6:	0c 05       	cpc	r16, r12
     9c8:	1d 05       	cpc	r17, r13
     9ca:	40 f0       	brcs	.+16     	; 0x9dc <__divsf3+0xf4>
     9cc:	28 2b       	or	r18, r24
     9ce:	39 2b       	or	r19, r25
     9d0:	4a 2b       	or	r20, r26
     9d2:	5b 2b       	or	r21, r27
     9d4:	ea 18       	sub	r14, r10
     9d6:	fb 08       	sbc	r15, r11
     9d8:	0c 09       	sbc	r16, r12
     9da:	1d 09       	sbc	r17, r13
     9dc:	b6 95       	lsr	r27
     9de:	a7 95       	ror	r26
     9e0:	97 95       	ror	r25
     9e2:	87 95       	ror	r24
     9e4:	ee 0c       	add	r14, r14
     9e6:	ff 1c       	adc	r15, r15
     9e8:	00 1f       	adc	r16, r16
     9ea:	11 1f       	adc	r17, r17
     9ec:	6f 5f       	subi	r22, 0xFF	; 255
     9ee:	7f 4f       	sbci	r23, 0xFF	; 255
     9f0:	6f 31       	cpi	r22, 0x1F	; 31
     9f2:	71 05       	cpc	r23, r1
     9f4:	31 f7       	brne	.-52     	; 0x9c2 <__divsf3+0xda>
     9f6:	da 01       	movw	r26, r20
     9f8:	c9 01       	movw	r24, r18
     9fa:	8f 77       	andi	r24, 0x7F	; 127
     9fc:	90 70       	andi	r25, 0x00	; 0
     9fe:	a0 70       	andi	r26, 0x00	; 0
     a00:	b0 70       	andi	r27, 0x00	; 0
     a02:	80 34       	cpi	r24, 0x40	; 64
     a04:	91 05       	cpc	r25, r1
     a06:	a1 05       	cpc	r26, r1
     a08:	b1 05       	cpc	r27, r1
     a0a:	61 f4       	brne	.+24     	; 0xa24 <__divsf3+0x13c>
     a0c:	27 fd       	sbrc	r18, 7
     a0e:	0a c0       	rjmp	.+20     	; 0xa24 <__divsf3+0x13c>
     a10:	e1 14       	cp	r14, r1
     a12:	f1 04       	cpc	r15, r1
     a14:	01 05       	cpc	r16, r1
     a16:	11 05       	cpc	r17, r1
     a18:	29 f0       	breq	.+10     	; 0xa24 <__divsf3+0x13c>
     a1a:	20 5c       	subi	r18, 0xC0	; 192
     a1c:	3f 4f       	sbci	r19, 0xFF	; 255
     a1e:	4f 4f       	sbci	r20, 0xFF	; 255
     a20:	5f 4f       	sbci	r21, 0xFF	; 255
     a22:	20 78       	andi	r18, 0x80	; 128
     a24:	2d 87       	std	Y+13, r18	; 0x0d
     a26:	3e 87       	std	Y+14, r19	; 0x0e
     a28:	4f 87       	std	Y+15, r20	; 0x0f
     a2a:	58 8b       	std	Y+16, r21	; 0x10
     a2c:	be 01       	movw	r22, r28
     a2e:	67 5f       	subi	r22, 0xF7	; 247
     a30:	7f 4f       	sbci	r23, 0xFF	; 255
     a32:	cb 01       	movw	r24, r22
     a34:	0e 94 a9 07 	call	0xf52	; 0xf52 <__pack_f>
     a38:	68 96       	adiw	r28, 0x18	; 24
     a3a:	ea e0       	ldi	r30, 0x0A	; 10
     a3c:	0c 94 b0 2e 	jmp	0x5d60	; 0x5d60 <__epilogue_restores__+0x10>

00000a40 <__gtsf2>:
     a40:	a8 e1       	ldi	r26, 0x18	; 24
     a42:	b0 e0       	ldi	r27, 0x00	; 0
     a44:	e6 e2       	ldi	r30, 0x26	; 38
     a46:	f5 e0       	ldi	r31, 0x05	; 5
     a48:	0c 94 98 2e 	jmp	0x5d30	; 0x5d30 <__prologue_saves__+0x18>
     a4c:	69 83       	std	Y+1, r22	; 0x01
     a4e:	7a 83       	std	Y+2, r23	; 0x02
     a50:	8b 83       	std	Y+3, r24	; 0x03
     a52:	9c 83       	std	Y+4, r25	; 0x04
     a54:	2d 83       	std	Y+5, r18	; 0x05
     a56:	3e 83       	std	Y+6, r19	; 0x06
     a58:	4f 83       	std	Y+7, r20	; 0x07
     a5a:	58 87       	std	Y+8, r21	; 0x08
     a5c:	89 e0       	ldi	r24, 0x09	; 9
     a5e:	e8 2e       	mov	r14, r24
     a60:	f1 2c       	mov	r15, r1
     a62:	ec 0e       	add	r14, r28
     a64:	fd 1e       	adc	r15, r29
     a66:	ce 01       	movw	r24, r28
     a68:	01 96       	adiw	r24, 0x01	; 1
     a6a:	b7 01       	movw	r22, r14
     a6c:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__unpack_f>
     a70:	8e 01       	movw	r16, r28
     a72:	0f 5e       	subi	r16, 0xEF	; 239
     a74:	1f 4f       	sbci	r17, 0xFF	; 255
     a76:	ce 01       	movw	r24, r28
     a78:	05 96       	adiw	r24, 0x05	; 5
     a7a:	b8 01       	movw	r22, r16
     a7c:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__unpack_f>
     a80:	89 85       	ldd	r24, Y+9	; 0x09
     a82:	82 30       	cpi	r24, 0x02	; 2
     a84:	40 f0       	brcs	.+16     	; 0xa96 <__gtsf2+0x56>
     a86:	89 89       	ldd	r24, Y+17	; 0x11
     a88:	82 30       	cpi	r24, 0x02	; 2
     a8a:	28 f0       	brcs	.+10     	; 0xa96 <__gtsf2+0x56>
     a8c:	c7 01       	movw	r24, r14
     a8e:	b8 01       	movw	r22, r16
     a90:	0e 94 f6 08 	call	0x11ec	; 0x11ec <__fpcmp_parts_f>
     a94:	01 c0       	rjmp	.+2      	; 0xa98 <__gtsf2+0x58>
     a96:	8f ef       	ldi	r24, 0xFF	; 255
     a98:	68 96       	adiw	r28, 0x18	; 24
     a9a:	e6 e0       	ldi	r30, 0x06	; 6
     a9c:	0c 94 b4 2e 	jmp	0x5d68	; 0x5d68 <__epilogue_restores__+0x18>

00000aa0 <__gesf2>:
     aa0:	a8 e1       	ldi	r26, 0x18	; 24
     aa2:	b0 e0       	ldi	r27, 0x00	; 0
     aa4:	e6 e5       	ldi	r30, 0x56	; 86
     aa6:	f5 e0       	ldi	r31, 0x05	; 5
     aa8:	0c 94 98 2e 	jmp	0x5d30	; 0x5d30 <__prologue_saves__+0x18>
     aac:	69 83       	std	Y+1, r22	; 0x01
     aae:	7a 83       	std	Y+2, r23	; 0x02
     ab0:	8b 83       	std	Y+3, r24	; 0x03
     ab2:	9c 83       	std	Y+4, r25	; 0x04
     ab4:	2d 83       	std	Y+5, r18	; 0x05
     ab6:	3e 83       	std	Y+6, r19	; 0x06
     ab8:	4f 83       	std	Y+7, r20	; 0x07
     aba:	58 87       	std	Y+8, r21	; 0x08
     abc:	89 e0       	ldi	r24, 0x09	; 9
     abe:	e8 2e       	mov	r14, r24
     ac0:	f1 2c       	mov	r15, r1
     ac2:	ec 0e       	add	r14, r28
     ac4:	fd 1e       	adc	r15, r29
     ac6:	ce 01       	movw	r24, r28
     ac8:	01 96       	adiw	r24, 0x01	; 1
     aca:	b7 01       	movw	r22, r14
     acc:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__unpack_f>
     ad0:	8e 01       	movw	r16, r28
     ad2:	0f 5e       	subi	r16, 0xEF	; 239
     ad4:	1f 4f       	sbci	r17, 0xFF	; 255
     ad6:	ce 01       	movw	r24, r28
     ad8:	05 96       	adiw	r24, 0x05	; 5
     ada:	b8 01       	movw	r22, r16
     adc:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__unpack_f>
     ae0:	89 85       	ldd	r24, Y+9	; 0x09
     ae2:	82 30       	cpi	r24, 0x02	; 2
     ae4:	40 f0       	brcs	.+16     	; 0xaf6 <__gesf2+0x56>
     ae6:	89 89       	ldd	r24, Y+17	; 0x11
     ae8:	82 30       	cpi	r24, 0x02	; 2
     aea:	28 f0       	brcs	.+10     	; 0xaf6 <__gesf2+0x56>
     aec:	c7 01       	movw	r24, r14
     aee:	b8 01       	movw	r22, r16
     af0:	0e 94 f6 08 	call	0x11ec	; 0x11ec <__fpcmp_parts_f>
     af4:	01 c0       	rjmp	.+2      	; 0xaf8 <__gesf2+0x58>
     af6:	8f ef       	ldi	r24, 0xFF	; 255
     af8:	68 96       	adiw	r28, 0x18	; 24
     afa:	e6 e0       	ldi	r30, 0x06	; 6
     afc:	0c 94 b4 2e 	jmp	0x5d68	; 0x5d68 <__epilogue_restores__+0x18>

00000b00 <__ltsf2>:
     b00:	a8 e1       	ldi	r26, 0x18	; 24
     b02:	b0 e0       	ldi	r27, 0x00	; 0
     b04:	e6 e8       	ldi	r30, 0x86	; 134
     b06:	f5 e0       	ldi	r31, 0x05	; 5
     b08:	0c 94 98 2e 	jmp	0x5d30	; 0x5d30 <__prologue_saves__+0x18>
     b0c:	69 83       	std	Y+1, r22	; 0x01
     b0e:	7a 83       	std	Y+2, r23	; 0x02
     b10:	8b 83       	std	Y+3, r24	; 0x03
     b12:	9c 83       	std	Y+4, r25	; 0x04
     b14:	2d 83       	std	Y+5, r18	; 0x05
     b16:	3e 83       	std	Y+6, r19	; 0x06
     b18:	4f 83       	std	Y+7, r20	; 0x07
     b1a:	58 87       	std	Y+8, r21	; 0x08
     b1c:	89 e0       	ldi	r24, 0x09	; 9
     b1e:	e8 2e       	mov	r14, r24
     b20:	f1 2c       	mov	r15, r1
     b22:	ec 0e       	add	r14, r28
     b24:	fd 1e       	adc	r15, r29
     b26:	ce 01       	movw	r24, r28
     b28:	01 96       	adiw	r24, 0x01	; 1
     b2a:	b7 01       	movw	r22, r14
     b2c:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__unpack_f>
     b30:	8e 01       	movw	r16, r28
     b32:	0f 5e       	subi	r16, 0xEF	; 239
     b34:	1f 4f       	sbci	r17, 0xFF	; 255
     b36:	ce 01       	movw	r24, r28
     b38:	05 96       	adiw	r24, 0x05	; 5
     b3a:	b8 01       	movw	r22, r16
     b3c:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__unpack_f>
     b40:	89 85       	ldd	r24, Y+9	; 0x09
     b42:	82 30       	cpi	r24, 0x02	; 2
     b44:	40 f0       	brcs	.+16     	; 0xb56 <__ltsf2+0x56>
     b46:	89 89       	ldd	r24, Y+17	; 0x11
     b48:	82 30       	cpi	r24, 0x02	; 2
     b4a:	28 f0       	brcs	.+10     	; 0xb56 <__ltsf2+0x56>
     b4c:	c7 01       	movw	r24, r14
     b4e:	b8 01       	movw	r22, r16
     b50:	0e 94 f6 08 	call	0x11ec	; 0x11ec <__fpcmp_parts_f>
     b54:	01 c0       	rjmp	.+2      	; 0xb58 <__ltsf2+0x58>
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	68 96       	adiw	r28, 0x18	; 24
     b5a:	e6 e0       	ldi	r30, 0x06	; 6
     b5c:	0c 94 b4 2e 	jmp	0x5d68	; 0x5d68 <__epilogue_restores__+0x18>

00000b60 <__floatsisf>:
     b60:	a8 e0       	ldi	r26, 0x08	; 8
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	e6 eb       	ldi	r30, 0xB6	; 182
     b66:	f5 e0       	ldi	r31, 0x05	; 5
     b68:	0c 94 95 2e 	jmp	0x5d2a	; 0x5d2a <__prologue_saves__+0x12>
     b6c:	9b 01       	movw	r18, r22
     b6e:	ac 01       	movw	r20, r24
     b70:	83 e0       	ldi	r24, 0x03	; 3
     b72:	89 83       	std	Y+1, r24	; 0x01
     b74:	da 01       	movw	r26, r20
     b76:	c9 01       	movw	r24, r18
     b78:	88 27       	eor	r24, r24
     b7a:	b7 fd       	sbrc	r27, 7
     b7c:	83 95       	inc	r24
     b7e:	99 27       	eor	r25, r25
     b80:	aa 27       	eor	r26, r26
     b82:	bb 27       	eor	r27, r27
     b84:	b8 2e       	mov	r11, r24
     b86:	21 15       	cp	r18, r1
     b88:	31 05       	cpc	r19, r1
     b8a:	41 05       	cpc	r20, r1
     b8c:	51 05       	cpc	r21, r1
     b8e:	19 f4       	brne	.+6      	; 0xb96 <__floatsisf+0x36>
     b90:	82 e0       	ldi	r24, 0x02	; 2
     b92:	89 83       	std	Y+1, r24	; 0x01
     b94:	3a c0       	rjmp	.+116    	; 0xc0a <__floatsisf+0xaa>
     b96:	88 23       	and	r24, r24
     b98:	a9 f0       	breq	.+42     	; 0xbc4 <__floatsisf+0x64>
     b9a:	20 30       	cpi	r18, 0x00	; 0
     b9c:	80 e0       	ldi	r24, 0x00	; 0
     b9e:	38 07       	cpc	r19, r24
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	48 07       	cpc	r20, r24
     ba4:	80 e8       	ldi	r24, 0x80	; 128
     ba6:	58 07       	cpc	r21, r24
     ba8:	29 f4       	brne	.+10     	; 0xbb4 <__floatsisf+0x54>
     baa:	60 e0       	ldi	r22, 0x00	; 0
     bac:	70 e0       	ldi	r23, 0x00	; 0
     bae:	80 e0       	ldi	r24, 0x00	; 0
     bb0:	9f ec       	ldi	r25, 0xCF	; 207
     bb2:	30 c0       	rjmp	.+96     	; 0xc14 <__floatsisf+0xb4>
     bb4:	ee 24       	eor	r14, r14
     bb6:	ff 24       	eor	r15, r15
     bb8:	87 01       	movw	r16, r14
     bba:	e2 1a       	sub	r14, r18
     bbc:	f3 0a       	sbc	r15, r19
     bbe:	04 0b       	sbc	r16, r20
     bc0:	15 0b       	sbc	r17, r21
     bc2:	02 c0       	rjmp	.+4      	; 0xbc8 <__floatsisf+0x68>
     bc4:	79 01       	movw	r14, r18
     bc6:	8a 01       	movw	r16, r20
     bc8:	8e e1       	ldi	r24, 0x1E	; 30
     bca:	c8 2e       	mov	r12, r24
     bcc:	d1 2c       	mov	r13, r1
     bce:	dc 82       	std	Y+4, r13	; 0x04
     bd0:	cb 82       	std	Y+3, r12	; 0x03
     bd2:	ed 82       	std	Y+5, r14	; 0x05
     bd4:	fe 82       	std	Y+6, r15	; 0x06
     bd6:	0f 83       	std	Y+7, r16	; 0x07
     bd8:	18 87       	std	Y+8, r17	; 0x08
     bda:	c8 01       	movw	r24, r16
     bdc:	b7 01       	movw	r22, r14
     bde:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <__clzsi2>
     be2:	01 97       	sbiw	r24, 0x01	; 1
     be4:	18 16       	cp	r1, r24
     be6:	19 06       	cpc	r1, r25
     be8:	84 f4       	brge	.+32     	; 0xc0a <__floatsisf+0xaa>
     bea:	08 2e       	mov	r0, r24
     bec:	04 c0       	rjmp	.+8      	; 0xbf6 <__floatsisf+0x96>
     bee:	ee 0c       	add	r14, r14
     bf0:	ff 1c       	adc	r15, r15
     bf2:	00 1f       	adc	r16, r16
     bf4:	11 1f       	adc	r17, r17
     bf6:	0a 94       	dec	r0
     bf8:	d2 f7       	brpl	.-12     	; 0xbee <__floatsisf+0x8e>
     bfa:	ed 82       	std	Y+5, r14	; 0x05
     bfc:	fe 82       	std	Y+6, r15	; 0x06
     bfe:	0f 83       	std	Y+7, r16	; 0x07
     c00:	18 87       	std	Y+8, r17	; 0x08
     c02:	c8 1a       	sub	r12, r24
     c04:	d9 0a       	sbc	r13, r25
     c06:	dc 82       	std	Y+4, r13	; 0x04
     c08:	cb 82       	std	Y+3, r12	; 0x03
     c0a:	ba 82       	std	Y+2, r11	; 0x02
     c0c:	ce 01       	movw	r24, r28
     c0e:	01 96       	adiw	r24, 0x01	; 1
     c10:	0e 94 a9 07 	call	0xf52	; 0xf52 <__pack_f>
     c14:	28 96       	adiw	r28, 0x08	; 8
     c16:	e9 e0       	ldi	r30, 0x09	; 9
     c18:	0c 94 b1 2e 	jmp	0x5d62	; 0x5d62 <__epilogue_restores__+0x12>

00000c1c <__fixsfsi>:
     c1c:	ac e0       	ldi	r26, 0x0C	; 12
     c1e:	b0 e0       	ldi	r27, 0x00	; 0
     c20:	e4 e1       	ldi	r30, 0x14	; 20
     c22:	f6 e0       	ldi	r31, 0x06	; 6
     c24:	0c 94 9c 2e 	jmp	0x5d38	; 0x5d38 <__prologue_saves__+0x20>
     c28:	69 83       	std	Y+1, r22	; 0x01
     c2a:	7a 83       	std	Y+2, r23	; 0x02
     c2c:	8b 83       	std	Y+3, r24	; 0x03
     c2e:	9c 83       	std	Y+4, r25	; 0x04
     c30:	ce 01       	movw	r24, r28
     c32:	01 96       	adiw	r24, 0x01	; 1
     c34:	be 01       	movw	r22, r28
     c36:	6b 5f       	subi	r22, 0xFB	; 251
     c38:	7f 4f       	sbci	r23, 0xFF	; 255
     c3a:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__unpack_f>
     c3e:	8d 81       	ldd	r24, Y+5	; 0x05
     c40:	82 30       	cpi	r24, 0x02	; 2
     c42:	61 f1       	breq	.+88     	; 0xc9c <__fixsfsi+0x80>
     c44:	82 30       	cpi	r24, 0x02	; 2
     c46:	50 f1       	brcs	.+84     	; 0xc9c <__fixsfsi+0x80>
     c48:	84 30       	cpi	r24, 0x04	; 4
     c4a:	21 f4       	brne	.+8      	; 0xc54 <__fixsfsi+0x38>
     c4c:	8e 81       	ldd	r24, Y+6	; 0x06
     c4e:	88 23       	and	r24, r24
     c50:	51 f1       	breq	.+84     	; 0xca6 <__fixsfsi+0x8a>
     c52:	2e c0       	rjmp	.+92     	; 0xcb0 <__fixsfsi+0x94>
     c54:	2f 81       	ldd	r18, Y+7	; 0x07
     c56:	38 85       	ldd	r19, Y+8	; 0x08
     c58:	37 fd       	sbrc	r19, 7
     c5a:	20 c0       	rjmp	.+64     	; 0xc9c <__fixsfsi+0x80>
     c5c:	6e 81       	ldd	r22, Y+6	; 0x06
     c5e:	2f 31       	cpi	r18, 0x1F	; 31
     c60:	31 05       	cpc	r19, r1
     c62:	1c f0       	brlt	.+6      	; 0xc6a <__fixsfsi+0x4e>
     c64:	66 23       	and	r22, r22
     c66:	f9 f0       	breq	.+62     	; 0xca6 <__fixsfsi+0x8a>
     c68:	23 c0       	rjmp	.+70     	; 0xcb0 <__fixsfsi+0x94>
     c6a:	8e e1       	ldi	r24, 0x1E	; 30
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	82 1b       	sub	r24, r18
     c70:	93 0b       	sbc	r25, r19
     c72:	29 85       	ldd	r18, Y+9	; 0x09
     c74:	3a 85       	ldd	r19, Y+10	; 0x0a
     c76:	4b 85       	ldd	r20, Y+11	; 0x0b
     c78:	5c 85       	ldd	r21, Y+12	; 0x0c
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <__fixsfsi+0x68>
     c7c:	56 95       	lsr	r21
     c7e:	47 95       	ror	r20
     c80:	37 95       	ror	r19
     c82:	27 95       	ror	r18
     c84:	8a 95       	dec	r24
     c86:	d2 f7       	brpl	.-12     	; 0xc7c <__fixsfsi+0x60>
     c88:	66 23       	and	r22, r22
     c8a:	b1 f0       	breq	.+44     	; 0xcb8 <__fixsfsi+0x9c>
     c8c:	50 95       	com	r21
     c8e:	40 95       	com	r20
     c90:	30 95       	com	r19
     c92:	21 95       	neg	r18
     c94:	3f 4f       	sbci	r19, 0xFF	; 255
     c96:	4f 4f       	sbci	r20, 0xFF	; 255
     c98:	5f 4f       	sbci	r21, 0xFF	; 255
     c9a:	0e c0       	rjmp	.+28     	; 0xcb8 <__fixsfsi+0x9c>
     c9c:	20 e0       	ldi	r18, 0x00	; 0
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	40 e0       	ldi	r20, 0x00	; 0
     ca2:	50 e0       	ldi	r21, 0x00	; 0
     ca4:	09 c0       	rjmp	.+18     	; 0xcb8 <__fixsfsi+0x9c>
     ca6:	2f ef       	ldi	r18, 0xFF	; 255
     ca8:	3f ef       	ldi	r19, 0xFF	; 255
     caa:	4f ef       	ldi	r20, 0xFF	; 255
     cac:	5f e7       	ldi	r21, 0x7F	; 127
     cae:	04 c0       	rjmp	.+8      	; 0xcb8 <__fixsfsi+0x9c>
     cb0:	20 e0       	ldi	r18, 0x00	; 0
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	40 e0       	ldi	r20, 0x00	; 0
     cb6:	50 e8       	ldi	r21, 0x80	; 128
     cb8:	b9 01       	movw	r22, r18
     cba:	ca 01       	movw	r24, r20
     cbc:	2c 96       	adiw	r28, 0x0c	; 12
     cbe:	e2 e0       	ldi	r30, 0x02	; 2
     cc0:	0c 94 b8 2e 	jmp	0x5d70	; 0x5d70 <__epilogue_restores__+0x20>

00000cc4 <__floatunsisf>:
     cc4:	a8 e0       	ldi	r26, 0x08	; 8
     cc6:	b0 e0       	ldi	r27, 0x00	; 0
     cc8:	e8 e6       	ldi	r30, 0x68	; 104
     cca:	f6 e0       	ldi	r31, 0x06	; 6
     ccc:	0c 94 94 2e 	jmp	0x5d28	; 0x5d28 <__prologue_saves__+0x10>
     cd0:	7b 01       	movw	r14, r22
     cd2:	8c 01       	movw	r16, r24
     cd4:	61 15       	cp	r22, r1
     cd6:	71 05       	cpc	r23, r1
     cd8:	81 05       	cpc	r24, r1
     cda:	91 05       	cpc	r25, r1
     cdc:	19 f4       	brne	.+6      	; 0xce4 <__floatunsisf+0x20>
     cde:	82 e0       	ldi	r24, 0x02	; 2
     ce0:	89 83       	std	Y+1, r24	; 0x01
     ce2:	60 c0       	rjmp	.+192    	; 0xda4 <__floatunsisf+0xe0>
     ce4:	83 e0       	ldi	r24, 0x03	; 3
     ce6:	89 83       	std	Y+1, r24	; 0x01
     ce8:	8e e1       	ldi	r24, 0x1E	; 30
     cea:	c8 2e       	mov	r12, r24
     cec:	d1 2c       	mov	r13, r1
     cee:	dc 82       	std	Y+4, r13	; 0x04
     cf0:	cb 82       	std	Y+3, r12	; 0x03
     cf2:	ed 82       	std	Y+5, r14	; 0x05
     cf4:	fe 82       	std	Y+6, r15	; 0x06
     cf6:	0f 83       	std	Y+7, r16	; 0x07
     cf8:	18 87       	std	Y+8, r17	; 0x08
     cfa:	c8 01       	movw	r24, r16
     cfc:	b7 01       	movw	r22, r14
     cfe:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <__clzsi2>
     d02:	fc 01       	movw	r30, r24
     d04:	31 97       	sbiw	r30, 0x01	; 1
     d06:	f7 ff       	sbrs	r31, 7
     d08:	3b c0       	rjmp	.+118    	; 0xd80 <__floatunsisf+0xbc>
     d0a:	22 27       	eor	r18, r18
     d0c:	33 27       	eor	r19, r19
     d0e:	2e 1b       	sub	r18, r30
     d10:	3f 0b       	sbc	r19, r31
     d12:	57 01       	movw	r10, r14
     d14:	68 01       	movw	r12, r16
     d16:	02 2e       	mov	r0, r18
     d18:	04 c0       	rjmp	.+8      	; 0xd22 <__floatunsisf+0x5e>
     d1a:	d6 94       	lsr	r13
     d1c:	c7 94       	ror	r12
     d1e:	b7 94       	ror	r11
     d20:	a7 94       	ror	r10
     d22:	0a 94       	dec	r0
     d24:	d2 f7       	brpl	.-12     	; 0xd1a <__floatunsisf+0x56>
     d26:	40 e0       	ldi	r20, 0x00	; 0
     d28:	50 e0       	ldi	r21, 0x00	; 0
     d2a:	60 e0       	ldi	r22, 0x00	; 0
     d2c:	70 e0       	ldi	r23, 0x00	; 0
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	a0 e0       	ldi	r26, 0x00	; 0
     d34:	b0 e0       	ldi	r27, 0x00	; 0
     d36:	04 c0       	rjmp	.+8      	; 0xd40 <__floatunsisf+0x7c>
     d38:	88 0f       	add	r24, r24
     d3a:	99 1f       	adc	r25, r25
     d3c:	aa 1f       	adc	r26, r26
     d3e:	bb 1f       	adc	r27, r27
     d40:	2a 95       	dec	r18
     d42:	d2 f7       	brpl	.-12     	; 0xd38 <__floatunsisf+0x74>
     d44:	01 97       	sbiw	r24, 0x01	; 1
     d46:	a1 09       	sbc	r26, r1
     d48:	b1 09       	sbc	r27, r1
     d4a:	8e 21       	and	r24, r14
     d4c:	9f 21       	and	r25, r15
     d4e:	a0 23       	and	r26, r16
     d50:	b1 23       	and	r27, r17
     d52:	00 97       	sbiw	r24, 0x00	; 0
     d54:	a1 05       	cpc	r26, r1
     d56:	b1 05       	cpc	r27, r1
     d58:	21 f0       	breq	.+8      	; 0xd62 <__floatunsisf+0x9e>
     d5a:	41 e0       	ldi	r20, 0x01	; 1
     d5c:	50 e0       	ldi	r21, 0x00	; 0
     d5e:	60 e0       	ldi	r22, 0x00	; 0
     d60:	70 e0       	ldi	r23, 0x00	; 0
     d62:	4a 29       	or	r20, r10
     d64:	5b 29       	or	r21, r11
     d66:	6c 29       	or	r22, r12
     d68:	7d 29       	or	r23, r13
     d6a:	4d 83       	std	Y+5, r20	; 0x05
     d6c:	5e 83       	std	Y+6, r21	; 0x06
     d6e:	6f 83       	std	Y+7, r22	; 0x07
     d70:	78 87       	std	Y+8, r23	; 0x08
     d72:	8e e1       	ldi	r24, 0x1E	; 30
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	8e 1b       	sub	r24, r30
     d78:	9f 0b       	sbc	r25, r31
     d7a:	9c 83       	std	Y+4, r25	; 0x04
     d7c:	8b 83       	std	Y+3, r24	; 0x03
     d7e:	12 c0       	rjmp	.+36     	; 0xda4 <__floatunsisf+0xe0>
     d80:	30 97       	sbiw	r30, 0x00	; 0
     d82:	81 f0       	breq	.+32     	; 0xda4 <__floatunsisf+0xe0>
     d84:	0e 2e       	mov	r0, r30
     d86:	04 c0       	rjmp	.+8      	; 0xd90 <__floatunsisf+0xcc>
     d88:	ee 0c       	add	r14, r14
     d8a:	ff 1c       	adc	r15, r15
     d8c:	00 1f       	adc	r16, r16
     d8e:	11 1f       	adc	r17, r17
     d90:	0a 94       	dec	r0
     d92:	d2 f7       	brpl	.-12     	; 0xd88 <__floatunsisf+0xc4>
     d94:	ed 82       	std	Y+5, r14	; 0x05
     d96:	fe 82       	std	Y+6, r15	; 0x06
     d98:	0f 83       	std	Y+7, r16	; 0x07
     d9a:	18 87       	std	Y+8, r17	; 0x08
     d9c:	ce 1a       	sub	r12, r30
     d9e:	df 0a       	sbc	r13, r31
     da0:	dc 82       	std	Y+4, r13	; 0x04
     da2:	cb 82       	std	Y+3, r12	; 0x03
     da4:	1a 82       	std	Y+2, r1	; 0x02
     da6:	ce 01       	movw	r24, r28
     da8:	01 96       	adiw	r24, 0x01	; 1
     daa:	0e 94 a9 07 	call	0xf52	; 0xf52 <__pack_f>
     dae:	28 96       	adiw	r28, 0x08	; 8
     db0:	ea e0       	ldi	r30, 0x0A	; 10
     db2:	0c 94 b0 2e 	jmp	0x5d60	; 0x5d60 <__epilogue_restores__+0x10>

00000db6 <__lshrdi3>:
     db6:	ef 92       	push	r14
     db8:	ff 92       	push	r15
     dba:	0f 93       	push	r16
     dbc:	df 93       	push	r29
     dbe:	cf 93       	push	r28
     dc0:	cd b7       	in	r28, 0x3d	; 61
     dc2:	de b7       	in	r29, 0x3e	; 62
     dc4:	60 97       	sbiw	r28, 0x10	; 16
     dc6:	0f b6       	in	r0, 0x3f	; 63
     dc8:	f8 94       	cli
     dca:	de bf       	out	0x3e, r29	; 62
     dcc:	0f be       	out	0x3f, r0	; 63
     dce:	cd bf       	out	0x3d, r28	; 61
     dd0:	a8 2f       	mov	r26, r24
     dd2:	00 23       	and	r16, r16
     dd4:	09 f4       	brne	.+2      	; 0xdd8 <__lshrdi3+0x22>
     dd6:	61 c0       	rjmp	.+194    	; 0xe9a <__lshrdi3+0xe4>
     dd8:	7e 01       	movw	r14, r28
     dda:	08 94       	sec
     ddc:	e1 1c       	adc	r14, r1
     dde:	f1 1c       	adc	r15, r1
     de0:	88 e0       	ldi	r24, 0x08	; 8
     de2:	f7 01       	movw	r30, r14
     de4:	11 92       	st	Z+, r1
     de6:	8a 95       	dec	r24
     de8:	e9 f7       	brne	.-6      	; 0xde4 <__lshrdi3+0x2e>
     dea:	29 83       	std	Y+1, r18	; 0x01
     dec:	3a 83       	std	Y+2, r19	; 0x02
     dee:	4b 83       	std	Y+3, r20	; 0x03
     df0:	5c 83       	std	Y+4, r21	; 0x04
     df2:	6d 83       	std	Y+5, r22	; 0x05
     df4:	7e 83       	std	Y+6, r23	; 0x06
     df6:	af 83       	std	Y+7, r26	; 0x07
     df8:	98 87       	std	Y+8, r25	; 0x08
     dfa:	80 e2       	ldi	r24, 0x20	; 32
     dfc:	80 1b       	sub	r24, r16
     dfe:	e8 2f       	mov	r30, r24
     e00:	ff 27       	eor	r31, r31
     e02:	e7 fd       	sbrc	r30, 7
     e04:	f0 95       	com	r31
     e06:	4d 81       	ldd	r20, Y+5	; 0x05
     e08:	5e 81       	ldd	r21, Y+6	; 0x06
     e0a:	6f 81       	ldd	r22, Y+7	; 0x07
     e0c:	78 85       	ldd	r23, Y+8	; 0x08
     e0e:	18 16       	cp	r1, r24
     e10:	84 f0       	brlt	.+32     	; 0xe32 <__lshrdi3+0x7c>
     e12:	1d 86       	std	Y+13, r1	; 0x0d
     e14:	1e 86       	std	Y+14, r1	; 0x0e
     e16:	1f 86       	std	Y+15, r1	; 0x0f
     e18:	18 8a       	std	Y+16, r1	; 0x10
     e1a:	88 27       	eor	r24, r24
     e1c:	99 27       	eor	r25, r25
     e1e:	8e 1b       	sub	r24, r30
     e20:	9f 0b       	sbc	r25, r31
     e22:	04 c0       	rjmp	.+8      	; 0xe2c <__lshrdi3+0x76>
     e24:	76 95       	lsr	r23
     e26:	67 95       	ror	r22
     e28:	57 95       	ror	r21
     e2a:	47 95       	ror	r20
     e2c:	8a 95       	dec	r24
     e2e:	d2 f7       	brpl	.-12     	; 0xe24 <__lshrdi3+0x6e>
     e30:	28 c0       	rjmp	.+80     	; 0xe82 <__lshrdi3+0xcc>
     e32:	20 2f       	mov	r18, r16
     e34:	33 27       	eor	r19, r19
     e36:	27 fd       	sbrc	r18, 7
     e38:	30 95       	com	r19
     e3a:	db 01       	movw	r26, r22
     e3c:	ca 01       	movw	r24, r20
     e3e:	02 2e       	mov	r0, r18
     e40:	04 c0       	rjmp	.+8      	; 0xe4a <__lshrdi3+0x94>
     e42:	b6 95       	lsr	r27
     e44:	a7 95       	ror	r26
     e46:	97 95       	ror	r25
     e48:	87 95       	ror	r24
     e4a:	0a 94       	dec	r0
     e4c:	d2 f7       	brpl	.-12     	; 0xe42 <__lshrdi3+0x8c>
     e4e:	8d 87       	std	Y+13, r24	; 0x0d
     e50:	9e 87       	std	Y+14, r25	; 0x0e
     e52:	af 87       	std	Y+15, r26	; 0x0f
     e54:	b8 8b       	std	Y+16, r27	; 0x10
     e56:	04 c0       	rjmp	.+8      	; 0xe60 <__lshrdi3+0xaa>
     e58:	44 0f       	add	r20, r20
     e5a:	55 1f       	adc	r21, r21
     e5c:	66 1f       	adc	r22, r22
     e5e:	77 1f       	adc	r23, r23
     e60:	ea 95       	dec	r30
     e62:	d2 f7       	brpl	.-12     	; 0xe58 <__lshrdi3+0xa2>
     e64:	89 81       	ldd	r24, Y+1	; 0x01
     e66:	9a 81       	ldd	r25, Y+2	; 0x02
     e68:	ab 81       	ldd	r26, Y+3	; 0x03
     e6a:	bc 81       	ldd	r27, Y+4	; 0x04
     e6c:	04 c0       	rjmp	.+8      	; 0xe76 <__lshrdi3+0xc0>
     e6e:	b6 95       	lsr	r27
     e70:	a7 95       	ror	r26
     e72:	97 95       	ror	r25
     e74:	87 95       	ror	r24
     e76:	2a 95       	dec	r18
     e78:	d2 f7       	brpl	.-12     	; 0xe6e <__lshrdi3+0xb8>
     e7a:	48 2b       	or	r20, r24
     e7c:	59 2b       	or	r21, r25
     e7e:	6a 2b       	or	r22, r26
     e80:	7b 2b       	or	r23, r27
     e82:	49 87       	std	Y+9, r20	; 0x09
     e84:	5a 87       	std	Y+10, r21	; 0x0a
     e86:	6b 87       	std	Y+11, r22	; 0x0b
     e88:	7c 87       	std	Y+12, r23	; 0x0c
     e8a:	29 85       	ldd	r18, Y+9	; 0x09
     e8c:	3a 85       	ldd	r19, Y+10	; 0x0a
     e8e:	4b 85       	ldd	r20, Y+11	; 0x0b
     e90:	5c 85       	ldd	r21, Y+12	; 0x0c
     e92:	6d 85       	ldd	r22, Y+13	; 0x0d
     e94:	7e 85       	ldd	r23, Y+14	; 0x0e
     e96:	af 85       	ldd	r26, Y+15	; 0x0f
     e98:	98 89       	ldd	r25, Y+16	; 0x10
     e9a:	8a 2f       	mov	r24, r26
     e9c:	60 96       	adiw	r28, 0x10	; 16
     e9e:	0f b6       	in	r0, 0x3f	; 63
     ea0:	f8 94       	cli
     ea2:	de bf       	out	0x3e, r29	; 62
     ea4:	0f be       	out	0x3f, r0	; 63
     ea6:	cd bf       	out	0x3d, r28	; 61
     ea8:	cf 91       	pop	r28
     eaa:	df 91       	pop	r29
     eac:	0f 91       	pop	r16
     eae:	ff 90       	pop	r15
     eb0:	ef 90       	pop	r14
     eb2:	08 95       	ret

00000eb4 <__clzsi2>:
     eb4:	ef 92       	push	r14
     eb6:	ff 92       	push	r15
     eb8:	0f 93       	push	r16
     eba:	1f 93       	push	r17
     ebc:	7b 01       	movw	r14, r22
     ebe:	8c 01       	movw	r16, r24
     ec0:	80 e0       	ldi	r24, 0x00	; 0
     ec2:	e8 16       	cp	r14, r24
     ec4:	80 e0       	ldi	r24, 0x00	; 0
     ec6:	f8 06       	cpc	r15, r24
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	08 07       	cpc	r16, r24
     ecc:	80 e0       	ldi	r24, 0x00	; 0
     ece:	18 07       	cpc	r17, r24
     ed0:	88 f4       	brcc	.+34     	; 0xef4 <__clzsi2+0x40>
     ed2:	8f ef       	ldi	r24, 0xFF	; 255
     ed4:	e8 16       	cp	r14, r24
     ed6:	f1 04       	cpc	r15, r1
     ed8:	01 05       	cpc	r16, r1
     eda:	11 05       	cpc	r17, r1
     edc:	31 f0       	breq	.+12     	; 0xeea <__clzsi2+0x36>
     ede:	28 f0       	brcs	.+10     	; 0xeea <__clzsi2+0x36>
     ee0:	88 e0       	ldi	r24, 0x08	; 8
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	a0 e0       	ldi	r26, 0x00	; 0
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	17 c0       	rjmp	.+46     	; 0xf18 <__clzsi2+0x64>
     eea:	80 e0       	ldi	r24, 0x00	; 0
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	a0 e0       	ldi	r26, 0x00	; 0
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	12 c0       	rjmp	.+36     	; 0xf18 <__clzsi2+0x64>
     ef4:	80 e0       	ldi	r24, 0x00	; 0
     ef6:	e8 16       	cp	r14, r24
     ef8:	80 e0       	ldi	r24, 0x00	; 0
     efa:	f8 06       	cpc	r15, r24
     efc:	80 e0       	ldi	r24, 0x00	; 0
     efe:	08 07       	cpc	r16, r24
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	18 07       	cpc	r17, r24
     f04:	28 f0       	brcs	.+10     	; 0xf10 <__clzsi2+0x5c>
     f06:	88 e1       	ldi	r24, 0x18	; 24
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	a0 e0       	ldi	r26, 0x00	; 0
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	04 c0       	rjmp	.+8      	; 0xf18 <__clzsi2+0x64>
     f10:	80 e1       	ldi	r24, 0x10	; 16
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	a0 e0       	ldi	r26, 0x00	; 0
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	20 e2       	ldi	r18, 0x20	; 32
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	40 e0       	ldi	r20, 0x00	; 0
     f1e:	50 e0       	ldi	r21, 0x00	; 0
     f20:	28 1b       	sub	r18, r24
     f22:	39 0b       	sbc	r19, r25
     f24:	4a 0b       	sbc	r20, r26
     f26:	5b 0b       	sbc	r21, r27
     f28:	04 c0       	rjmp	.+8      	; 0xf32 <__clzsi2+0x7e>
     f2a:	16 95       	lsr	r17
     f2c:	07 95       	ror	r16
     f2e:	f7 94       	ror	r15
     f30:	e7 94       	ror	r14
     f32:	8a 95       	dec	r24
     f34:	d2 f7       	brpl	.-12     	; 0xf2a <__clzsi2+0x76>
     f36:	f7 01       	movw	r30, r14
     f38:	e8 59       	subi	r30, 0x98	; 152
     f3a:	ff 4f       	sbci	r31, 0xFF	; 255
     f3c:	80 81       	ld	r24, Z
     f3e:	28 1b       	sub	r18, r24
     f40:	31 09       	sbc	r19, r1
     f42:	41 09       	sbc	r20, r1
     f44:	51 09       	sbc	r21, r1
     f46:	c9 01       	movw	r24, r18
     f48:	1f 91       	pop	r17
     f4a:	0f 91       	pop	r16
     f4c:	ff 90       	pop	r15
     f4e:	ef 90       	pop	r14
     f50:	08 95       	ret

00000f52 <__pack_f>:
     f52:	df 92       	push	r13
     f54:	ef 92       	push	r14
     f56:	ff 92       	push	r15
     f58:	0f 93       	push	r16
     f5a:	1f 93       	push	r17
     f5c:	fc 01       	movw	r30, r24
     f5e:	e4 80       	ldd	r14, Z+4	; 0x04
     f60:	f5 80       	ldd	r15, Z+5	; 0x05
     f62:	06 81       	ldd	r16, Z+6	; 0x06
     f64:	17 81       	ldd	r17, Z+7	; 0x07
     f66:	d1 80       	ldd	r13, Z+1	; 0x01
     f68:	80 81       	ld	r24, Z
     f6a:	82 30       	cpi	r24, 0x02	; 2
     f6c:	48 f4       	brcc	.+18     	; 0xf80 <__pack_f+0x2e>
     f6e:	80 e0       	ldi	r24, 0x00	; 0
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	a0 e1       	ldi	r26, 0x10	; 16
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	e8 2a       	or	r14, r24
     f78:	f9 2a       	or	r15, r25
     f7a:	0a 2b       	or	r16, r26
     f7c:	1b 2b       	or	r17, r27
     f7e:	a5 c0       	rjmp	.+330    	; 0x10ca <__pack_f+0x178>
     f80:	84 30       	cpi	r24, 0x04	; 4
     f82:	09 f4       	brne	.+2      	; 0xf86 <__pack_f+0x34>
     f84:	9f c0       	rjmp	.+318    	; 0x10c4 <__pack_f+0x172>
     f86:	82 30       	cpi	r24, 0x02	; 2
     f88:	21 f4       	brne	.+8      	; 0xf92 <__pack_f+0x40>
     f8a:	ee 24       	eor	r14, r14
     f8c:	ff 24       	eor	r15, r15
     f8e:	87 01       	movw	r16, r14
     f90:	05 c0       	rjmp	.+10     	; 0xf9c <__pack_f+0x4a>
     f92:	e1 14       	cp	r14, r1
     f94:	f1 04       	cpc	r15, r1
     f96:	01 05       	cpc	r16, r1
     f98:	11 05       	cpc	r17, r1
     f9a:	19 f4       	brne	.+6      	; 0xfa2 <__pack_f+0x50>
     f9c:	e0 e0       	ldi	r30, 0x00	; 0
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	96 c0       	rjmp	.+300    	; 0x10ce <__pack_f+0x17c>
     fa2:	62 81       	ldd	r22, Z+2	; 0x02
     fa4:	73 81       	ldd	r23, Z+3	; 0x03
     fa6:	9f ef       	ldi	r25, 0xFF	; 255
     fa8:	62 38       	cpi	r22, 0x82	; 130
     faa:	79 07       	cpc	r23, r25
     fac:	0c f0       	brlt	.+2      	; 0xfb0 <__pack_f+0x5e>
     fae:	5b c0       	rjmp	.+182    	; 0x1066 <__pack_f+0x114>
     fb0:	22 e8       	ldi	r18, 0x82	; 130
     fb2:	3f ef       	ldi	r19, 0xFF	; 255
     fb4:	26 1b       	sub	r18, r22
     fb6:	37 0b       	sbc	r19, r23
     fb8:	2a 31       	cpi	r18, 0x1A	; 26
     fba:	31 05       	cpc	r19, r1
     fbc:	2c f0       	brlt	.+10     	; 0xfc8 <__pack_f+0x76>
     fbe:	20 e0       	ldi	r18, 0x00	; 0
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	40 e0       	ldi	r20, 0x00	; 0
     fc4:	50 e0       	ldi	r21, 0x00	; 0
     fc6:	2a c0       	rjmp	.+84     	; 0x101c <__pack_f+0xca>
     fc8:	b8 01       	movw	r22, r16
     fca:	a7 01       	movw	r20, r14
     fcc:	02 2e       	mov	r0, r18
     fce:	04 c0       	rjmp	.+8      	; 0xfd8 <__pack_f+0x86>
     fd0:	76 95       	lsr	r23
     fd2:	67 95       	ror	r22
     fd4:	57 95       	ror	r21
     fd6:	47 95       	ror	r20
     fd8:	0a 94       	dec	r0
     fda:	d2 f7       	brpl	.-12     	; 0xfd0 <__pack_f+0x7e>
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	a0 e0       	ldi	r26, 0x00	; 0
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	04 c0       	rjmp	.+8      	; 0xfee <__pack_f+0x9c>
     fe6:	88 0f       	add	r24, r24
     fe8:	99 1f       	adc	r25, r25
     fea:	aa 1f       	adc	r26, r26
     fec:	bb 1f       	adc	r27, r27
     fee:	2a 95       	dec	r18
     ff0:	d2 f7       	brpl	.-12     	; 0xfe6 <__pack_f+0x94>
     ff2:	01 97       	sbiw	r24, 0x01	; 1
     ff4:	a1 09       	sbc	r26, r1
     ff6:	b1 09       	sbc	r27, r1
     ff8:	8e 21       	and	r24, r14
     ffa:	9f 21       	and	r25, r15
     ffc:	a0 23       	and	r26, r16
     ffe:	b1 23       	and	r27, r17
    1000:	00 97       	sbiw	r24, 0x00	; 0
    1002:	a1 05       	cpc	r26, r1
    1004:	b1 05       	cpc	r27, r1
    1006:	21 f0       	breq	.+8      	; 0x1010 <__pack_f+0xbe>
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	a0 e0       	ldi	r26, 0x00	; 0
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	9a 01       	movw	r18, r20
    1012:	ab 01       	movw	r20, r22
    1014:	28 2b       	or	r18, r24
    1016:	39 2b       	or	r19, r25
    1018:	4a 2b       	or	r20, r26
    101a:	5b 2b       	or	r21, r27
    101c:	da 01       	movw	r26, r20
    101e:	c9 01       	movw	r24, r18
    1020:	8f 77       	andi	r24, 0x7F	; 127
    1022:	90 70       	andi	r25, 0x00	; 0
    1024:	a0 70       	andi	r26, 0x00	; 0
    1026:	b0 70       	andi	r27, 0x00	; 0
    1028:	80 34       	cpi	r24, 0x40	; 64
    102a:	91 05       	cpc	r25, r1
    102c:	a1 05       	cpc	r26, r1
    102e:	b1 05       	cpc	r27, r1
    1030:	39 f4       	brne	.+14     	; 0x1040 <__pack_f+0xee>
    1032:	27 ff       	sbrs	r18, 7
    1034:	09 c0       	rjmp	.+18     	; 0x1048 <__pack_f+0xf6>
    1036:	20 5c       	subi	r18, 0xC0	; 192
    1038:	3f 4f       	sbci	r19, 0xFF	; 255
    103a:	4f 4f       	sbci	r20, 0xFF	; 255
    103c:	5f 4f       	sbci	r21, 0xFF	; 255
    103e:	04 c0       	rjmp	.+8      	; 0x1048 <__pack_f+0xf6>
    1040:	21 5c       	subi	r18, 0xC1	; 193
    1042:	3f 4f       	sbci	r19, 0xFF	; 255
    1044:	4f 4f       	sbci	r20, 0xFF	; 255
    1046:	5f 4f       	sbci	r21, 0xFF	; 255
    1048:	e0 e0       	ldi	r30, 0x00	; 0
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	20 30       	cpi	r18, 0x00	; 0
    104e:	a0 e0       	ldi	r26, 0x00	; 0
    1050:	3a 07       	cpc	r19, r26
    1052:	a0 e0       	ldi	r26, 0x00	; 0
    1054:	4a 07       	cpc	r20, r26
    1056:	a0 e4       	ldi	r26, 0x40	; 64
    1058:	5a 07       	cpc	r21, r26
    105a:	10 f0       	brcs	.+4      	; 0x1060 <__pack_f+0x10e>
    105c:	e1 e0       	ldi	r30, 0x01	; 1
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	79 01       	movw	r14, r18
    1062:	8a 01       	movw	r16, r20
    1064:	27 c0       	rjmp	.+78     	; 0x10b4 <__pack_f+0x162>
    1066:	60 38       	cpi	r22, 0x80	; 128
    1068:	71 05       	cpc	r23, r1
    106a:	64 f5       	brge	.+88     	; 0x10c4 <__pack_f+0x172>
    106c:	fb 01       	movw	r30, r22
    106e:	e1 58       	subi	r30, 0x81	; 129
    1070:	ff 4f       	sbci	r31, 0xFF	; 255
    1072:	d8 01       	movw	r26, r16
    1074:	c7 01       	movw	r24, r14
    1076:	8f 77       	andi	r24, 0x7F	; 127
    1078:	90 70       	andi	r25, 0x00	; 0
    107a:	a0 70       	andi	r26, 0x00	; 0
    107c:	b0 70       	andi	r27, 0x00	; 0
    107e:	80 34       	cpi	r24, 0x40	; 64
    1080:	91 05       	cpc	r25, r1
    1082:	a1 05       	cpc	r26, r1
    1084:	b1 05       	cpc	r27, r1
    1086:	39 f4       	brne	.+14     	; 0x1096 <__pack_f+0x144>
    1088:	e7 fe       	sbrs	r14, 7
    108a:	0d c0       	rjmp	.+26     	; 0x10a6 <__pack_f+0x154>
    108c:	80 e4       	ldi	r24, 0x40	; 64
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	a0 e0       	ldi	r26, 0x00	; 0
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	04 c0       	rjmp	.+8      	; 0x109e <__pack_f+0x14c>
    1096:	8f e3       	ldi	r24, 0x3F	; 63
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	a0 e0       	ldi	r26, 0x00	; 0
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	e8 0e       	add	r14, r24
    10a0:	f9 1e       	adc	r15, r25
    10a2:	0a 1f       	adc	r16, r26
    10a4:	1b 1f       	adc	r17, r27
    10a6:	17 ff       	sbrs	r17, 7
    10a8:	05 c0       	rjmp	.+10     	; 0x10b4 <__pack_f+0x162>
    10aa:	16 95       	lsr	r17
    10ac:	07 95       	ror	r16
    10ae:	f7 94       	ror	r15
    10b0:	e7 94       	ror	r14
    10b2:	31 96       	adiw	r30, 0x01	; 1
    10b4:	87 e0       	ldi	r24, 0x07	; 7
    10b6:	16 95       	lsr	r17
    10b8:	07 95       	ror	r16
    10ba:	f7 94       	ror	r15
    10bc:	e7 94       	ror	r14
    10be:	8a 95       	dec	r24
    10c0:	d1 f7       	brne	.-12     	; 0x10b6 <__pack_f+0x164>
    10c2:	05 c0       	rjmp	.+10     	; 0x10ce <__pack_f+0x17c>
    10c4:	ee 24       	eor	r14, r14
    10c6:	ff 24       	eor	r15, r15
    10c8:	87 01       	movw	r16, r14
    10ca:	ef ef       	ldi	r30, 0xFF	; 255
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	6e 2f       	mov	r22, r30
    10d0:	67 95       	ror	r22
    10d2:	66 27       	eor	r22, r22
    10d4:	67 95       	ror	r22
    10d6:	90 2f       	mov	r25, r16
    10d8:	9f 77       	andi	r25, 0x7F	; 127
    10da:	d7 94       	ror	r13
    10dc:	dd 24       	eor	r13, r13
    10de:	d7 94       	ror	r13
    10e0:	8e 2f       	mov	r24, r30
    10e2:	86 95       	lsr	r24
    10e4:	49 2f       	mov	r20, r25
    10e6:	46 2b       	or	r20, r22
    10e8:	58 2f       	mov	r21, r24
    10ea:	5d 29       	or	r21, r13
    10ec:	b7 01       	movw	r22, r14
    10ee:	ca 01       	movw	r24, r20
    10f0:	1f 91       	pop	r17
    10f2:	0f 91       	pop	r16
    10f4:	ff 90       	pop	r15
    10f6:	ef 90       	pop	r14
    10f8:	df 90       	pop	r13
    10fa:	08 95       	ret

000010fc <__unpack_f>:
    10fc:	fc 01       	movw	r30, r24
    10fe:	db 01       	movw	r26, r22
    1100:	40 81       	ld	r20, Z
    1102:	51 81       	ldd	r21, Z+1	; 0x01
    1104:	22 81       	ldd	r18, Z+2	; 0x02
    1106:	62 2f       	mov	r22, r18
    1108:	6f 77       	andi	r22, 0x7F	; 127
    110a:	70 e0       	ldi	r23, 0x00	; 0
    110c:	22 1f       	adc	r18, r18
    110e:	22 27       	eor	r18, r18
    1110:	22 1f       	adc	r18, r18
    1112:	93 81       	ldd	r25, Z+3	; 0x03
    1114:	89 2f       	mov	r24, r25
    1116:	88 0f       	add	r24, r24
    1118:	82 2b       	or	r24, r18
    111a:	28 2f       	mov	r18, r24
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	99 1f       	adc	r25, r25
    1120:	99 27       	eor	r25, r25
    1122:	99 1f       	adc	r25, r25
    1124:	11 96       	adiw	r26, 0x01	; 1
    1126:	9c 93       	st	X, r25
    1128:	11 97       	sbiw	r26, 0x01	; 1
    112a:	21 15       	cp	r18, r1
    112c:	31 05       	cpc	r19, r1
    112e:	a9 f5       	brne	.+106    	; 0x119a <__unpack_f+0x9e>
    1130:	41 15       	cp	r20, r1
    1132:	51 05       	cpc	r21, r1
    1134:	61 05       	cpc	r22, r1
    1136:	71 05       	cpc	r23, r1
    1138:	11 f4       	brne	.+4      	; 0x113e <__unpack_f+0x42>
    113a:	82 e0       	ldi	r24, 0x02	; 2
    113c:	37 c0       	rjmp	.+110    	; 0x11ac <__unpack_f+0xb0>
    113e:	82 e8       	ldi	r24, 0x82	; 130
    1140:	9f ef       	ldi	r25, 0xFF	; 255
    1142:	13 96       	adiw	r26, 0x03	; 3
    1144:	9c 93       	st	X, r25
    1146:	8e 93       	st	-X, r24
    1148:	12 97       	sbiw	r26, 0x02	; 2
    114a:	9a 01       	movw	r18, r20
    114c:	ab 01       	movw	r20, r22
    114e:	67 e0       	ldi	r22, 0x07	; 7
    1150:	22 0f       	add	r18, r18
    1152:	33 1f       	adc	r19, r19
    1154:	44 1f       	adc	r20, r20
    1156:	55 1f       	adc	r21, r21
    1158:	6a 95       	dec	r22
    115a:	d1 f7       	brne	.-12     	; 0x1150 <__unpack_f+0x54>
    115c:	83 e0       	ldi	r24, 0x03	; 3
    115e:	8c 93       	st	X, r24
    1160:	0d c0       	rjmp	.+26     	; 0x117c <__unpack_f+0x80>
    1162:	22 0f       	add	r18, r18
    1164:	33 1f       	adc	r19, r19
    1166:	44 1f       	adc	r20, r20
    1168:	55 1f       	adc	r21, r21
    116a:	12 96       	adiw	r26, 0x02	; 2
    116c:	8d 91       	ld	r24, X+
    116e:	9c 91       	ld	r25, X
    1170:	13 97       	sbiw	r26, 0x03	; 3
    1172:	01 97       	sbiw	r24, 0x01	; 1
    1174:	13 96       	adiw	r26, 0x03	; 3
    1176:	9c 93       	st	X, r25
    1178:	8e 93       	st	-X, r24
    117a:	12 97       	sbiw	r26, 0x02	; 2
    117c:	20 30       	cpi	r18, 0x00	; 0
    117e:	80 e0       	ldi	r24, 0x00	; 0
    1180:	38 07       	cpc	r19, r24
    1182:	80 e0       	ldi	r24, 0x00	; 0
    1184:	48 07       	cpc	r20, r24
    1186:	80 e4       	ldi	r24, 0x40	; 64
    1188:	58 07       	cpc	r21, r24
    118a:	58 f3       	brcs	.-42     	; 0x1162 <__unpack_f+0x66>
    118c:	14 96       	adiw	r26, 0x04	; 4
    118e:	2d 93       	st	X+, r18
    1190:	3d 93       	st	X+, r19
    1192:	4d 93       	st	X+, r20
    1194:	5c 93       	st	X, r21
    1196:	17 97       	sbiw	r26, 0x07	; 7
    1198:	08 95       	ret
    119a:	2f 3f       	cpi	r18, 0xFF	; 255
    119c:	31 05       	cpc	r19, r1
    119e:	79 f4       	brne	.+30     	; 0x11be <__unpack_f+0xc2>
    11a0:	41 15       	cp	r20, r1
    11a2:	51 05       	cpc	r21, r1
    11a4:	61 05       	cpc	r22, r1
    11a6:	71 05       	cpc	r23, r1
    11a8:	19 f4       	brne	.+6      	; 0x11b0 <__unpack_f+0xb4>
    11aa:	84 e0       	ldi	r24, 0x04	; 4
    11ac:	8c 93       	st	X, r24
    11ae:	08 95       	ret
    11b0:	64 ff       	sbrs	r22, 4
    11b2:	03 c0       	rjmp	.+6      	; 0x11ba <__unpack_f+0xbe>
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	8c 93       	st	X, r24
    11b8:	12 c0       	rjmp	.+36     	; 0x11de <__unpack_f+0xe2>
    11ba:	1c 92       	st	X, r1
    11bc:	10 c0       	rjmp	.+32     	; 0x11de <__unpack_f+0xe2>
    11be:	2f 57       	subi	r18, 0x7F	; 127
    11c0:	30 40       	sbci	r19, 0x00	; 0
    11c2:	13 96       	adiw	r26, 0x03	; 3
    11c4:	3c 93       	st	X, r19
    11c6:	2e 93       	st	-X, r18
    11c8:	12 97       	sbiw	r26, 0x02	; 2
    11ca:	83 e0       	ldi	r24, 0x03	; 3
    11cc:	8c 93       	st	X, r24
    11ce:	87 e0       	ldi	r24, 0x07	; 7
    11d0:	44 0f       	add	r20, r20
    11d2:	55 1f       	adc	r21, r21
    11d4:	66 1f       	adc	r22, r22
    11d6:	77 1f       	adc	r23, r23
    11d8:	8a 95       	dec	r24
    11da:	d1 f7       	brne	.-12     	; 0x11d0 <__unpack_f+0xd4>
    11dc:	70 64       	ori	r23, 0x40	; 64
    11de:	14 96       	adiw	r26, 0x04	; 4
    11e0:	4d 93       	st	X+, r20
    11e2:	5d 93       	st	X+, r21
    11e4:	6d 93       	st	X+, r22
    11e6:	7c 93       	st	X, r23
    11e8:	17 97       	sbiw	r26, 0x07	; 7
    11ea:	08 95       	ret

000011ec <__fpcmp_parts_f>:
    11ec:	1f 93       	push	r17
    11ee:	dc 01       	movw	r26, r24
    11f0:	fb 01       	movw	r30, r22
    11f2:	9c 91       	ld	r25, X
    11f4:	92 30       	cpi	r25, 0x02	; 2
    11f6:	08 f4       	brcc	.+2      	; 0x11fa <__fpcmp_parts_f+0xe>
    11f8:	47 c0       	rjmp	.+142    	; 0x1288 <__fpcmp_parts_f+0x9c>
    11fa:	80 81       	ld	r24, Z
    11fc:	82 30       	cpi	r24, 0x02	; 2
    11fe:	08 f4       	brcc	.+2      	; 0x1202 <__fpcmp_parts_f+0x16>
    1200:	43 c0       	rjmp	.+134    	; 0x1288 <__fpcmp_parts_f+0x9c>
    1202:	94 30       	cpi	r25, 0x04	; 4
    1204:	51 f4       	brne	.+20     	; 0x121a <__fpcmp_parts_f+0x2e>
    1206:	11 96       	adiw	r26, 0x01	; 1
    1208:	1c 91       	ld	r17, X
    120a:	84 30       	cpi	r24, 0x04	; 4
    120c:	99 f5       	brne	.+102    	; 0x1274 <__fpcmp_parts_f+0x88>
    120e:	81 81       	ldd	r24, Z+1	; 0x01
    1210:	68 2f       	mov	r22, r24
    1212:	70 e0       	ldi	r23, 0x00	; 0
    1214:	61 1b       	sub	r22, r17
    1216:	71 09       	sbc	r23, r1
    1218:	3f c0       	rjmp	.+126    	; 0x1298 <__fpcmp_parts_f+0xac>
    121a:	84 30       	cpi	r24, 0x04	; 4
    121c:	21 f0       	breq	.+8      	; 0x1226 <__fpcmp_parts_f+0x3a>
    121e:	92 30       	cpi	r25, 0x02	; 2
    1220:	31 f4       	brne	.+12     	; 0x122e <__fpcmp_parts_f+0x42>
    1222:	82 30       	cpi	r24, 0x02	; 2
    1224:	b9 f1       	breq	.+110    	; 0x1294 <__fpcmp_parts_f+0xa8>
    1226:	81 81       	ldd	r24, Z+1	; 0x01
    1228:	88 23       	and	r24, r24
    122a:	89 f1       	breq	.+98     	; 0x128e <__fpcmp_parts_f+0xa2>
    122c:	2d c0       	rjmp	.+90     	; 0x1288 <__fpcmp_parts_f+0x9c>
    122e:	11 96       	adiw	r26, 0x01	; 1
    1230:	1c 91       	ld	r17, X
    1232:	11 97       	sbiw	r26, 0x01	; 1
    1234:	82 30       	cpi	r24, 0x02	; 2
    1236:	f1 f0       	breq	.+60     	; 0x1274 <__fpcmp_parts_f+0x88>
    1238:	81 81       	ldd	r24, Z+1	; 0x01
    123a:	18 17       	cp	r17, r24
    123c:	d9 f4       	brne	.+54     	; 0x1274 <__fpcmp_parts_f+0x88>
    123e:	12 96       	adiw	r26, 0x02	; 2
    1240:	2d 91       	ld	r18, X+
    1242:	3c 91       	ld	r19, X
    1244:	13 97       	sbiw	r26, 0x03	; 3
    1246:	82 81       	ldd	r24, Z+2	; 0x02
    1248:	93 81       	ldd	r25, Z+3	; 0x03
    124a:	82 17       	cp	r24, r18
    124c:	93 07       	cpc	r25, r19
    124e:	94 f0       	brlt	.+36     	; 0x1274 <__fpcmp_parts_f+0x88>
    1250:	28 17       	cp	r18, r24
    1252:	39 07       	cpc	r19, r25
    1254:	bc f0       	brlt	.+46     	; 0x1284 <__fpcmp_parts_f+0x98>
    1256:	14 96       	adiw	r26, 0x04	; 4
    1258:	8d 91       	ld	r24, X+
    125a:	9d 91       	ld	r25, X+
    125c:	0d 90       	ld	r0, X+
    125e:	bc 91       	ld	r27, X
    1260:	a0 2d       	mov	r26, r0
    1262:	24 81       	ldd	r18, Z+4	; 0x04
    1264:	35 81       	ldd	r19, Z+5	; 0x05
    1266:	46 81       	ldd	r20, Z+6	; 0x06
    1268:	57 81       	ldd	r21, Z+7	; 0x07
    126a:	28 17       	cp	r18, r24
    126c:	39 07       	cpc	r19, r25
    126e:	4a 07       	cpc	r20, r26
    1270:	5b 07       	cpc	r21, r27
    1272:	18 f4       	brcc	.+6      	; 0x127a <__fpcmp_parts_f+0x8e>
    1274:	11 23       	and	r17, r17
    1276:	41 f0       	breq	.+16     	; 0x1288 <__fpcmp_parts_f+0x9c>
    1278:	0a c0       	rjmp	.+20     	; 0x128e <__fpcmp_parts_f+0xa2>
    127a:	82 17       	cp	r24, r18
    127c:	93 07       	cpc	r25, r19
    127e:	a4 07       	cpc	r26, r20
    1280:	b5 07       	cpc	r27, r21
    1282:	40 f4       	brcc	.+16     	; 0x1294 <__fpcmp_parts_f+0xa8>
    1284:	11 23       	and	r17, r17
    1286:	19 f0       	breq	.+6      	; 0x128e <__fpcmp_parts_f+0xa2>
    1288:	61 e0       	ldi	r22, 0x01	; 1
    128a:	70 e0       	ldi	r23, 0x00	; 0
    128c:	05 c0       	rjmp	.+10     	; 0x1298 <__fpcmp_parts_f+0xac>
    128e:	6f ef       	ldi	r22, 0xFF	; 255
    1290:	7f ef       	ldi	r23, 0xFF	; 255
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <__fpcmp_parts_f+0xac>
    1294:	60 e0       	ldi	r22, 0x00	; 0
    1296:	70 e0       	ldi	r23, 0x00	; 0
    1298:	cb 01       	movw	r24, r22
    129a:	1f 91       	pop	r17
    129c:	08 95       	ret

0000129e <DIO_VidSetPinDirection>:
#include "../Serivecs_driver/BIT_MATH.h"

/* Lower Layer Interface Files*/
#include"DIO_private.h"

void DIO_VidSetPinDirection (u8 Copy_U8Port , u8 Copy_U8Pin , u8 Copy_U8Dir ) {
    129e:	df 93       	push	r29
    12a0:	cf 93       	push	r28
    12a2:	cd b7       	in	r28, 0x3d	; 61
    12a4:	de b7       	in	r29, 0x3e	; 62
    12a6:	27 97       	sbiw	r28, 0x07	; 7
    12a8:	0f b6       	in	r0, 0x3f	; 63
    12aa:	f8 94       	cli
    12ac:	de bf       	out	0x3e, r29	; 62
    12ae:	0f be       	out	0x3f, r0	; 63
    12b0:	cd bf       	out	0x3d, r28	; 61
    12b2:	89 83       	std	Y+1, r24	; 0x01
    12b4:	6a 83       	std	Y+2, r22	; 0x02
    12b6:	4b 83       	std	Y+3, r20	; 0x03
	if ( 1 == Copy_U8Dir ){
    12b8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ba:	81 30       	cpi	r24, 0x01	; 1
    12bc:	09 f0       	breq	.+2      	; 0x12c0 <DIO_VidSetPinDirection+0x22>
    12be:	6f c0       	rjmp	.+222    	; 0x139e <DIO_VidSetPinDirection+0x100>
		switch (Copy_U8Port){
    12c0:	89 81       	ldd	r24, Y+1	; 0x01
    12c2:	28 2f       	mov	r18, r24
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	3f 83       	std	Y+7, r19	; 0x07
    12c8:	2e 83       	std	Y+6, r18	; 0x06
    12ca:	8e 81       	ldd	r24, Y+6	; 0x06
    12cc:	9f 81       	ldd	r25, Y+7	; 0x07
    12ce:	81 30       	cpi	r24, 0x01	; 1
    12d0:	91 05       	cpc	r25, r1
    12d2:	49 f1       	breq	.+82     	; 0x1326 <DIO_VidSetPinDirection+0x88>
    12d4:	2e 81       	ldd	r18, Y+6	; 0x06
    12d6:	3f 81       	ldd	r19, Y+7	; 0x07
    12d8:	22 30       	cpi	r18, 0x02	; 2
    12da:	31 05       	cpc	r19, r1
    12dc:	2c f4       	brge	.+10     	; 0x12e8 <DIO_VidSetPinDirection+0x4a>
    12de:	8e 81       	ldd	r24, Y+6	; 0x06
    12e0:	9f 81       	ldd	r25, Y+7	; 0x07
    12e2:	00 97       	sbiw	r24, 0x00	; 0
    12e4:	61 f0       	breq	.+24     	; 0x12fe <DIO_VidSetPinDirection+0x60>
    12e6:	d2 c0       	rjmp	.+420    	; 0x148c <DIO_VidSetPinDirection+0x1ee>
    12e8:	2e 81       	ldd	r18, Y+6	; 0x06
    12ea:	3f 81       	ldd	r19, Y+7	; 0x07
    12ec:	22 30       	cpi	r18, 0x02	; 2
    12ee:	31 05       	cpc	r19, r1
    12f0:	71 f1       	breq	.+92     	; 0x134e <DIO_VidSetPinDirection+0xb0>
    12f2:	8e 81       	ldd	r24, Y+6	; 0x06
    12f4:	9f 81       	ldd	r25, Y+7	; 0x07
    12f6:	83 30       	cpi	r24, 0x03	; 3
    12f8:	91 05       	cpc	r25, r1
    12fa:	e9 f1       	breq	.+122    	; 0x1376 <DIO_VidSetPinDirection+0xd8>
    12fc:	c7 c0       	rjmp	.+398    	; 0x148c <DIO_VidSetPinDirection+0x1ee>
			case 0 : 
			    SET_BIT(DDRA,Copy_U8Pin);
    12fe:	aa e3       	ldi	r26, 0x3A	; 58
    1300:	b0 e0       	ldi	r27, 0x00	; 0
    1302:	ea e3       	ldi	r30, 0x3A	; 58
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	80 81       	ld	r24, Z
    1308:	48 2f       	mov	r20, r24
    130a:	8a 81       	ldd	r24, Y+2	; 0x02
    130c:	28 2f       	mov	r18, r24
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	02 2e       	mov	r0, r18
    1316:	02 c0       	rjmp	.+4      	; 0x131c <DIO_VidSetPinDirection+0x7e>
    1318:	88 0f       	add	r24, r24
    131a:	99 1f       	adc	r25, r25
    131c:	0a 94       	dec	r0
    131e:	e2 f7       	brpl	.-8      	; 0x1318 <DIO_VidSetPinDirection+0x7a>
    1320:	84 2b       	or	r24, r20
    1322:	8c 93       	st	X, r24
    1324:	b3 c0       	rjmp	.+358    	; 0x148c <DIO_VidSetPinDirection+0x1ee>
			    break ;  
			case 1 : 
			    SET_BIT(DDRB,Copy_U8Pin);
    1326:	a7 e3       	ldi	r26, 0x37	; 55
    1328:	b0 e0       	ldi	r27, 0x00	; 0
    132a:	e7 e3       	ldi	r30, 0x37	; 55
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	80 81       	ld	r24, Z
    1330:	48 2f       	mov	r20, r24
    1332:	8a 81       	ldd	r24, Y+2	; 0x02
    1334:	28 2f       	mov	r18, r24
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	02 2e       	mov	r0, r18
    133e:	02 c0       	rjmp	.+4      	; 0x1344 <DIO_VidSetPinDirection+0xa6>
    1340:	88 0f       	add	r24, r24
    1342:	99 1f       	adc	r25, r25
    1344:	0a 94       	dec	r0
    1346:	e2 f7       	brpl	.-8      	; 0x1340 <DIO_VidSetPinDirection+0xa2>
    1348:	84 2b       	or	r24, r20
    134a:	8c 93       	st	X, r24
    134c:	9f c0       	rjmp	.+318    	; 0x148c <DIO_VidSetPinDirection+0x1ee>
			    break ;			
			case 2 : 
			    SET_BIT(DDRC,Copy_U8Pin);
    134e:	a4 e3       	ldi	r26, 0x34	; 52
    1350:	b0 e0       	ldi	r27, 0x00	; 0
    1352:	e4 e3       	ldi	r30, 0x34	; 52
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	80 81       	ld	r24, Z
    1358:	48 2f       	mov	r20, r24
    135a:	8a 81       	ldd	r24, Y+2	; 0x02
    135c:	28 2f       	mov	r18, r24
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	02 2e       	mov	r0, r18
    1366:	02 c0       	rjmp	.+4      	; 0x136c <DIO_VidSetPinDirection+0xce>
    1368:	88 0f       	add	r24, r24
    136a:	99 1f       	adc	r25, r25
    136c:	0a 94       	dec	r0
    136e:	e2 f7       	brpl	.-8      	; 0x1368 <DIO_VidSetPinDirection+0xca>
    1370:	84 2b       	or	r24, r20
    1372:	8c 93       	st	X, r24
    1374:	8b c0       	rjmp	.+278    	; 0x148c <DIO_VidSetPinDirection+0x1ee>
			    break ;  
			case 3 : 
			    SET_BIT(DDRD,Copy_U8Pin);
    1376:	a1 e3       	ldi	r26, 0x31	; 49
    1378:	b0 e0       	ldi	r27, 0x00	; 0
    137a:	e1 e3       	ldi	r30, 0x31	; 49
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	80 81       	ld	r24, Z
    1380:	48 2f       	mov	r20, r24
    1382:	8a 81       	ldd	r24, Y+2	; 0x02
    1384:	28 2f       	mov	r18, r24
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	02 2e       	mov	r0, r18
    138e:	02 c0       	rjmp	.+4      	; 0x1394 <DIO_VidSetPinDirection+0xf6>
    1390:	88 0f       	add	r24, r24
    1392:	99 1f       	adc	r25, r25
    1394:	0a 94       	dec	r0
    1396:	e2 f7       	brpl	.-8      	; 0x1390 <DIO_VidSetPinDirection+0xf2>
    1398:	84 2b       	or	r24, r20
    139a:	8c 93       	st	X, r24
    139c:	77 c0       	rjmp	.+238    	; 0x148c <DIO_VidSetPinDirection+0x1ee>
			    break ; 
		}//end switch
	}//end if
	else if ( 0 == Copy_U8Dir ) {
    139e:	8b 81       	ldd	r24, Y+3	; 0x03
    13a0:	88 23       	and	r24, r24
    13a2:	09 f0       	breq	.+2      	; 0x13a6 <DIO_VidSetPinDirection+0x108>
    13a4:	73 c0       	rjmp	.+230    	; 0x148c <DIO_VidSetPinDirection+0x1ee>
		switch (Copy_U8Port){
    13a6:	89 81       	ldd	r24, Y+1	; 0x01
    13a8:	28 2f       	mov	r18, r24
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	3d 83       	std	Y+5, r19	; 0x05
    13ae:	2c 83       	std	Y+4, r18	; 0x04
    13b0:	8c 81       	ldd	r24, Y+4	; 0x04
    13b2:	9d 81       	ldd	r25, Y+5	; 0x05
    13b4:	81 30       	cpi	r24, 0x01	; 1
    13b6:	91 05       	cpc	r25, r1
    13b8:	59 f1       	breq	.+86     	; 0x1410 <DIO_VidSetPinDirection+0x172>
    13ba:	2c 81       	ldd	r18, Y+4	; 0x04
    13bc:	3d 81       	ldd	r19, Y+5	; 0x05
    13be:	22 30       	cpi	r18, 0x02	; 2
    13c0:	31 05       	cpc	r19, r1
    13c2:	2c f4       	brge	.+10     	; 0x13ce <DIO_VidSetPinDirection+0x130>
    13c4:	8c 81       	ldd	r24, Y+4	; 0x04
    13c6:	9d 81       	ldd	r25, Y+5	; 0x05
    13c8:	00 97       	sbiw	r24, 0x00	; 0
    13ca:	69 f0       	breq	.+26     	; 0x13e6 <DIO_VidSetPinDirection+0x148>
    13cc:	5f c0       	rjmp	.+190    	; 0x148c <DIO_VidSetPinDirection+0x1ee>
    13ce:	2c 81       	ldd	r18, Y+4	; 0x04
    13d0:	3d 81       	ldd	r19, Y+5	; 0x05
    13d2:	22 30       	cpi	r18, 0x02	; 2
    13d4:	31 05       	cpc	r19, r1
    13d6:	89 f1       	breq	.+98     	; 0x143a <DIO_VidSetPinDirection+0x19c>
    13d8:	8c 81       	ldd	r24, Y+4	; 0x04
    13da:	9d 81       	ldd	r25, Y+5	; 0x05
    13dc:	83 30       	cpi	r24, 0x03	; 3
    13de:	91 05       	cpc	r25, r1
    13e0:	09 f4       	brne	.+2      	; 0x13e4 <DIO_VidSetPinDirection+0x146>
    13e2:	40 c0       	rjmp	.+128    	; 0x1464 <DIO_VidSetPinDirection+0x1c6>
    13e4:	53 c0       	rjmp	.+166    	; 0x148c <DIO_VidSetPinDirection+0x1ee>
			case 0 : 
			    CLR_BIT(DDRA,Copy_U8Pin);
    13e6:	aa e3       	ldi	r26, 0x3A	; 58
    13e8:	b0 e0       	ldi	r27, 0x00	; 0
    13ea:	ea e3       	ldi	r30, 0x3A	; 58
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	80 81       	ld	r24, Z
    13f0:	48 2f       	mov	r20, r24
    13f2:	8a 81       	ldd	r24, Y+2	; 0x02
    13f4:	28 2f       	mov	r18, r24
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	02 2e       	mov	r0, r18
    13fe:	02 c0       	rjmp	.+4      	; 0x1404 <DIO_VidSetPinDirection+0x166>
    1400:	88 0f       	add	r24, r24
    1402:	99 1f       	adc	r25, r25
    1404:	0a 94       	dec	r0
    1406:	e2 f7       	brpl	.-8      	; 0x1400 <DIO_VidSetPinDirection+0x162>
    1408:	80 95       	com	r24
    140a:	84 23       	and	r24, r20
    140c:	8c 93       	st	X, r24
    140e:	3e c0       	rjmp	.+124    	; 0x148c <DIO_VidSetPinDirection+0x1ee>
			    break ;  
			case 1 : 
			    CLR_BIT(DDRB,Copy_U8Pin);
    1410:	a7 e3       	ldi	r26, 0x37	; 55
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	e7 e3       	ldi	r30, 0x37	; 55
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	48 2f       	mov	r20, r24
    141c:	8a 81       	ldd	r24, Y+2	; 0x02
    141e:	28 2f       	mov	r18, r24
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	02 2e       	mov	r0, r18
    1428:	02 c0       	rjmp	.+4      	; 0x142e <DIO_VidSetPinDirection+0x190>
    142a:	88 0f       	add	r24, r24
    142c:	99 1f       	adc	r25, r25
    142e:	0a 94       	dec	r0
    1430:	e2 f7       	brpl	.-8      	; 0x142a <DIO_VidSetPinDirection+0x18c>
    1432:	80 95       	com	r24
    1434:	84 23       	and	r24, r20
    1436:	8c 93       	st	X, r24
    1438:	29 c0       	rjmp	.+82     	; 0x148c <DIO_VidSetPinDirection+0x1ee>
			    break ;			
			case 2 : 
			    CLR_BIT(DDRC,Copy_U8Pin);
    143a:	a4 e3       	ldi	r26, 0x34	; 52
    143c:	b0 e0       	ldi	r27, 0x00	; 0
    143e:	e4 e3       	ldi	r30, 0x34	; 52
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	48 2f       	mov	r20, r24
    1446:	8a 81       	ldd	r24, Y+2	; 0x02
    1448:	28 2f       	mov	r18, r24
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	02 2e       	mov	r0, r18
    1452:	02 c0       	rjmp	.+4      	; 0x1458 <DIO_VidSetPinDirection+0x1ba>
    1454:	88 0f       	add	r24, r24
    1456:	99 1f       	adc	r25, r25
    1458:	0a 94       	dec	r0
    145a:	e2 f7       	brpl	.-8      	; 0x1454 <DIO_VidSetPinDirection+0x1b6>
    145c:	80 95       	com	r24
    145e:	84 23       	and	r24, r20
    1460:	8c 93       	st	X, r24
    1462:	14 c0       	rjmp	.+40     	; 0x148c <DIO_VidSetPinDirection+0x1ee>
			    break ;  
			case 3 : 
			    CLR_BIT(DDRD,Copy_U8Pin);
    1464:	a1 e3       	ldi	r26, 0x31	; 49
    1466:	b0 e0       	ldi	r27, 0x00	; 0
    1468:	e1 e3       	ldi	r30, 0x31	; 49
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	48 2f       	mov	r20, r24
    1470:	8a 81       	ldd	r24, Y+2	; 0x02
    1472:	28 2f       	mov	r18, r24
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	02 2e       	mov	r0, r18
    147c:	02 c0       	rjmp	.+4      	; 0x1482 <DIO_VidSetPinDirection+0x1e4>
    147e:	88 0f       	add	r24, r24
    1480:	99 1f       	adc	r25, r25
    1482:	0a 94       	dec	r0
    1484:	e2 f7       	brpl	.-8      	; 0x147e <DIO_VidSetPinDirection+0x1e0>
    1486:	80 95       	com	r24
    1488:	84 23       	and	r24, r20
    148a:	8c 93       	st	X, r24
			    break ; 
		}//end switch
	}//end else if 
}//end FUNC DIO_VidSetPinDirection
    148c:	27 96       	adiw	r28, 0x07	; 7
    148e:	0f b6       	in	r0, 0x3f	; 63
    1490:	f8 94       	cli
    1492:	de bf       	out	0x3e, r29	; 62
    1494:	0f be       	out	0x3f, r0	; 63
    1496:	cd bf       	out	0x3d, r28	; 61
    1498:	cf 91       	pop	r28
    149a:	df 91       	pop	r29
    149c:	08 95       	ret

0000149e <DIO_VidSetPortDirection>:
void DIO_VidSetPortDirection (u8 Copy_U8Port , u8 Copy_U8Dir ) {
    149e:	df 93       	push	r29
    14a0:	cf 93       	push	r28
    14a2:	00 d0       	rcall	.+0      	; 0x14a4 <DIO_VidSetPortDirection+0x6>
    14a4:	00 d0       	rcall	.+0      	; 0x14a6 <DIO_VidSetPortDirection+0x8>
    14a6:	cd b7       	in	r28, 0x3d	; 61
    14a8:	de b7       	in	r29, 0x3e	; 62
    14aa:	89 83       	std	Y+1, r24	; 0x01
    14ac:	6a 83       	std	Y+2, r22	; 0x02
    switch (Copy_U8Port){
    14ae:	89 81       	ldd	r24, Y+1	; 0x01
    14b0:	28 2f       	mov	r18, r24
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	3c 83       	std	Y+4, r19	; 0x04
    14b6:	2b 83       	std	Y+3, r18	; 0x03
    14b8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ba:	9c 81       	ldd	r25, Y+4	; 0x04
    14bc:	81 30       	cpi	r24, 0x01	; 1
    14be:	91 05       	cpc	r25, r1
    14c0:	d1 f0       	breq	.+52     	; 0x14f6 <DIO_VidSetPortDirection+0x58>
    14c2:	2b 81       	ldd	r18, Y+3	; 0x03
    14c4:	3c 81       	ldd	r19, Y+4	; 0x04
    14c6:	22 30       	cpi	r18, 0x02	; 2
    14c8:	31 05       	cpc	r19, r1
    14ca:	2c f4       	brge	.+10     	; 0x14d6 <DIO_VidSetPortDirection+0x38>
    14cc:	8b 81       	ldd	r24, Y+3	; 0x03
    14ce:	9c 81       	ldd	r25, Y+4	; 0x04
    14d0:	00 97       	sbiw	r24, 0x00	; 0
    14d2:	61 f0       	breq	.+24     	; 0x14ec <DIO_VidSetPortDirection+0x4e>
    14d4:	1e c0       	rjmp	.+60     	; 0x1512 <DIO_VidSetPortDirection+0x74>
    14d6:	2b 81       	ldd	r18, Y+3	; 0x03
    14d8:	3c 81       	ldd	r19, Y+4	; 0x04
    14da:	22 30       	cpi	r18, 0x02	; 2
    14dc:	31 05       	cpc	r19, r1
    14de:	81 f0       	breq	.+32     	; 0x1500 <DIO_VidSetPortDirection+0x62>
    14e0:	8b 81       	ldd	r24, Y+3	; 0x03
    14e2:	9c 81       	ldd	r25, Y+4	; 0x04
    14e4:	83 30       	cpi	r24, 0x03	; 3
    14e6:	91 05       	cpc	r25, r1
    14e8:	81 f0       	breq	.+32     	; 0x150a <DIO_VidSetPortDirection+0x6c>
    14ea:	13 c0       	rjmp	.+38     	; 0x1512 <DIO_VidSetPortDirection+0x74>
		case 0 : 
			DDRA = Copy_U8Dir ;
    14ec:	ea e3       	ldi	r30, 0x3A	; 58
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	8a 81       	ldd	r24, Y+2	; 0x02
    14f2:	80 83       	st	Z, r24
    14f4:	0e c0       	rjmp	.+28     	; 0x1512 <DIO_VidSetPortDirection+0x74>
			break ;  
		case 1 : 
			DDRB = Copy_U8Dir ;
    14f6:	e7 e3       	ldi	r30, 0x37	; 55
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	8a 81       	ldd	r24, Y+2	; 0x02
    14fc:	80 83       	st	Z, r24
    14fe:	09 c0       	rjmp	.+18     	; 0x1512 <DIO_VidSetPortDirection+0x74>
			break ;			
		case 2 : 
			DDRC = Copy_U8Dir ;
    1500:	e4 e3       	ldi	r30, 0x34	; 52
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	8a 81       	ldd	r24, Y+2	; 0x02
    1506:	80 83       	st	Z, r24
    1508:	04 c0       	rjmp	.+8      	; 0x1512 <DIO_VidSetPortDirection+0x74>
			break ;  
		case 3 : 
			DDRD = Copy_U8Dir ;
    150a:	e1 e3       	ldi	r30, 0x31	; 49
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	8a 81       	ldd	r24, Y+2	; 0x02
    1510:	80 83       	st	Z, r24
			break ; 
		}//end switch
}// end FUNC DIO_VidSetPortDirection
    1512:	0f 90       	pop	r0
    1514:	0f 90       	pop	r0
    1516:	0f 90       	pop	r0
    1518:	0f 90       	pop	r0
    151a:	cf 91       	pop	r28
    151c:	df 91       	pop	r29
    151e:	08 95       	ret

00001520 <DIO_VidSetPinValue>:
void DIO_VidSetPinValue (u8 Copy_U8Port , u8 Copy_U8Pin , u8 Copy_U8Val ) {
    1520:	df 93       	push	r29
    1522:	cf 93       	push	r28
    1524:	cd b7       	in	r28, 0x3d	; 61
    1526:	de b7       	in	r29, 0x3e	; 62
    1528:	27 97       	sbiw	r28, 0x07	; 7
    152a:	0f b6       	in	r0, 0x3f	; 63
    152c:	f8 94       	cli
    152e:	de bf       	out	0x3e, r29	; 62
    1530:	0f be       	out	0x3f, r0	; 63
    1532:	cd bf       	out	0x3d, r28	; 61
    1534:	89 83       	std	Y+1, r24	; 0x01
    1536:	6a 83       	std	Y+2, r22	; 0x02
    1538:	4b 83       	std	Y+3, r20	; 0x03
	if ( 1 == Copy_U8Val ){
    153a:	8b 81       	ldd	r24, Y+3	; 0x03
    153c:	81 30       	cpi	r24, 0x01	; 1
    153e:	09 f0       	breq	.+2      	; 0x1542 <DIO_VidSetPinValue+0x22>
    1540:	6f c0       	rjmp	.+222    	; 0x1620 <DIO_VidSetPinValue+0x100>
		switch (Copy_U8Port){
    1542:	89 81       	ldd	r24, Y+1	; 0x01
    1544:	28 2f       	mov	r18, r24
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	3f 83       	std	Y+7, r19	; 0x07
    154a:	2e 83       	std	Y+6, r18	; 0x06
    154c:	8e 81       	ldd	r24, Y+6	; 0x06
    154e:	9f 81       	ldd	r25, Y+7	; 0x07
    1550:	81 30       	cpi	r24, 0x01	; 1
    1552:	91 05       	cpc	r25, r1
    1554:	49 f1       	breq	.+82     	; 0x15a8 <DIO_VidSetPinValue+0x88>
    1556:	2e 81       	ldd	r18, Y+6	; 0x06
    1558:	3f 81       	ldd	r19, Y+7	; 0x07
    155a:	22 30       	cpi	r18, 0x02	; 2
    155c:	31 05       	cpc	r19, r1
    155e:	2c f4       	brge	.+10     	; 0x156a <DIO_VidSetPinValue+0x4a>
    1560:	8e 81       	ldd	r24, Y+6	; 0x06
    1562:	9f 81       	ldd	r25, Y+7	; 0x07
    1564:	00 97       	sbiw	r24, 0x00	; 0
    1566:	61 f0       	breq	.+24     	; 0x1580 <DIO_VidSetPinValue+0x60>
    1568:	d2 c0       	rjmp	.+420    	; 0x170e <DIO_VidSetPinValue+0x1ee>
    156a:	2e 81       	ldd	r18, Y+6	; 0x06
    156c:	3f 81       	ldd	r19, Y+7	; 0x07
    156e:	22 30       	cpi	r18, 0x02	; 2
    1570:	31 05       	cpc	r19, r1
    1572:	71 f1       	breq	.+92     	; 0x15d0 <DIO_VidSetPinValue+0xb0>
    1574:	8e 81       	ldd	r24, Y+6	; 0x06
    1576:	9f 81       	ldd	r25, Y+7	; 0x07
    1578:	83 30       	cpi	r24, 0x03	; 3
    157a:	91 05       	cpc	r25, r1
    157c:	e9 f1       	breq	.+122    	; 0x15f8 <DIO_VidSetPinValue+0xd8>
    157e:	c7 c0       	rjmp	.+398    	; 0x170e <DIO_VidSetPinValue+0x1ee>
			case 0 : 
			    SET_BIT(PORTA,Copy_U8Pin);
    1580:	ab e3       	ldi	r26, 0x3B	; 59
    1582:	b0 e0       	ldi	r27, 0x00	; 0
    1584:	eb e3       	ldi	r30, 0x3B	; 59
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	48 2f       	mov	r20, r24
    158c:	8a 81       	ldd	r24, Y+2	; 0x02
    158e:	28 2f       	mov	r18, r24
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	02 2e       	mov	r0, r18
    1598:	02 c0       	rjmp	.+4      	; 0x159e <DIO_VidSetPinValue+0x7e>
    159a:	88 0f       	add	r24, r24
    159c:	99 1f       	adc	r25, r25
    159e:	0a 94       	dec	r0
    15a0:	e2 f7       	brpl	.-8      	; 0x159a <DIO_VidSetPinValue+0x7a>
    15a2:	84 2b       	or	r24, r20
    15a4:	8c 93       	st	X, r24
    15a6:	b3 c0       	rjmp	.+358    	; 0x170e <DIO_VidSetPinValue+0x1ee>
			    break ;  
			case 1 : 
			    SET_BIT(PORTB,Copy_U8Pin);
    15a8:	a8 e3       	ldi	r26, 0x38	; 56
    15aa:	b0 e0       	ldi	r27, 0x00	; 0
    15ac:	e8 e3       	ldi	r30, 0x38	; 56
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	48 2f       	mov	r20, r24
    15b4:	8a 81       	ldd	r24, Y+2	; 0x02
    15b6:	28 2f       	mov	r18, r24
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	02 2e       	mov	r0, r18
    15c0:	02 c0       	rjmp	.+4      	; 0x15c6 <DIO_VidSetPinValue+0xa6>
    15c2:	88 0f       	add	r24, r24
    15c4:	99 1f       	adc	r25, r25
    15c6:	0a 94       	dec	r0
    15c8:	e2 f7       	brpl	.-8      	; 0x15c2 <DIO_VidSetPinValue+0xa2>
    15ca:	84 2b       	or	r24, r20
    15cc:	8c 93       	st	X, r24
    15ce:	9f c0       	rjmp	.+318    	; 0x170e <DIO_VidSetPinValue+0x1ee>
			    break ;			
			case 2 : 
			    SET_BIT(PORTC,Copy_U8Pin);
    15d0:	a5 e3       	ldi	r26, 0x35	; 53
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	e5 e3       	ldi	r30, 0x35	; 53
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	48 2f       	mov	r20, r24
    15dc:	8a 81       	ldd	r24, Y+2	; 0x02
    15de:	28 2f       	mov	r18, r24
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	02 2e       	mov	r0, r18
    15e8:	02 c0       	rjmp	.+4      	; 0x15ee <DIO_VidSetPinValue+0xce>
    15ea:	88 0f       	add	r24, r24
    15ec:	99 1f       	adc	r25, r25
    15ee:	0a 94       	dec	r0
    15f0:	e2 f7       	brpl	.-8      	; 0x15ea <DIO_VidSetPinValue+0xca>
    15f2:	84 2b       	or	r24, r20
    15f4:	8c 93       	st	X, r24
    15f6:	8b c0       	rjmp	.+278    	; 0x170e <DIO_VidSetPinValue+0x1ee>
			    break ;  
			case 3 : 
			    SET_BIT(PORTD,Copy_U8Pin);
    15f8:	a2 e3       	ldi	r26, 0x32	; 50
    15fa:	b0 e0       	ldi	r27, 0x00	; 0
    15fc:	e2 e3       	ldi	r30, 0x32	; 50
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	48 2f       	mov	r20, r24
    1604:	8a 81       	ldd	r24, Y+2	; 0x02
    1606:	28 2f       	mov	r18, r24
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	02 2e       	mov	r0, r18
    1610:	02 c0       	rjmp	.+4      	; 0x1616 <DIO_VidSetPinValue+0xf6>
    1612:	88 0f       	add	r24, r24
    1614:	99 1f       	adc	r25, r25
    1616:	0a 94       	dec	r0
    1618:	e2 f7       	brpl	.-8      	; 0x1612 <DIO_VidSetPinValue+0xf2>
    161a:	84 2b       	or	r24, r20
    161c:	8c 93       	st	X, r24
    161e:	77 c0       	rjmp	.+238    	; 0x170e <DIO_VidSetPinValue+0x1ee>
			    break ; 
		}//end switch
	}//end if
	else if ( 0 == Copy_U8Val){
    1620:	8b 81       	ldd	r24, Y+3	; 0x03
    1622:	88 23       	and	r24, r24
    1624:	09 f0       	breq	.+2      	; 0x1628 <DIO_VidSetPinValue+0x108>
    1626:	73 c0       	rjmp	.+230    	; 0x170e <DIO_VidSetPinValue+0x1ee>
		switch (Copy_U8Port){
    1628:	89 81       	ldd	r24, Y+1	; 0x01
    162a:	28 2f       	mov	r18, r24
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	3d 83       	std	Y+5, r19	; 0x05
    1630:	2c 83       	std	Y+4, r18	; 0x04
    1632:	8c 81       	ldd	r24, Y+4	; 0x04
    1634:	9d 81       	ldd	r25, Y+5	; 0x05
    1636:	81 30       	cpi	r24, 0x01	; 1
    1638:	91 05       	cpc	r25, r1
    163a:	59 f1       	breq	.+86     	; 0x1692 <DIO_VidSetPinValue+0x172>
    163c:	2c 81       	ldd	r18, Y+4	; 0x04
    163e:	3d 81       	ldd	r19, Y+5	; 0x05
    1640:	22 30       	cpi	r18, 0x02	; 2
    1642:	31 05       	cpc	r19, r1
    1644:	2c f4       	brge	.+10     	; 0x1650 <DIO_VidSetPinValue+0x130>
    1646:	8c 81       	ldd	r24, Y+4	; 0x04
    1648:	9d 81       	ldd	r25, Y+5	; 0x05
    164a:	00 97       	sbiw	r24, 0x00	; 0
    164c:	69 f0       	breq	.+26     	; 0x1668 <DIO_VidSetPinValue+0x148>
    164e:	5f c0       	rjmp	.+190    	; 0x170e <DIO_VidSetPinValue+0x1ee>
    1650:	2c 81       	ldd	r18, Y+4	; 0x04
    1652:	3d 81       	ldd	r19, Y+5	; 0x05
    1654:	22 30       	cpi	r18, 0x02	; 2
    1656:	31 05       	cpc	r19, r1
    1658:	89 f1       	breq	.+98     	; 0x16bc <DIO_VidSetPinValue+0x19c>
    165a:	8c 81       	ldd	r24, Y+4	; 0x04
    165c:	9d 81       	ldd	r25, Y+5	; 0x05
    165e:	83 30       	cpi	r24, 0x03	; 3
    1660:	91 05       	cpc	r25, r1
    1662:	09 f4       	brne	.+2      	; 0x1666 <DIO_VidSetPinValue+0x146>
    1664:	40 c0       	rjmp	.+128    	; 0x16e6 <DIO_VidSetPinValue+0x1c6>
    1666:	53 c0       	rjmp	.+166    	; 0x170e <DIO_VidSetPinValue+0x1ee>
			case 0 : 
			    CLR_BIT(PORTA,Copy_U8Pin);
    1668:	ab e3       	ldi	r26, 0x3B	; 59
    166a:	b0 e0       	ldi	r27, 0x00	; 0
    166c:	eb e3       	ldi	r30, 0x3B	; 59
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	80 81       	ld	r24, Z
    1672:	48 2f       	mov	r20, r24
    1674:	8a 81       	ldd	r24, Y+2	; 0x02
    1676:	28 2f       	mov	r18, r24
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	02 2e       	mov	r0, r18
    1680:	02 c0       	rjmp	.+4      	; 0x1686 <DIO_VidSetPinValue+0x166>
    1682:	88 0f       	add	r24, r24
    1684:	99 1f       	adc	r25, r25
    1686:	0a 94       	dec	r0
    1688:	e2 f7       	brpl	.-8      	; 0x1682 <DIO_VidSetPinValue+0x162>
    168a:	80 95       	com	r24
    168c:	84 23       	and	r24, r20
    168e:	8c 93       	st	X, r24
    1690:	3e c0       	rjmp	.+124    	; 0x170e <DIO_VidSetPinValue+0x1ee>
			    break ;  
			case 1 : 
			    CLR_BIT(PORTB,Copy_U8Pin);
    1692:	a8 e3       	ldi	r26, 0x38	; 56
    1694:	b0 e0       	ldi	r27, 0x00	; 0
    1696:	e8 e3       	ldi	r30, 0x38	; 56
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	80 81       	ld	r24, Z
    169c:	48 2f       	mov	r20, r24
    169e:	8a 81       	ldd	r24, Y+2	; 0x02
    16a0:	28 2f       	mov	r18, r24
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	02 2e       	mov	r0, r18
    16aa:	02 c0       	rjmp	.+4      	; 0x16b0 <DIO_VidSetPinValue+0x190>
    16ac:	88 0f       	add	r24, r24
    16ae:	99 1f       	adc	r25, r25
    16b0:	0a 94       	dec	r0
    16b2:	e2 f7       	brpl	.-8      	; 0x16ac <DIO_VidSetPinValue+0x18c>
    16b4:	80 95       	com	r24
    16b6:	84 23       	and	r24, r20
    16b8:	8c 93       	st	X, r24
    16ba:	29 c0       	rjmp	.+82     	; 0x170e <DIO_VidSetPinValue+0x1ee>
			    break ;			
			case 2 : 
			    CLR_BIT(PORTC,Copy_U8Pin);
    16bc:	a5 e3       	ldi	r26, 0x35	; 53
    16be:	b0 e0       	ldi	r27, 0x00	; 0
    16c0:	e5 e3       	ldi	r30, 0x35	; 53
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	80 81       	ld	r24, Z
    16c6:	48 2f       	mov	r20, r24
    16c8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ca:	28 2f       	mov	r18, r24
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	02 2e       	mov	r0, r18
    16d4:	02 c0       	rjmp	.+4      	; 0x16da <DIO_VidSetPinValue+0x1ba>
    16d6:	88 0f       	add	r24, r24
    16d8:	99 1f       	adc	r25, r25
    16da:	0a 94       	dec	r0
    16dc:	e2 f7       	brpl	.-8      	; 0x16d6 <DIO_VidSetPinValue+0x1b6>
    16de:	80 95       	com	r24
    16e0:	84 23       	and	r24, r20
    16e2:	8c 93       	st	X, r24
    16e4:	14 c0       	rjmp	.+40     	; 0x170e <DIO_VidSetPinValue+0x1ee>
			    break ;  
			case 3 : 
			    CLR_BIT(PORTD,Copy_U8Pin);
    16e6:	a2 e3       	ldi	r26, 0x32	; 50
    16e8:	b0 e0       	ldi	r27, 0x00	; 0
    16ea:	e2 e3       	ldi	r30, 0x32	; 50
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	80 81       	ld	r24, Z
    16f0:	48 2f       	mov	r20, r24
    16f2:	8a 81       	ldd	r24, Y+2	; 0x02
    16f4:	28 2f       	mov	r18, r24
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	02 2e       	mov	r0, r18
    16fe:	02 c0       	rjmp	.+4      	; 0x1704 <DIO_VidSetPinValue+0x1e4>
    1700:	88 0f       	add	r24, r24
    1702:	99 1f       	adc	r25, r25
    1704:	0a 94       	dec	r0
    1706:	e2 f7       	brpl	.-8      	; 0x1700 <DIO_VidSetPinValue+0x1e0>
    1708:	80 95       	com	r24
    170a:	84 23       	and	r24, r20
    170c:	8c 93       	st	X, r24
			    break ; 
		}//end switch
	}//end else if
}// end FUNC DIO_VidSetPinValue
    170e:	27 96       	adiw	r28, 0x07	; 7
    1710:	0f b6       	in	r0, 0x3f	; 63
    1712:	f8 94       	cli
    1714:	de bf       	out	0x3e, r29	; 62
    1716:	0f be       	out	0x3f, r0	; 63
    1718:	cd bf       	out	0x3d, r28	; 61
    171a:	cf 91       	pop	r28
    171c:	df 91       	pop	r29
    171e:	08 95       	ret

00001720 <DIO_VidSetPortValue>:
void DIO_VidSetPortValue (u8 Copy_U8Port , u8 Copy_U8Val ) {
    1720:	df 93       	push	r29
    1722:	cf 93       	push	r28
    1724:	00 d0       	rcall	.+0      	; 0x1726 <DIO_VidSetPortValue+0x6>
    1726:	00 d0       	rcall	.+0      	; 0x1728 <DIO_VidSetPortValue+0x8>
    1728:	cd b7       	in	r28, 0x3d	; 61
    172a:	de b7       	in	r29, 0x3e	; 62
    172c:	89 83       	std	Y+1, r24	; 0x01
    172e:	6a 83       	std	Y+2, r22	; 0x02
    switch (Copy_U8Port){
    1730:	89 81       	ldd	r24, Y+1	; 0x01
    1732:	28 2f       	mov	r18, r24
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	3c 83       	std	Y+4, r19	; 0x04
    1738:	2b 83       	std	Y+3, r18	; 0x03
    173a:	8b 81       	ldd	r24, Y+3	; 0x03
    173c:	9c 81       	ldd	r25, Y+4	; 0x04
    173e:	81 30       	cpi	r24, 0x01	; 1
    1740:	91 05       	cpc	r25, r1
    1742:	d1 f0       	breq	.+52     	; 0x1778 <DIO_VidSetPortValue+0x58>
    1744:	2b 81       	ldd	r18, Y+3	; 0x03
    1746:	3c 81       	ldd	r19, Y+4	; 0x04
    1748:	22 30       	cpi	r18, 0x02	; 2
    174a:	31 05       	cpc	r19, r1
    174c:	2c f4       	brge	.+10     	; 0x1758 <DIO_VidSetPortValue+0x38>
    174e:	8b 81       	ldd	r24, Y+3	; 0x03
    1750:	9c 81       	ldd	r25, Y+4	; 0x04
    1752:	00 97       	sbiw	r24, 0x00	; 0
    1754:	61 f0       	breq	.+24     	; 0x176e <DIO_VidSetPortValue+0x4e>
    1756:	1e c0       	rjmp	.+60     	; 0x1794 <DIO_VidSetPortValue+0x74>
    1758:	2b 81       	ldd	r18, Y+3	; 0x03
    175a:	3c 81       	ldd	r19, Y+4	; 0x04
    175c:	22 30       	cpi	r18, 0x02	; 2
    175e:	31 05       	cpc	r19, r1
    1760:	81 f0       	breq	.+32     	; 0x1782 <DIO_VidSetPortValue+0x62>
    1762:	8b 81       	ldd	r24, Y+3	; 0x03
    1764:	9c 81       	ldd	r25, Y+4	; 0x04
    1766:	83 30       	cpi	r24, 0x03	; 3
    1768:	91 05       	cpc	r25, r1
    176a:	81 f0       	breq	.+32     	; 0x178c <DIO_VidSetPortValue+0x6c>
    176c:	13 c0       	rjmp	.+38     	; 0x1794 <DIO_VidSetPortValue+0x74>
		case 0 : 
			PORTA = Copy_U8Val ;
    176e:	eb e3       	ldi	r30, 0x3B	; 59
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	8a 81       	ldd	r24, Y+2	; 0x02
    1774:	80 83       	st	Z, r24
    1776:	0e c0       	rjmp	.+28     	; 0x1794 <DIO_VidSetPortValue+0x74>
			break ;  
		case 1 : 
			PORTB = Copy_U8Val ;
    1778:	e8 e3       	ldi	r30, 0x38	; 56
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	8a 81       	ldd	r24, Y+2	; 0x02
    177e:	80 83       	st	Z, r24
    1780:	09 c0       	rjmp	.+18     	; 0x1794 <DIO_VidSetPortValue+0x74>
			break ;			
		case 2 : 
			PORTC = Copy_U8Val ;
    1782:	e5 e3       	ldi	r30, 0x35	; 53
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	8a 81       	ldd	r24, Y+2	; 0x02
    1788:	80 83       	st	Z, r24
    178a:	04 c0       	rjmp	.+8      	; 0x1794 <DIO_VidSetPortValue+0x74>
			break ;  
		case 3 : 
			PORTD = Copy_U8Val ;
    178c:	e2 e3       	ldi	r30, 0x32	; 50
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	8a 81       	ldd	r24, Y+2	; 0x02
    1792:	80 83       	st	Z, r24
			break ; 
		}//end switch
}//end FUNC DIO_VidSetPortValue
    1794:	0f 90       	pop	r0
    1796:	0f 90       	pop	r0
    1798:	0f 90       	pop	r0
    179a:	0f 90       	pop	r0
    179c:	cf 91       	pop	r28
    179e:	df 91       	pop	r29
    17a0:	08 95       	ret

000017a2 <DIO_VidTogglePinValue>:
void DIO_VidTogglePinValue (u8 Copy_U8Port , u8 Copy_U8Pin ) {
    17a2:	df 93       	push	r29
    17a4:	cf 93       	push	r28
    17a6:	00 d0       	rcall	.+0      	; 0x17a8 <DIO_VidTogglePinValue+0x6>
    17a8:	00 d0       	rcall	.+0      	; 0x17aa <DIO_VidTogglePinValue+0x8>
    17aa:	cd b7       	in	r28, 0x3d	; 61
    17ac:	de b7       	in	r29, 0x3e	; 62
    17ae:	89 83       	std	Y+1, r24	; 0x01
    17b0:	6a 83       	std	Y+2, r22	; 0x02
	switch ( Copy_U8Port ) {
    17b2:	89 81       	ldd	r24, Y+1	; 0x01
    17b4:	28 2f       	mov	r18, r24
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	3c 83       	std	Y+4, r19	; 0x04
    17ba:	2b 83       	std	Y+3, r18	; 0x03
    17bc:	8b 81       	ldd	r24, Y+3	; 0x03
    17be:	9c 81       	ldd	r25, Y+4	; 0x04
    17c0:	81 30       	cpi	r24, 0x01	; 1
    17c2:	91 05       	cpc	r25, r1
    17c4:	49 f1       	breq	.+82     	; 0x1818 <DIO_VidTogglePinValue+0x76>
    17c6:	2b 81       	ldd	r18, Y+3	; 0x03
    17c8:	3c 81       	ldd	r19, Y+4	; 0x04
    17ca:	22 30       	cpi	r18, 0x02	; 2
    17cc:	31 05       	cpc	r19, r1
    17ce:	2c f4       	brge	.+10     	; 0x17da <DIO_VidTogglePinValue+0x38>
    17d0:	8b 81       	ldd	r24, Y+3	; 0x03
    17d2:	9c 81       	ldd	r25, Y+4	; 0x04
    17d4:	00 97       	sbiw	r24, 0x00	; 0
    17d6:	61 f0       	breq	.+24     	; 0x17f0 <DIO_VidTogglePinValue+0x4e>
    17d8:	5a c0       	rjmp	.+180    	; 0x188e <DIO_VidTogglePinValue+0xec>
    17da:	2b 81       	ldd	r18, Y+3	; 0x03
    17dc:	3c 81       	ldd	r19, Y+4	; 0x04
    17de:	22 30       	cpi	r18, 0x02	; 2
    17e0:	31 05       	cpc	r19, r1
    17e2:	71 f1       	breq	.+92     	; 0x1840 <DIO_VidTogglePinValue+0x9e>
    17e4:	8b 81       	ldd	r24, Y+3	; 0x03
    17e6:	9c 81       	ldd	r25, Y+4	; 0x04
    17e8:	83 30       	cpi	r24, 0x03	; 3
    17ea:	91 05       	cpc	r25, r1
    17ec:	e9 f1       	breq	.+122    	; 0x1868 <DIO_VidTogglePinValue+0xc6>
    17ee:	4f c0       	rjmp	.+158    	; 0x188e <DIO_VidTogglePinValue+0xec>
		case 0 : 
		    TOGGLE_BIT( PORTA , Copy_U8Pin ) ;
    17f0:	ab e3       	ldi	r26, 0x3B	; 59
    17f2:	b0 e0       	ldi	r27, 0x00	; 0
    17f4:	eb e3       	ldi	r30, 0x3B	; 59
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	80 81       	ld	r24, Z
    17fa:	48 2f       	mov	r20, r24
    17fc:	8a 81       	ldd	r24, Y+2	; 0x02
    17fe:	28 2f       	mov	r18, r24
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	02 2e       	mov	r0, r18
    1808:	02 c0       	rjmp	.+4      	; 0x180e <DIO_VidTogglePinValue+0x6c>
    180a:	88 0f       	add	r24, r24
    180c:	99 1f       	adc	r25, r25
    180e:	0a 94       	dec	r0
    1810:	e2 f7       	brpl	.-8      	; 0x180a <DIO_VidTogglePinValue+0x68>
    1812:	84 27       	eor	r24, r20
    1814:	8c 93       	st	X, r24
    1816:	3b c0       	rjmp	.+118    	; 0x188e <DIO_VidTogglePinValue+0xec>
			break ;  
		case 1 : 
			TOGGLE_BIT( PORTB , Copy_U8Pin ) ;
    1818:	a8 e3       	ldi	r26, 0x38	; 56
    181a:	b0 e0       	ldi	r27, 0x00	; 0
    181c:	e8 e3       	ldi	r30, 0x38	; 56
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	80 81       	ld	r24, Z
    1822:	48 2f       	mov	r20, r24
    1824:	8a 81       	ldd	r24, Y+2	; 0x02
    1826:	28 2f       	mov	r18, r24
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	81 e0       	ldi	r24, 0x01	; 1
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	02 2e       	mov	r0, r18
    1830:	02 c0       	rjmp	.+4      	; 0x1836 <DIO_VidTogglePinValue+0x94>
    1832:	88 0f       	add	r24, r24
    1834:	99 1f       	adc	r25, r25
    1836:	0a 94       	dec	r0
    1838:	e2 f7       	brpl	.-8      	; 0x1832 <DIO_VidTogglePinValue+0x90>
    183a:	84 27       	eor	r24, r20
    183c:	8c 93       	st	X, r24
    183e:	27 c0       	rjmp	.+78     	; 0x188e <DIO_VidTogglePinValue+0xec>
			break ;			
		case 2 : 
			TOGGLE_BIT( PORTC , Copy_U8Pin ) ;
    1840:	a5 e3       	ldi	r26, 0x35	; 53
    1842:	b0 e0       	ldi	r27, 0x00	; 0
    1844:	e5 e3       	ldi	r30, 0x35	; 53
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	80 81       	ld	r24, Z
    184a:	48 2f       	mov	r20, r24
    184c:	8a 81       	ldd	r24, Y+2	; 0x02
    184e:	28 2f       	mov	r18, r24
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	81 e0       	ldi	r24, 0x01	; 1
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	02 2e       	mov	r0, r18
    1858:	02 c0       	rjmp	.+4      	; 0x185e <DIO_VidTogglePinValue+0xbc>
    185a:	88 0f       	add	r24, r24
    185c:	99 1f       	adc	r25, r25
    185e:	0a 94       	dec	r0
    1860:	e2 f7       	brpl	.-8      	; 0x185a <DIO_VidTogglePinValue+0xb8>
    1862:	84 27       	eor	r24, r20
    1864:	8c 93       	st	X, r24
    1866:	13 c0       	rjmp	.+38     	; 0x188e <DIO_VidTogglePinValue+0xec>
			break ;  
		case 3 : 
			TOGGLE_BIT( PORTD , Copy_U8Pin ) ;
    1868:	a2 e3       	ldi	r26, 0x32	; 50
    186a:	b0 e0       	ldi	r27, 0x00	; 0
    186c:	e2 e3       	ldi	r30, 0x32	; 50
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	80 81       	ld	r24, Z
    1872:	48 2f       	mov	r20, r24
    1874:	8a 81       	ldd	r24, Y+2	; 0x02
    1876:	28 2f       	mov	r18, r24
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	81 e0       	ldi	r24, 0x01	; 1
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	02 2e       	mov	r0, r18
    1880:	02 c0       	rjmp	.+4      	; 0x1886 <DIO_VidTogglePinValue+0xe4>
    1882:	88 0f       	add	r24, r24
    1884:	99 1f       	adc	r25, r25
    1886:	0a 94       	dec	r0
    1888:	e2 f7       	brpl	.-8      	; 0x1882 <DIO_VidTogglePinValue+0xe0>
    188a:	84 27       	eor	r24, r20
    188c:	8c 93       	st	X, r24
			break ; 
	}//end switch
}//end FUNC DIO_VidTogglePinValue
    188e:	0f 90       	pop	r0
    1890:	0f 90       	pop	r0
    1892:	0f 90       	pop	r0
    1894:	0f 90       	pop	r0
    1896:	cf 91       	pop	r28
    1898:	df 91       	pop	r29
    189a:	08 95       	ret

0000189c <DIO_U8GetPinValue>:

u8 DIO_U8GetPinValue (u8 Copy_U8Port , u8 Copy_U8Pin ) {
    189c:	df 93       	push	r29
    189e:	cf 93       	push	r28
    18a0:	00 d0       	rcall	.+0      	; 0x18a2 <DIO_U8GetPinValue+0x6>
    18a2:	00 d0       	rcall	.+0      	; 0x18a4 <DIO_U8GetPinValue+0x8>
    18a4:	00 d0       	rcall	.+0      	; 0x18a6 <DIO_U8GetPinValue+0xa>
    18a6:	cd b7       	in	r28, 0x3d	; 61
    18a8:	de b7       	in	r29, 0x3e	; 62
    18aa:	89 83       	std	Y+1, r24	; 0x01
    18ac:	6a 83       	std	Y+2, r22	; 0x02
	switch ( Copy_U8Port ) {
    18ae:	89 81       	ldd	r24, Y+1	; 0x01
    18b0:	28 2f       	mov	r18, r24
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	3d 83       	std	Y+5, r19	; 0x05
    18b6:	2c 83       	std	Y+4, r18	; 0x04
    18b8:	4c 81       	ldd	r20, Y+4	; 0x04
    18ba:	5d 81       	ldd	r21, Y+5	; 0x05
    18bc:	41 30       	cpi	r20, 0x01	; 1
    18be:	51 05       	cpc	r21, r1
    18c0:	49 f1       	breq	.+82     	; 0x1914 <DIO_U8GetPinValue+0x78>
    18c2:	8c 81       	ldd	r24, Y+4	; 0x04
    18c4:	9d 81       	ldd	r25, Y+5	; 0x05
    18c6:	82 30       	cpi	r24, 0x02	; 2
    18c8:	91 05       	cpc	r25, r1
    18ca:	34 f4       	brge	.+12     	; 0x18d8 <DIO_U8GetPinValue+0x3c>
    18cc:	2c 81       	ldd	r18, Y+4	; 0x04
    18ce:	3d 81       	ldd	r19, Y+5	; 0x05
    18d0:	21 15       	cp	r18, r1
    18d2:	31 05       	cpc	r19, r1
    18d4:	61 f0       	breq	.+24     	; 0x18ee <DIO_U8GetPinValue+0x52>
    18d6:	57 c0       	rjmp	.+174    	; 0x1986 <DIO_U8GetPinValue+0xea>
    18d8:	4c 81       	ldd	r20, Y+4	; 0x04
    18da:	5d 81       	ldd	r21, Y+5	; 0x05
    18dc:	42 30       	cpi	r20, 0x02	; 2
    18de:	51 05       	cpc	r21, r1
    18e0:	61 f1       	breq	.+88     	; 0x193a <DIO_U8GetPinValue+0x9e>
    18e2:	8c 81       	ldd	r24, Y+4	; 0x04
    18e4:	9d 81       	ldd	r25, Y+5	; 0x05
    18e6:	83 30       	cpi	r24, 0x03	; 3
    18e8:	91 05       	cpc	r25, r1
    18ea:	d1 f1       	breq	.+116    	; 0x1960 <DIO_U8GetPinValue+0xc4>
    18ec:	4c c0       	rjmp	.+152    	; 0x1986 <DIO_U8GetPinValue+0xea>
		case 0 : 
		   return GET_BIT( PINA , Copy_U8Pin ) ;
    18ee:	e9 e3       	ldi	r30, 0x39	; 57
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	80 81       	ld	r24, Z
    18f4:	28 2f       	mov	r18, r24
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	8a 81       	ldd	r24, Y+2	; 0x02
    18fa:	88 2f       	mov	r24, r24
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	a9 01       	movw	r20, r18
    1900:	02 c0       	rjmp	.+4      	; 0x1906 <DIO_U8GetPinValue+0x6a>
    1902:	55 95       	asr	r21
    1904:	47 95       	ror	r20
    1906:	8a 95       	dec	r24
    1908:	e2 f7       	brpl	.-8      	; 0x1902 <DIO_U8GetPinValue+0x66>
    190a:	ca 01       	movw	r24, r20
    190c:	58 2f       	mov	r21, r24
    190e:	51 70       	andi	r21, 0x01	; 1
    1910:	5b 83       	std	Y+3, r21	; 0x03
    1912:	3a c0       	rjmp	.+116    	; 0x1988 <DIO_U8GetPinValue+0xec>
		case 1 : 
			return GET_BIT( PINB , Copy_U8Pin ) ;
    1914:	e6 e3       	ldi	r30, 0x36	; 54
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	80 81       	ld	r24, Z
    191a:	28 2f       	mov	r18, r24
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	8a 81       	ldd	r24, Y+2	; 0x02
    1920:	88 2f       	mov	r24, r24
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	a9 01       	movw	r20, r18
    1926:	02 c0       	rjmp	.+4      	; 0x192c <DIO_U8GetPinValue+0x90>
    1928:	55 95       	asr	r21
    192a:	47 95       	ror	r20
    192c:	8a 95       	dec	r24
    192e:	e2 f7       	brpl	.-8      	; 0x1928 <DIO_U8GetPinValue+0x8c>
    1930:	ca 01       	movw	r24, r20
    1932:	58 2f       	mov	r21, r24
    1934:	51 70       	andi	r21, 0x01	; 1
    1936:	5b 83       	std	Y+3, r21	; 0x03
    1938:	27 c0       	rjmp	.+78     	; 0x1988 <DIO_U8GetPinValue+0xec>
		case 2 : 
			return GET_BIT( PINC , Copy_U8Pin ) ;
    193a:	e3 e3       	ldi	r30, 0x33	; 51
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	80 81       	ld	r24, Z
    1940:	28 2f       	mov	r18, r24
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	8a 81       	ldd	r24, Y+2	; 0x02
    1946:	88 2f       	mov	r24, r24
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	a9 01       	movw	r20, r18
    194c:	02 c0       	rjmp	.+4      	; 0x1952 <DIO_U8GetPinValue+0xb6>
    194e:	55 95       	asr	r21
    1950:	47 95       	ror	r20
    1952:	8a 95       	dec	r24
    1954:	e2 f7       	brpl	.-8      	; 0x194e <DIO_U8GetPinValue+0xb2>
    1956:	ca 01       	movw	r24, r20
    1958:	58 2f       	mov	r21, r24
    195a:	51 70       	andi	r21, 0x01	; 1
    195c:	5b 83       	std	Y+3, r21	; 0x03
    195e:	14 c0       	rjmp	.+40     	; 0x1988 <DIO_U8GetPinValue+0xec>
		case 3 : 
			return GET_BIT( PIND , Copy_U8Pin ) ;
    1960:	e0 e3       	ldi	r30, 0x30	; 48
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	80 81       	ld	r24, Z
    1966:	28 2f       	mov	r18, r24
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	8a 81       	ldd	r24, Y+2	; 0x02
    196c:	88 2f       	mov	r24, r24
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	a9 01       	movw	r20, r18
    1972:	02 c0       	rjmp	.+4      	; 0x1978 <DIO_U8GetPinValue+0xdc>
    1974:	55 95       	asr	r21
    1976:	47 95       	ror	r20
    1978:	8a 95       	dec	r24
    197a:	e2 f7       	brpl	.-8      	; 0x1974 <DIO_U8GetPinValue+0xd8>
    197c:	ca 01       	movw	r24, r20
    197e:	58 2f       	mov	r21, r24
    1980:	51 70       	andi	r21, 0x01	; 1
    1982:	5b 83       	std	Y+3, r21	; 0x03
    1984:	01 c0       	rjmp	.+2      	; 0x1988 <DIO_U8GetPinValue+0xec>
    1986:	02 c0       	rjmp	.+4      	; 0x198c <DIO_U8GetPinValue+0xf0>
	}//end switch	
}//end FUNC DIO_VidU8PinValue 
    1988:	8b 81       	ldd	r24, Y+3	; 0x03
    198a:	8e 83       	std	Y+6, r24	; 0x06
    198c:	8e 81       	ldd	r24, Y+6	; 0x06
    198e:	26 96       	adiw	r28, 0x06	; 6
    1990:	0f b6       	in	r0, 0x3f	; 63
    1992:	f8 94       	cli
    1994:	de bf       	out	0x3e, r29	; 62
    1996:	0f be       	out	0x3f, r0	; 63
    1998:	cd bf       	out	0x3d, r28	; 61
    199a:	cf 91       	pop	r28
    199c:	df 91       	pop	r29
    199e:	08 95       	ret

000019a0 <EX_INT_VidSetCallBack>:
static void (*INT1_PFUNC)(void) = 0 ;
static void (*INT2_PFUNC)(void) = 0 ;


//preferred to use this FUNC in line 1 in main code to avoid some problems in memory
void EX_INT_VidSetCallBack (u8 Copy_NumOfINT , void (*ptr)(void)){
    19a0:	df 93       	push	r29
    19a2:	cf 93       	push	r28
    19a4:	00 d0       	rcall	.+0      	; 0x19a6 <EX_INT_VidSetCallBack+0x6>
    19a6:	00 d0       	rcall	.+0      	; 0x19a8 <EX_INT_VidSetCallBack+0x8>
    19a8:	0f 92       	push	r0
    19aa:	cd b7       	in	r28, 0x3d	; 61
    19ac:	de b7       	in	r29, 0x3e	; 62
    19ae:	89 83       	std	Y+1, r24	; 0x01
    19b0:	7b 83       	std	Y+3, r23	; 0x03
    19b2:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_NumOfINT){
    19b4:	89 81       	ldd	r24, Y+1	; 0x01
    19b6:	28 2f       	mov	r18, r24
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	3d 83       	std	Y+5, r19	; 0x05
    19bc:	2c 83       	std	Y+4, r18	; 0x04
    19be:	8c 81       	ldd	r24, Y+4	; 0x04
    19c0:	9d 81       	ldd	r25, Y+5	; 0x05
    19c2:	81 30       	cpi	r24, 0x01	; 1
    19c4:	91 05       	cpc	r25, r1
    19c6:	81 f0       	breq	.+32     	; 0x19e8 <EX_INT_VidSetCallBack+0x48>
    19c8:	2c 81       	ldd	r18, Y+4	; 0x04
    19ca:	3d 81       	ldd	r19, Y+5	; 0x05
    19cc:	22 30       	cpi	r18, 0x02	; 2
    19ce:	31 05       	cpc	r19, r1
    19d0:	91 f0       	breq	.+36     	; 0x19f6 <EX_INT_VidSetCallBack+0x56>
    19d2:	8c 81       	ldd	r24, Y+4	; 0x04
    19d4:	9d 81       	ldd	r25, Y+5	; 0x05
    19d6:	00 97       	sbiw	r24, 0x00	; 0
    19d8:	a1 f4       	brne	.+40     	; 0x1a02 <EX_INT_VidSetCallBack+0x62>
	case 0 :INT0_PFUNC = ptr ;             break ;
    19da:	8a 81       	ldd	r24, Y+2	; 0x02
    19dc:	9b 81       	ldd	r25, Y+3	; 0x03
    19de:	90 93 6d 01 	sts	0x016D, r25
    19e2:	80 93 6c 01 	sts	0x016C, r24
    19e6:	0d c0       	rjmp	.+26     	; 0x1a02 <EX_INT_VidSetCallBack+0x62>
	case 1 :INT1_PFUNC = ptr ;             break ;
    19e8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ea:	9b 81       	ldd	r25, Y+3	; 0x03
    19ec:	90 93 6f 01 	sts	0x016F, r25
    19f0:	80 93 6e 01 	sts	0x016E, r24
    19f4:	06 c0       	rjmp	.+12     	; 0x1a02 <EX_INT_VidSetCallBack+0x62>
	case 2 :INT2_PFUNC = ptr ;             break ;
    19f6:	8a 81       	ldd	r24, Y+2	; 0x02
    19f8:	9b 81       	ldd	r25, Y+3	; 0x03
    19fa:	90 93 71 01 	sts	0x0171, r25
    19fe:	80 93 70 01 	sts	0x0170, r24
	}
}
    1a02:	0f 90       	pop	r0
    1a04:	0f 90       	pop	r0
    1a06:	0f 90       	pop	r0
    1a08:	0f 90       	pop	r0
    1a0a:	0f 90       	pop	r0
    1a0c:	cf 91       	pop	r28
    1a0e:	df 91       	pop	r29
    1a10:	08 95       	ret

00001a12 <EX_INT_VidINIT>:
/**********************************************************/
void EX_INT_VidINIT(void){
    1a12:	df 93       	push	r29
    1a14:	cf 93       	push	r28
    1a16:	cd b7       	in	r28, 0x3d	; 61
    1a18:	de b7       	in	r29, 0x3e	; 62
        SET_BIT(MCUCR,ISC01);
    }
#endif

#if INT1      //to define edge of interrupt 1
    if (INT1_SENSE == LOW_LEVEL) {
    1a1a:	80 91 69 01 	lds	r24, 0x0169
    1a1e:	83 30       	cpi	r24, 0x03	; 3
    1a20:	79 f4       	brne	.+30     	; 0x1a40 <EX_INT_VidINIT+0x2e>
        //INT1 sense control = low level
    	CLR_BIT(MCUCR,ISC10);
    1a22:	a5 e5       	ldi	r26, 0x55	; 85
    1a24:	b0 e0       	ldi	r27, 0x00	; 0
    1a26:	e5 e5       	ldi	r30, 0x55	; 85
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	80 81       	ld	r24, Z
    1a2c:	8b 7f       	andi	r24, 0xFB	; 251
    1a2e:	8c 93       	st	X, r24
    	CLR_BIT(MCUCR,ISC11);
    1a30:	a5 e5       	ldi	r26, 0x55	; 85
    1a32:	b0 e0       	ldi	r27, 0x00	; 0
    1a34:	e5 e5       	ldi	r30, 0x55	; 85
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	80 81       	ld	r24, Z
    1a3a:	87 7f       	andi	r24, 0xF7	; 247
    1a3c:	8c 93       	st	X, r24
    1a3e:	42 c0       	rjmp	.+132    	; 0x1ac4 <EX_INT_VidINIT+0xb2>
    }
	else if (INT1_SENSE == CHANG_EDGE) {
    1a40:	80 91 69 01 	lds	r24, 0x0169
    1a44:	84 30       	cpi	r24, 0x04	; 4
    1a46:	79 f4       	brne	.+30     	; 0x1a66 <EX_INT_VidINIT+0x54>
		//INT1 sense control = change edge
    	SET_BIT(MCUCR,ISC10);
    1a48:	a5 e5       	ldi	r26, 0x55	; 85
    1a4a:	b0 e0       	ldi	r27, 0x00	; 0
    1a4c:	e5 e5       	ldi	r30, 0x55	; 85
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	80 81       	ld	r24, Z
    1a52:	84 60       	ori	r24, 0x04	; 4
    1a54:	8c 93       	st	X, r24
    	CLR_BIT(MCUCR,ISC11);
    1a56:	a5 e5       	ldi	r26, 0x55	; 85
    1a58:	b0 e0       	ldi	r27, 0x00	; 0
    1a5a:	e5 e5       	ldi	r30, 0x55	; 85
    1a5c:	f0 e0       	ldi	r31, 0x00	; 0
    1a5e:	80 81       	ld	r24, Z
    1a60:	87 7f       	andi	r24, 0xF7	; 247
    1a62:	8c 93       	st	X, r24
    1a64:	2f c0       	rjmp	.+94     	; 0x1ac4 <EX_INT_VidINIT+0xb2>
    }
    else if (INT1_SENSE == FALLING){
    1a66:	80 91 69 01 	lds	r24, 0x0169
    1a6a:	81 30       	cpi	r24, 0x01	; 1
    1a6c:	c9 f4       	brne	.+50     	; 0x1aa0 <EX_INT_VidINIT+0x8e>
		//INT1 sense control = falling edge
        DIO_VidSetPinDirection(PORTD,PD3,LOW);     //to define bit interrupt 1 as input
    1a6e:	83 e0       	ldi	r24, 0x03	; 3
    1a70:	63 e0       	ldi	r22, 0x03	; 3
    1a72:	40 e0       	ldi	r20, 0x00	; 0
    1a74:	0e 94 4f 09 	call	0x129e	; 0x129e <DIO_VidSetPinDirection>
        DIO_VidSetPinValue(PORTD,PD3,HIGH);        // pull up resistor on interrupt 1
    1a78:	83 e0       	ldi	r24, 0x03	; 3
    1a7a:	63 e0       	ldi	r22, 0x03	; 3
    1a7c:	41 e0       	ldi	r20, 0x01	; 1
    1a7e:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_VidSetPinValue>
		CLR_BIT(MCUCR,ISC10);
    1a82:	a5 e5       	ldi	r26, 0x55	; 85
    1a84:	b0 e0       	ldi	r27, 0x00	; 0
    1a86:	e5 e5       	ldi	r30, 0x55	; 85
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	80 81       	ld	r24, Z
    1a8c:	8b 7f       	andi	r24, 0xFB	; 251
    1a8e:	8c 93       	st	X, r24
		SET_BIT(MCUCR,ISC11);
    1a90:	a5 e5       	ldi	r26, 0x55	; 85
    1a92:	b0 e0       	ldi	r27, 0x00	; 0
    1a94:	e5 e5       	ldi	r30, 0x55	; 85
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	80 81       	ld	r24, Z
    1a9a:	88 60       	ori	r24, 0x08	; 8
    1a9c:	8c 93       	st	X, r24
    1a9e:	12 c0       	rjmp	.+36     	; 0x1ac4 <EX_INT_VidINIT+0xb2>
    }
    else if (INT1_SENSE == RASING) {
    1aa0:	80 91 69 01 	lds	r24, 0x0169
    1aa4:	82 30       	cpi	r24, 0x02	; 2
    1aa6:	71 f4       	brne	.+28     	; 0x1ac4 <EX_INT_VidINIT+0xb2>
        //INT1 sense control = raising edge
    	SET_BIT(MCUCR,ISC10);
    1aa8:	a5 e5       	ldi	r26, 0x55	; 85
    1aaa:	b0 e0       	ldi	r27, 0x00	; 0
    1aac:	e5 e5       	ldi	r30, 0x55	; 85
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	80 81       	ld	r24, Z
    1ab2:	84 60       	ori	r24, 0x04	; 4
    1ab4:	8c 93       	st	X, r24
        SET_BIT(MCUCR,ISC11);
    1ab6:	a5 e5       	ldi	r26, 0x55	; 85
    1ab8:	b0 e0       	ldi	r27, 0x00	; 0
    1aba:	e5 e5       	ldi	r30, 0x55	; 85
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	80 81       	ld	r24, Z
    1ac0:	88 60       	ori	r24, 0x08	; 8
    1ac2:	8c 93       	st	X, r24
    else if (INT2_SENSE == RASING) {
    	SET_BIT(MCUCSR,ISC2);        //INT2 sense control = raising edge
    }
#endif

}
    1ac4:	cf 91       	pop	r28
    1ac6:	df 91       	pop	r29
    1ac8:	08 95       	ret

00001aca <EX_PIE_VidEnable>:

/**********************************************************/
void EX_PIE_VidEnable(u8 COPY_U8INT_NUM){
    1aca:	df 93       	push	r29
    1acc:	cf 93       	push	r28
    1ace:	00 d0       	rcall	.+0      	; 0x1ad0 <EX_PIE_VidEnable+0x6>
    1ad0:	0f 92       	push	r0
    1ad2:	cd b7       	in	r28, 0x3d	; 61
    1ad4:	de b7       	in	r29, 0x3e	; 62
    1ad6:	89 83       	std	Y+1, r24	; 0x01
	switch(COPY_U8INT_NUM) {
    1ad8:	89 81       	ldd	r24, Y+1	; 0x01
    1ada:	28 2f       	mov	r18, r24
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	3b 83       	std	Y+3, r19	; 0x03
    1ae0:	2a 83       	std	Y+2, r18	; 0x02
    1ae2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ae6:	81 30       	cpi	r24, 0x01	; 1
    1ae8:	91 05       	cpc	r25, r1
    1aea:	89 f0       	breq	.+34     	; 0x1b0e <EX_PIE_VidEnable+0x44>
    1aec:	2a 81       	ldd	r18, Y+2	; 0x02
    1aee:	3b 81       	ldd	r19, Y+3	; 0x03
    1af0:	22 30       	cpi	r18, 0x02	; 2
    1af2:	31 05       	cpc	r19, r1
    1af4:	a1 f0       	breq	.+40     	; 0x1b1e <EX_PIE_VidEnable+0x54>
    1af6:	8a 81       	ldd	r24, Y+2	; 0x02
    1af8:	9b 81       	ldd	r25, Y+3	; 0x03
    1afa:	00 97       	sbiw	r24, 0x00	; 0
    1afc:	b9 f4       	brne	.+46     	; 0x1b2c <EX_PIE_VidEnable+0x62>
	case 0 : SET_BIT(GICR,INT0);  break ;   //INT0 Enable
    1afe:	ab e5       	ldi	r26, 0x5B	; 91
    1b00:	b0 e0       	ldi	r27, 0x00	; 0
    1b02:	eb e5       	ldi	r30, 0x5B	; 91
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	80 81       	ld	r24, Z
    1b08:	81 60       	ori	r24, 0x01	; 1
    1b0a:	8c 93       	st	X, r24
    1b0c:	0f c0       	rjmp	.+30     	; 0x1b2c <EX_PIE_VidEnable+0x62>
	case 1 : SET_BIT(GICR,INT1);  break ;   //INT1 Enable
    1b0e:	ab e5       	ldi	r26, 0x5B	; 91
    1b10:	b0 e0       	ldi	r27, 0x00	; 0
    1b12:	eb e5       	ldi	r30, 0x5B	; 91
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	80 81       	ld	r24, Z
    1b18:	80 68       	ori	r24, 0x80	; 128
    1b1a:	8c 93       	st	X, r24
    1b1c:	07 c0       	rjmp	.+14     	; 0x1b2c <EX_PIE_VidEnable+0x62>
	case 2 : SET_BIT(GICR,INT2);  break ;   //INT2 Enable
    1b1e:	ab e5       	ldi	r26, 0x5B	; 91
    1b20:	b0 e0       	ldi	r27, 0x00	; 0
    1b22:	eb e5       	ldi	r30, 0x5B	; 91
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	80 81       	ld	r24, Z
    1b28:	81 60       	ori	r24, 0x01	; 1
    1b2a:	8c 93       	st	X, r24
	}
}
    1b2c:	0f 90       	pop	r0
    1b2e:	0f 90       	pop	r0
    1b30:	0f 90       	pop	r0
    1b32:	cf 91       	pop	r28
    1b34:	df 91       	pop	r29
    1b36:	08 95       	ret

00001b38 <EX_PIE_VidDisable>:

void EX_PIE_VidDisable(u8 COPY_U8INT_NUM){
    1b38:	df 93       	push	r29
    1b3a:	cf 93       	push	r28
    1b3c:	00 d0       	rcall	.+0      	; 0x1b3e <EX_PIE_VidDisable+0x6>
    1b3e:	0f 92       	push	r0
    1b40:	cd b7       	in	r28, 0x3d	; 61
    1b42:	de b7       	in	r29, 0x3e	; 62
    1b44:	89 83       	std	Y+1, r24	; 0x01
	switch(COPY_U8INT_NUM) {
    1b46:	89 81       	ldd	r24, Y+1	; 0x01
    1b48:	28 2f       	mov	r18, r24
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	3b 83       	std	Y+3, r19	; 0x03
    1b4e:	2a 83       	std	Y+2, r18	; 0x02
    1b50:	8a 81       	ldd	r24, Y+2	; 0x02
    1b52:	9b 81       	ldd	r25, Y+3	; 0x03
    1b54:	81 30       	cpi	r24, 0x01	; 1
    1b56:	91 05       	cpc	r25, r1
    1b58:	89 f0       	breq	.+34     	; 0x1b7c <EX_PIE_VidDisable+0x44>
    1b5a:	2a 81       	ldd	r18, Y+2	; 0x02
    1b5c:	3b 81       	ldd	r19, Y+3	; 0x03
    1b5e:	22 30       	cpi	r18, 0x02	; 2
    1b60:	31 05       	cpc	r19, r1
    1b62:	a1 f0       	breq	.+40     	; 0x1b8c <EX_PIE_VidDisable+0x54>
    1b64:	8a 81       	ldd	r24, Y+2	; 0x02
    1b66:	9b 81       	ldd	r25, Y+3	; 0x03
    1b68:	00 97       	sbiw	r24, 0x00	; 0
    1b6a:	b9 f4       	brne	.+46     	; 0x1b9a <EX_PIE_VidDisable+0x62>
	case 0 : CLR_BIT(GICR,INT0);  break ;   //INT0 Enable
    1b6c:	ab e5       	ldi	r26, 0x5B	; 91
    1b6e:	b0 e0       	ldi	r27, 0x00	; 0
    1b70:	eb e5       	ldi	r30, 0x5B	; 91
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	80 81       	ld	r24, Z
    1b76:	8e 7f       	andi	r24, 0xFE	; 254
    1b78:	8c 93       	st	X, r24
    1b7a:	0f c0       	rjmp	.+30     	; 0x1b9a <EX_PIE_VidDisable+0x62>
	case 1 : CLR_BIT(GICR,INT1);  break ;   //INT1 Enable
    1b7c:	ab e5       	ldi	r26, 0x5B	; 91
    1b7e:	b0 e0       	ldi	r27, 0x00	; 0
    1b80:	eb e5       	ldi	r30, 0x5B	; 91
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	80 81       	ld	r24, Z
    1b86:	8f 77       	andi	r24, 0x7F	; 127
    1b88:	8c 93       	st	X, r24
    1b8a:	07 c0       	rjmp	.+14     	; 0x1b9a <EX_PIE_VidDisable+0x62>
	case 2 : CLR_BIT(GICR,INT2);  break ;   //INT2 Enable
    1b8c:	ab e5       	ldi	r26, 0x5B	; 91
    1b8e:	b0 e0       	ldi	r27, 0x00	; 0
    1b90:	eb e5       	ldi	r30, 0x5B	; 91
    1b92:	f0 e0       	ldi	r31, 0x00	; 0
    1b94:	80 81       	ld	r24, Z
    1b96:	8e 7f       	andi	r24, 0xFE	; 254
    1b98:	8c 93       	st	X, r24
	}
}
    1b9a:	0f 90       	pop	r0
    1b9c:	0f 90       	pop	r0
    1b9e:	0f 90       	pop	r0
    1ba0:	cf 91       	pop	r28
    1ba2:	df 91       	pop	r29
    1ba4:	08 95       	ret

00001ba6 <__vector_1>:

/**********************************************************/
void __vector_1(void){
    1ba6:	1f 92       	push	r1
    1ba8:	0f 92       	push	r0
    1baa:	0f b6       	in	r0, 0x3f	; 63
    1bac:	0f 92       	push	r0
    1bae:	11 24       	eor	r1, r1
    1bb0:	2f 93       	push	r18
    1bb2:	3f 93       	push	r19
    1bb4:	4f 93       	push	r20
    1bb6:	5f 93       	push	r21
    1bb8:	6f 93       	push	r22
    1bba:	7f 93       	push	r23
    1bbc:	8f 93       	push	r24
    1bbe:	9f 93       	push	r25
    1bc0:	af 93       	push	r26
    1bc2:	bf 93       	push	r27
    1bc4:	ef 93       	push	r30
    1bc6:	ff 93       	push	r31
    1bc8:	df 93       	push	r29
    1bca:	cf 93       	push	r28
    1bcc:	cd b7       	in	r28, 0x3d	; 61
    1bce:	de b7       	in	r29, 0x3e	; 62
	//to toggle led
	INT0_PFUNC();
    1bd0:	e0 91 6c 01 	lds	r30, 0x016C
    1bd4:	f0 91 6d 01 	lds	r31, 0x016D
    1bd8:	09 95       	icall
}
    1bda:	cf 91       	pop	r28
    1bdc:	df 91       	pop	r29
    1bde:	ff 91       	pop	r31
    1be0:	ef 91       	pop	r30
    1be2:	bf 91       	pop	r27
    1be4:	af 91       	pop	r26
    1be6:	9f 91       	pop	r25
    1be8:	8f 91       	pop	r24
    1bea:	7f 91       	pop	r23
    1bec:	6f 91       	pop	r22
    1bee:	5f 91       	pop	r21
    1bf0:	4f 91       	pop	r20
    1bf2:	3f 91       	pop	r19
    1bf4:	2f 91       	pop	r18
    1bf6:	0f 90       	pop	r0
    1bf8:	0f be       	out	0x3f, r0	; 63
    1bfa:	0f 90       	pop	r0
    1bfc:	1f 90       	pop	r1
    1bfe:	18 95       	reti

00001c00 <__vector_2>:

void __vector_2(void){
    1c00:	1f 92       	push	r1
    1c02:	0f 92       	push	r0
    1c04:	0f b6       	in	r0, 0x3f	; 63
    1c06:	0f 92       	push	r0
    1c08:	11 24       	eor	r1, r1
    1c0a:	2f 93       	push	r18
    1c0c:	3f 93       	push	r19
    1c0e:	4f 93       	push	r20
    1c10:	5f 93       	push	r21
    1c12:	6f 93       	push	r22
    1c14:	7f 93       	push	r23
    1c16:	8f 93       	push	r24
    1c18:	9f 93       	push	r25
    1c1a:	af 93       	push	r26
    1c1c:	bf 93       	push	r27
    1c1e:	ef 93       	push	r30
    1c20:	ff 93       	push	r31
    1c22:	df 93       	push	r29
    1c24:	cf 93       	push	r28
    1c26:	cd b7       	in	r28, 0x3d	; 61
    1c28:	de b7       	in	r29, 0x3e	; 62
	//to toggle led
	INT1_PFUNC();
    1c2a:	e0 91 6e 01 	lds	r30, 0x016E
    1c2e:	f0 91 6f 01 	lds	r31, 0x016F
    1c32:	09 95       	icall
}
    1c34:	cf 91       	pop	r28
    1c36:	df 91       	pop	r29
    1c38:	ff 91       	pop	r31
    1c3a:	ef 91       	pop	r30
    1c3c:	bf 91       	pop	r27
    1c3e:	af 91       	pop	r26
    1c40:	9f 91       	pop	r25
    1c42:	8f 91       	pop	r24
    1c44:	7f 91       	pop	r23
    1c46:	6f 91       	pop	r22
    1c48:	5f 91       	pop	r21
    1c4a:	4f 91       	pop	r20
    1c4c:	3f 91       	pop	r19
    1c4e:	2f 91       	pop	r18
    1c50:	0f 90       	pop	r0
    1c52:	0f be       	out	0x3f, r0	; 63
    1c54:	0f 90       	pop	r0
    1c56:	1f 90       	pop	r1
    1c58:	18 95       	reti

00001c5a <__vector_3>:

void __vector_3(void){
    1c5a:	1f 92       	push	r1
    1c5c:	0f 92       	push	r0
    1c5e:	0f b6       	in	r0, 0x3f	; 63
    1c60:	0f 92       	push	r0
    1c62:	11 24       	eor	r1, r1
    1c64:	2f 93       	push	r18
    1c66:	3f 93       	push	r19
    1c68:	4f 93       	push	r20
    1c6a:	5f 93       	push	r21
    1c6c:	6f 93       	push	r22
    1c6e:	7f 93       	push	r23
    1c70:	8f 93       	push	r24
    1c72:	9f 93       	push	r25
    1c74:	af 93       	push	r26
    1c76:	bf 93       	push	r27
    1c78:	ef 93       	push	r30
    1c7a:	ff 93       	push	r31
    1c7c:	df 93       	push	r29
    1c7e:	cf 93       	push	r28
    1c80:	cd b7       	in	r28, 0x3d	; 61
    1c82:	de b7       	in	r29, 0x3e	; 62
	//to toggle led
	INT2_PFUNC();
    1c84:	e0 91 70 01 	lds	r30, 0x0170
    1c88:	f0 91 71 01 	lds	r31, 0x0171
    1c8c:	09 95       	icall
}
    1c8e:	cf 91       	pop	r28
    1c90:	df 91       	pop	r29
    1c92:	ff 91       	pop	r31
    1c94:	ef 91       	pop	r30
    1c96:	bf 91       	pop	r27
    1c98:	af 91       	pop	r26
    1c9a:	9f 91       	pop	r25
    1c9c:	8f 91       	pop	r24
    1c9e:	7f 91       	pop	r23
    1ca0:	6f 91       	pop	r22
    1ca2:	5f 91       	pop	r21
    1ca4:	4f 91       	pop	r20
    1ca6:	3f 91       	pop	r19
    1ca8:	2f 91       	pop	r18
    1caa:	0f 90       	pop	r0
    1cac:	0f be       	out	0x3f, r0	; 63
    1cae:	0f 90       	pop	r0
    1cb0:	1f 90       	pop	r1
    1cb2:	18 95       	reti

00001cb4 <EX_INT_VidSetEdge>:

void EX_INT_VidSetEdge(u8 COPY_U8INT_NUM , u8 COPY_U8INT_EDGE){
    1cb4:	df 93       	push	r29
    1cb6:	cf 93       	push	r28
    1cb8:	00 d0       	rcall	.+0      	; 0x1cba <EX_INT_VidSetEdge+0x6>
    1cba:	00 d0       	rcall	.+0      	; 0x1cbc <EX_INT_VidSetEdge+0x8>
    1cbc:	cd b7       	in	r28, 0x3d	; 61
    1cbe:	de b7       	in	r29, 0x3e	; 62
    1cc0:	89 83       	std	Y+1, r24	; 0x01
    1cc2:	6a 83       	std	Y+2, r22	; 0x02
	switch (COPY_U8INT_EDGE){
    1cc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc6:	28 2f       	mov	r18, r24
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	3c 83       	std	Y+4, r19	; 0x04
    1ccc:	2b 83       	std	Y+3, r18	; 0x03
    1cce:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd2:	82 30       	cpi	r24, 0x02	; 2
    1cd4:	91 05       	cpc	r25, r1
    1cd6:	09 f4       	brne	.+2      	; 0x1cda <EX_INT_VidSetEdge+0x26>
    1cd8:	64 c0       	rjmp	.+200    	; 0x1da2 <EX_INT_VidSetEdge+0xee>
    1cda:	2b 81       	ldd	r18, Y+3	; 0x03
    1cdc:	3c 81       	ldd	r19, Y+4	; 0x04
    1cde:	23 30       	cpi	r18, 0x03	; 3
    1ce0:	31 05       	cpc	r19, r1
    1ce2:	34 f4       	brge	.+12     	; 0x1cf0 <EX_INT_VidSetEdge+0x3c>
    1ce4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce8:	81 30       	cpi	r24, 0x01	; 1
    1cea:	91 05       	cpc	r25, r1
    1cec:	71 f0       	breq	.+28     	; 0x1d0a <EX_INT_VidSetEdge+0x56>
    1cee:	cc c0       	rjmp	.+408    	; 0x1e88 <EX_INT_VidSetEdge+0x1d4>
    1cf0:	2b 81       	ldd	r18, Y+3	; 0x03
    1cf2:	3c 81       	ldd	r19, Y+4	; 0x04
    1cf4:	23 30       	cpi	r18, 0x03	; 3
    1cf6:	31 05       	cpc	r19, r1
    1cf8:	09 f4       	brne	.+2      	; 0x1cfc <EX_INT_VidSetEdge+0x48>
    1cfa:	81 c0       	rjmp	.+258    	; 0x1dfe <EX_INT_VidSetEdge+0x14a>
    1cfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfe:	9c 81       	ldd	r25, Y+4	; 0x04
    1d00:	84 30       	cpi	r24, 0x04	; 4
    1d02:	91 05       	cpc	r25, r1
    1d04:	09 f4       	brne	.+2      	; 0x1d08 <EX_INT_VidSetEdge+0x54>
    1d06:	9e c0       	rjmp	.+316    	; 0x1e44 <EX_INT_VidSetEdge+0x190>
    1d08:	bf c0       	rjmp	.+382    	; 0x1e88 <EX_INT_VidSetEdge+0x1d4>
	case 1 :
		if (COPY_U8INT_NUM == 0 ){
    1d0a:	89 81       	ldd	r24, Y+1	; 0x01
    1d0c:	88 23       	and	r24, r24
    1d0e:	c1 f4       	brne	.+48     	; 0x1d40 <EX_INT_VidSetEdge+0x8c>
			//INT0 sense control = falling edge
	        DIO_VidSetPinDirection(PORTD,PD2,LOW);     //to define bit interrupt 0 as input
    1d10:	83 e0       	ldi	r24, 0x03	; 3
    1d12:	62 e0       	ldi	r22, 0x02	; 2
    1d14:	40 e0       	ldi	r20, 0x00	; 0
    1d16:	0e 94 4f 09 	call	0x129e	; 0x129e <DIO_VidSetPinDirection>
	        DIO_VidSetPinValue(PORTD,PD2,HIGH);        // pull up resistor on interrupt 0
    1d1a:	83 e0       	ldi	r24, 0x03	; 3
    1d1c:	62 e0       	ldi	r22, 0x02	; 2
    1d1e:	41 e0       	ldi	r20, 0x01	; 1
    1d20:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_VidSetPinValue>
			CLR_BIT(MCUCR,ISC00);
    1d24:	a5 e5       	ldi	r26, 0x55	; 85
    1d26:	b0 e0       	ldi	r27, 0x00	; 0
    1d28:	e5 e5       	ldi	r30, 0x55	; 85
    1d2a:	f0 e0       	ldi	r31, 0x00	; 0
    1d2c:	80 81       	ld	r24, Z
    1d2e:	8e 7f       	andi	r24, 0xFE	; 254
    1d30:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC01);
    1d32:	a5 e5       	ldi	r26, 0x55	; 85
    1d34:	b0 e0       	ldi	r27, 0x00	; 0
    1d36:	e5 e5       	ldi	r30, 0x55	; 85
    1d38:	f0 e0       	ldi	r31, 0x00	; 0
    1d3a:	80 81       	ld	r24, Z
    1d3c:	82 60       	ori	r24, 0x02	; 2
    1d3e:	8c 93       	st	X, r24
		}
		if (COPY_U8INT_NUM == 1 ){
    1d40:	89 81       	ldd	r24, Y+1	; 0x01
    1d42:	81 30       	cpi	r24, 0x01	; 1
    1d44:	c1 f4       	brne	.+48     	; 0x1d76 <EX_INT_VidSetEdge+0xc2>
			//INT1 sense control = falling edge
	        DIO_VidSetPinDirection(PORTD,PD3,LOW);     //to define bit interrupt 1 as input
    1d46:	83 e0       	ldi	r24, 0x03	; 3
    1d48:	63 e0       	ldi	r22, 0x03	; 3
    1d4a:	40 e0       	ldi	r20, 0x00	; 0
    1d4c:	0e 94 4f 09 	call	0x129e	; 0x129e <DIO_VidSetPinDirection>
	        DIO_VidSetPinValue(PORTD,PD3,HIGH);        // pull up resistor on interrupt 1
    1d50:	83 e0       	ldi	r24, 0x03	; 3
    1d52:	63 e0       	ldi	r22, 0x03	; 3
    1d54:	41 e0       	ldi	r20, 0x01	; 1
    1d56:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_VidSetPinValue>
			CLR_BIT(MCUCR,ISC10);
    1d5a:	a5 e5       	ldi	r26, 0x55	; 85
    1d5c:	b0 e0       	ldi	r27, 0x00	; 0
    1d5e:	e5 e5       	ldi	r30, 0x55	; 85
    1d60:	f0 e0       	ldi	r31, 0x00	; 0
    1d62:	80 81       	ld	r24, Z
    1d64:	8b 7f       	andi	r24, 0xFB	; 251
    1d66:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC11);
    1d68:	a5 e5       	ldi	r26, 0x55	; 85
    1d6a:	b0 e0       	ldi	r27, 0x00	; 0
    1d6c:	e5 e5       	ldi	r30, 0x55	; 85
    1d6e:	f0 e0       	ldi	r31, 0x00	; 0
    1d70:	80 81       	ld	r24, Z
    1d72:	88 60       	ori	r24, 0x08	; 8
    1d74:	8c 93       	st	X, r24
		}
		if (COPY_U8INT_NUM == 2 ){
    1d76:	89 81       	ldd	r24, Y+1	; 0x01
    1d78:	82 30       	cpi	r24, 0x02	; 2
    1d7a:	09 f0       	breq	.+2      	; 0x1d7e <EX_INT_VidSetEdge+0xca>
    1d7c:	85 c0       	rjmp	.+266    	; 0x1e88 <EX_INT_VidSetEdge+0x1d4>
	        DIO_VidSetPinDirection(PORTB,PB2,LOW);     //to define bit interrupt 2 as input
    1d7e:	81 e0       	ldi	r24, 0x01	; 1
    1d80:	62 e0       	ldi	r22, 0x02	; 2
    1d82:	40 e0       	ldi	r20, 0x00	; 0
    1d84:	0e 94 4f 09 	call	0x129e	; 0x129e <DIO_VidSetPinDirection>
	        DIO_VidSetPinValue(PORTB,PB2,HIGH);        // pull up resistor on interrupt 2
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	62 e0       	ldi	r22, 0x02	; 2
    1d8c:	41 e0       	ldi	r20, 0x01	; 1
    1d8e:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_VidSetPinValue>
			CLR_BIT(MCUCSR,ISC2);		//INT2 sense control = falling edge
    1d92:	a4 e5       	ldi	r26, 0x54	; 84
    1d94:	b0 e0       	ldi	r27, 0x00	; 0
    1d96:	e4 e5       	ldi	r30, 0x54	; 84
    1d98:	f0 e0       	ldi	r31, 0x00	; 0
    1d9a:	80 81       	ld	r24, Z
    1d9c:	8f 7b       	andi	r24, 0xBF	; 191
    1d9e:	8c 93       	st	X, r24
    1da0:	73 c0       	rjmp	.+230    	; 0x1e88 <EX_INT_VidSetEdge+0x1d4>
		}
		break ;
	case 2 :
		if (COPY_U8INT_NUM == 0 ){
    1da2:	89 81       	ldd	r24, Y+1	; 0x01
    1da4:	88 23       	and	r24, r24
    1da6:	71 f4       	brne	.+28     	; 0x1dc4 <EX_INT_VidSetEdge+0x110>
	        //INT0 sense control = raising edge
	    	SET_BIT(MCUCR,ISC00);
    1da8:	a5 e5       	ldi	r26, 0x55	; 85
    1daa:	b0 e0       	ldi	r27, 0x00	; 0
    1dac:	e5 e5       	ldi	r30, 0x55	; 85
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	80 81       	ld	r24, Z
    1db2:	81 60       	ori	r24, 0x01	; 1
    1db4:	8c 93       	st	X, r24
	        SET_BIT(MCUCR,ISC01);
    1db6:	a5 e5       	ldi	r26, 0x55	; 85
    1db8:	b0 e0       	ldi	r27, 0x00	; 0
    1dba:	e5 e5       	ldi	r30, 0x55	; 85
    1dbc:	f0 e0       	ldi	r31, 0x00	; 0
    1dbe:	80 81       	ld	r24, Z
    1dc0:	82 60       	ori	r24, 0x02	; 2
    1dc2:	8c 93       	st	X, r24
		}
		if (COPY_U8INT_NUM == 1 ){
    1dc4:	89 81       	ldd	r24, Y+1	; 0x01
    1dc6:	81 30       	cpi	r24, 0x01	; 1
    1dc8:	71 f4       	brne	.+28     	; 0x1de6 <EX_INT_VidSetEdge+0x132>
	        //INT1 sense control = raising edge
	    	SET_BIT(MCUCR,ISC10);
    1dca:	a5 e5       	ldi	r26, 0x55	; 85
    1dcc:	b0 e0       	ldi	r27, 0x00	; 0
    1dce:	e5 e5       	ldi	r30, 0x55	; 85
    1dd0:	f0 e0       	ldi	r31, 0x00	; 0
    1dd2:	80 81       	ld	r24, Z
    1dd4:	84 60       	ori	r24, 0x04	; 4
    1dd6:	8c 93       	st	X, r24
	        SET_BIT(MCUCR,ISC11);
    1dd8:	a5 e5       	ldi	r26, 0x55	; 85
    1dda:	b0 e0       	ldi	r27, 0x00	; 0
    1ddc:	e5 e5       	ldi	r30, 0x55	; 85
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	80 81       	ld	r24, Z
    1de2:	88 60       	ori	r24, 0x08	; 8
    1de4:	8c 93       	st	X, r24
		}
		if (COPY_U8INT_NUM == 2 ){
    1de6:	89 81       	ldd	r24, Y+1	; 0x01
    1de8:	82 30       	cpi	r24, 0x02	; 2
    1dea:	09 f0       	breq	.+2      	; 0x1dee <EX_INT_VidSetEdge+0x13a>
    1dec:	4d c0       	rjmp	.+154    	; 0x1e88 <EX_INT_VidSetEdge+0x1d4>
	    	SET_BIT(MCUCSR,ISC2);        //INT2 sense control = raising edge
    1dee:	a4 e5       	ldi	r26, 0x54	; 84
    1df0:	b0 e0       	ldi	r27, 0x00	; 0
    1df2:	e4 e5       	ldi	r30, 0x54	; 84
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	80 81       	ld	r24, Z
    1df8:	80 64       	ori	r24, 0x40	; 64
    1dfa:	8c 93       	st	X, r24
    1dfc:	45 c0       	rjmp	.+138    	; 0x1e88 <EX_INT_VidSetEdge+0x1d4>
		}
	    break ;
	case 3 :
		if (COPY_U8INT_NUM == 0 ){
    1dfe:	89 81       	ldd	r24, Y+1	; 0x01
    1e00:	88 23       	and	r24, r24
    1e02:	71 f4       	brne	.+28     	; 0x1e20 <EX_INT_VidSetEdge+0x16c>
			//INT0 sense control = low level
	    	CLR_BIT(MCUCR,ISC00);
    1e04:	a5 e5       	ldi	r26, 0x55	; 85
    1e06:	b0 e0       	ldi	r27, 0x00	; 0
    1e08:	e5 e5       	ldi	r30, 0x55	; 85
    1e0a:	f0 e0       	ldi	r31, 0x00	; 0
    1e0c:	80 81       	ld	r24, Z
    1e0e:	8e 7f       	andi	r24, 0xFE	; 254
    1e10:	8c 93       	st	X, r24
	    	CLR_BIT(MCUCR,ISC01);
    1e12:	a5 e5       	ldi	r26, 0x55	; 85
    1e14:	b0 e0       	ldi	r27, 0x00	; 0
    1e16:	e5 e5       	ldi	r30, 0x55	; 85
    1e18:	f0 e0       	ldi	r31, 0x00	; 0
    1e1a:	80 81       	ld	r24, Z
    1e1c:	8d 7f       	andi	r24, 0xFD	; 253
    1e1e:	8c 93       	st	X, r24
		}
		if (COPY_U8INT_NUM == 1 ){
    1e20:	89 81       	ldd	r24, Y+1	; 0x01
    1e22:	81 30       	cpi	r24, 0x01	; 1
    1e24:	89 f5       	brne	.+98     	; 0x1e88 <EX_INT_VidSetEdge+0x1d4>
	        //INT1 sense control = low level
	    	CLR_BIT(MCUCR,ISC10);
    1e26:	a5 e5       	ldi	r26, 0x55	; 85
    1e28:	b0 e0       	ldi	r27, 0x00	; 0
    1e2a:	e5 e5       	ldi	r30, 0x55	; 85
    1e2c:	f0 e0       	ldi	r31, 0x00	; 0
    1e2e:	80 81       	ld	r24, Z
    1e30:	8b 7f       	andi	r24, 0xFB	; 251
    1e32:	8c 93       	st	X, r24
	    	CLR_BIT(MCUCR,ISC11);
    1e34:	a5 e5       	ldi	r26, 0x55	; 85
    1e36:	b0 e0       	ldi	r27, 0x00	; 0
    1e38:	e5 e5       	ldi	r30, 0x55	; 85
    1e3a:	f0 e0       	ldi	r31, 0x00	; 0
    1e3c:	80 81       	ld	r24, Z
    1e3e:	87 7f       	andi	r24, 0xF7	; 247
    1e40:	8c 93       	st	X, r24
    1e42:	22 c0       	rjmp	.+68     	; 0x1e88 <EX_INT_VidSetEdge+0x1d4>
		}
		break ;
	case 4 :
		if (COPY_U8INT_NUM == 0 ){
    1e44:	89 81       	ldd	r24, Y+1	; 0x01
    1e46:	88 23       	and	r24, r24
    1e48:	71 f4       	brne	.+28     	; 0x1e66 <EX_INT_VidSetEdge+0x1b2>
			//INT0 sense control = change edge
	    	SET_BIT(MCUCR,ISC00);
    1e4a:	a5 e5       	ldi	r26, 0x55	; 85
    1e4c:	b0 e0       	ldi	r27, 0x00	; 0
    1e4e:	e5 e5       	ldi	r30, 0x55	; 85
    1e50:	f0 e0       	ldi	r31, 0x00	; 0
    1e52:	80 81       	ld	r24, Z
    1e54:	81 60       	ori	r24, 0x01	; 1
    1e56:	8c 93       	st	X, r24
	    	CLR_BIT(MCUCR,ISC01);
    1e58:	a5 e5       	ldi	r26, 0x55	; 85
    1e5a:	b0 e0       	ldi	r27, 0x00	; 0
    1e5c:	e5 e5       	ldi	r30, 0x55	; 85
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	80 81       	ld	r24, Z
    1e62:	8d 7f       	andi	r24, 0xFD	; 253
    1e64:	8c 93       	st	X, r24
		}
		if (COPY_U8INT_NUM == 1 ){
    1e66:	89 81       	ldd	r24, Y+1	; 0x01
    1e68:	81 30       	cpi	r24, 0x01	; 1
    1e6a:	71 f4       	brne	.+28     	; 0x1e88 <EX_INT_VidSetEdge+0x1d4>
			//INT1 sense control = change edge
	    	SET_BIT(MCUCR,ISC10);
    1e6c:	a5 e5       	ldi	r26, 0x55	; 85
    1e6e:	b0 e0       	ldi	r27, 0x00	; 0
    1e70:	e5 e5       	ldi	r30, 0x55	; 85
    1e72:	f0 e0       	ldi	r31, 0x00	; 0
    1e74:	80 81       	ld	r24, Z
    1e76:	84 60       	ori	r24, 0x04	; 4
    1e78:	8c 93       	st	X, r24
	    	CLR_BIT(MCUCR,ISC11);
    1e7a:	a5 e5       	ldi	r26, 0x55	; 85
    1e7c:	b0 e0       	ldi	r27, 0x00	; 0
    1e7e:	e5 e5       	ldi	r30, 0x55	; 85
    1e80:	f0 e0       	ldi	r31, 0x00	; 0
    1e82:	80 81       	ld	r24, Z
    1e84:	87 7f       	andi	r24, 0xF7	; 247
    1e86:	8c 93       	st	X, r24
		}
		break ;
	}
}
    1e88:	0f 90       	pop	r0
    1e8a:	0f 90       	pop	r0
    1e8c:	0f 90       	pop	r0
    1e8e:	0f 90       	pop	r0
    1e90:	cf 91       	pop	r28
    1e92:	df 91       	pop	r29
    1e94:	08 95       	ret

00001e96 <GIE_VidEnable>:
#include "../Serivecs_driver/BIT_MATH.h"
#include "DIO_interface.h"
#include "INTERRUPT_Interface.h"
#include "INTERRUPT_private.h"

void GIE_VidEnable (void){
    1e96:	df 93       	push	r29
    1e98:	cf 93       	push	r28
    1e9a:	cd b7       	in	r28, 0x3d	; 61
    1e9c:	de b7       	in	r29, 0x3e	; 62
	//to enable general interrupt
	SET_BIT(SREG,I_BIT);
    1e9e:	af e5       	ldi	r26, 0x5F	; 95
    1ea0:	b0 e0       	ldi	r27, 0x00	; 0
    1ea2:	ef e5       	ldi	r30, 0x5F	; 95
    1ea4:	f0 e0       	ldi	r31, 0x00	; 0
    1ea6:	80 81       	ld	r24, Z
    1ea8:	80 68       	ori	r24, 0x80	; 128
    1eaa:	8c 93       	st	X, r24
}
    1eac:	cf 91       	pop	r28
    1eae:	df 91       	pop	r29
    1eb0:	08 95       	ret

00001eb2 <GIE_VidDisable>:

void GIE_VidDisable (void){
    1eb2:	df 93       	push	r29
    1eb4:	cf 93       	push	r28
    1eb6:	cd b7       	in	r28, 0x3d	; 61
    1eb8:	de b7       	in	r29, 0x3e	; 62
	//to disable general interrupt
	CLR_BIT(SREG,I_BIT);
    1eba:	af e5       	ldi	r26, 0x5F	; 95
    1ebc:	b0 e0       	ldi	r27, 0x00	; 0
    1ebe:	ef e5       	ldi	r30, 0x5F	; 95
    1ec0:	f0 e0       	ldi	r31, 0x00	; 0
    1ec2:	80 81       	ld	r24, Z
    1ec4:	8f 77       	andi	r24, 0x7F	; 127
    1ec6:	8c 93       	st	X, r24
}
    1ec8:	cf 91       	pop	r28
    1eca:	df 91       	pop	r29
    1ecc:	08 95       	ret

00001ece <TIMER_VidSetCallBack>:
static u16 PRE_SCALAR_TIMER2 ;
static f32 T_OV_TIMER2  ;
static f32 NUM_OV_TIMER2 ;
static f32 PRE_LOAD_TIMER2 ;

void TIMER_VidSetCallBack (u8 Copy_NumOfINT , void (*ptr)(void)){
    1ece:	df 93       	push	r29
    1ed0:	cf 93       	push	r28
    1ed2:	00 d0       	rcall	.+0      	; 0x1ed4 <TIMER_VidSetCallBack+0x6>
    1ed4:	00 d0       	rcall	.+0      	; 0x1ed6 <TIMER_VidSetCallBack+0x8>
    1ed6:	0f 92       	push	r0
    1ed8:	cd b7       	in	r28, 0x3d	; 61
    1eda:	de b7       	in	r29, 0x3e	; 62
    1edc:	89 83       	std	Y+1, r24	; 0x01
    1ede:	7b 83       	std	Y+3, r23	; 0x03
    1ee0:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_NumOfINT){
    1ee2:	89 81       	ldd	r24, Y+1	; 0x01
    1ee4:	28 2f       	mov	r18, r24
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	3d 83       	std	Y+5, r19	; 0x05
    1eea:	2c 83       	std	Y+4, r18	; 0x04
    1eec:	8c 81       	ldd	r24, Y+4	; 0x04
    1eee:	9d 81       	ldd	r25, Y+5	; 0x05
    1ef0:	81 30       	cpi	r24, 0x01	; 1
    1ef2:	91 05       	cpc	r25, r1
    1ef4:	81 f0       	breq	.+32     	; 0x1f16 <TIMER_VidSetCallBack+0x48>
    1ef6:	2c 81       	ldd	r18, Y+4	; 0x04
    1ef8:	3d 81       	ldd	r19, Y+5	; 0x05
    1efa:	22 30       	cpi	r18, 0x02	; 2
    1efc:	31 05       	cpc	r19, r1
    1efe:	91 f0       	breq	.+36     	; 0x1f24 <TIMER_VidSetCallBack+0x56>
    1f00:	8c 81       	ldd	r24, Y+4	; 0x04
    1f02:	9d 81       	ldd	r25, Y+5	; 0x05
    1f04:	00 97       	sbiw	r24, 0x00	; 0
    1f06:	a1 f4       	brne	.+40     	; 0x1f30 <TIMER_VidSetCallBack+0x62>
	case 0 :TIMER0_PFUNC = ptr ;            break ;
    1f08:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f0c:	90 93 73 01 	sts	0x0173, r25
    1f10:	80 93 72 01 	sts	0x0172, r24
    1f14:	0d c0       	rjmp	.+26     	; 0x1f30 <TIMER_VidSetCallBack+0x62>
	case 1 :TIMER1_PFUNC = ptr ;             break ;
    1f16:	8a 81       	ldd	r24, Y+2	; 0x02
    1f18:	9b 81       	ldd	r25, Y+3	; 0x03
    1f1a:	90 93 75 01 	sts	0x0175, r25
    1f1e:	80 93 74 01 	sts	0x0174, r24
    1f22:	06 c0       	rjmp	.+12     	; 0x1f30 <TIMER_VidSetCallBack+0x62>
	case 2 :TIMER2_PFUNC = ptr ;             break ;
    1f24:	8a 81       	ldd	r24, Y+2	; 0x02
    1f26:	9b 81       	ldd	r25, Y+3	; 0x03
    1f28:	90 93 77 01 	sts	0x0177, r25
    1f2c:	80 93 76 01 	sts	0x0176, r24
	}
}
    1f30:	0f 90       	pop	r0
    1f32:	0f 90       	pop	r0
    1f34:	0f 90       	pop	r0
    1f36:	0f 90       	pop	r0
    1f38:	0f 90       	pop	r0
    1f3a:	cf 91       	pop	r28
    1f3c:	df 91       	pop	r29
    1f3e:	08 95       	ret

00001f40 <TIMER0_VidInitialize>:

/*******************To initialize OV or COMPARE or FAST_PWM mode***************************************/
void TIMER0_VidInitialize (void) {
    1f40:	df 93       	push	r29
    1f42:	cf 93       	push	r28
    1f44:	cd b7       	in	r28, 0x3d	; 61
    1f46:	de b7       	in	r29, 0x3e	; 62

#if TIMER0_MODE == OV
	/*   overflow mode , to clear FOC0 and register
	     to enable interrupt , when rising flag jump to ISR     */
	TCCR0 = 0 ;
    1f48:	e3 e5       	ldi	r30, 0x53	; 83
    1f4a:	f0 e0       	ldi	r31, 0x00	; 0
    1f4c:	10 82       	st	Z, r1
	SET_BIT(TIMSK,TOIE0);
    1f4e:	a9 e5       	ldi	r26, 0x59	; 89
    1f50:	b0 e0       	ldi	r27, 0x00	; 0
    1f52:	e9 e5       	ldi	r30, 0x59	; 89
    1f54:	f0 e0       	ldi	r31, 0x00	; 0
    1f56:	80 81       	ld	r24, Z
    1f58:	81 60       	ori	r24, 0x01	; 1
    1f5a:	8c 93       	st	X, r24
#if PRE_TYPE_TIMER0 == NO_PRE
	CLR_BIT(TCCR0,CS02);
	CLR_BIT(TCCR0,CS01);
	SET_BIT(TCCR0,CS00);
#elif PRE_TYPE_TIMER0 == PRE_8
	CLR_BIT(TCCR0,CS02);
    1f5c:	a3 e5       	ldi	r26, 0x53	; 83
    1f5e:	b0 e0       	ldi	r27, 0x00	; 0
    1f60:	e3 e5       	ldi	r30, 0x53	; 83
    1f62:	f0 e0       	ldi	r31, 0x00	; 0
    1f64:	80 81       	ld	r24, Z
    1f66:	8b 7f       	andi	r24, 0xFB	; 251
    1f68:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS01);
    1f6a:	a3 e5       	ldi	r26, 0x53	; 83
    1f6c:	b0 e0       	ldi	r27, 0x00	; 0
    1f6e:	e3 e5       	ldi	r30, 0x53	; 83
    1f70:	f0 e0       	ldi	r31, 0x00	; 0
    1f72:	80 81       	ld	r24, Z
    1f74:	82 60       	ori	r24, 0x02	; 2
    1f76:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,CS00);
    1f78:	a3 e5       	ldi	r26, 0x53	; 83
    1f7a:	b0 e0       	ldi	r27, 0x00	; 0
    1f7c:	e3 e5       	ldi	r30, 0x53	; 83
    1f7e:	f0 e0       	ldi	r31, 0x00	; 0
    1f80:	80 81       	ld	r24, Z
    1f82:	8e 7f       	andi	r24, 0xFE	; 254
    1f84:	8c 93       	st	X, r24
	PRE_SCALAR_TIMER0 = 8 ;
    1f86:	88 e0       	ldi	r24, 0x08	; 8
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	90 93 85 01 	sts	0x0185, r25
    1f8e:	80 93 84 01 	sts	0x0184, r24
	CLR_BIT(TCCR0,CS01);
	SET_BIT(TCCR0,CS00);
	PRE_SCALAR_TIMER0 = 1024 ;
#endif

}//end FUNC TIMER_VidInitialize
    1f92:	cf 91       	pop	r28
    1f94:	df 91       	pop	r29
    1f96:	08 95       	ret

00001f98 <TIMER0_Set_Time_S>:

/******************** The part that use to count time  *************************/
//to check that you don't use OV or COMPARE mode
void TIMER0_Set_Time_S (u8 Copy_U8Time){
    1f98:	6f 92       	push	r6
    1f9a:	7f 92       	push	r7
    1f9c:	8f 92       	push	r8
    1f9e:	9f 92       	push	r9
    1fa0:	af 92       	push	r10
    1fa2:	bf 92       	push	r11
    1fa4:	cf 92       	push	r12
    1fa6:	df 92       	push	r13
    1fa8:	ef 92       	push	r14
    1faa:	ff 92       	push	r15
    1fac:	0f 93       	push	r16
    1fae:	1f 93       	push	r17
    1fb0:	df 93       	push	r29
    1fb2:	cf 93       	push	r28
    1fb4:	cd b7       	in	r28, 0x3d	; 61
    1fb6:	de b7       	in	r29, 0x3e	; 62
    1fb8:	cf 54       	subi	r28, 0x4F	; 79
    1fba:	d0 40       	sbci	r29, 0x00	; 0
    1fbc:	0f b6       	in	r0, 0x3f	; 63
    1fbe:	f8 94       	cli
    1fc0:	de bf       	out	0x3e, r29	; 62
    1fc2:	0f be       	out	0x3f, r0	; 63
    1fc4:	cd bf       	out	0x3d, r28	; 61
    1fc6:	89 83       	std	Y+1, r24	; 0x01
	DESIRED_TIME_TIMER0 = (u64)Copy_U8Time*1000 ;                                    //time in ms
    1fc8:	89 81       	ldd	r24, Y+1	; 0x01
    1fca:	08 2f       	mov	r16, r24
    1fcc:	10 e0       	ldi	r17, 0x00	; 0
    1fce:	20 e0       	ldi	r18, 0x00	; 0
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	40 e0       	ldi	r20, 0x00	; 0
    1fd4:	50 e0       	ldi	r21, 0x00	; 0
    1fd6:	60 e0       	ldi	r22, 0x00	; 0
    1fd8:	70 e0       	ldi	r23, 0x00	; 0
    1fda:	0a 83       	std	Y+2, r16	; 0x02
    1fdc:	1b 83       	std	Y+3, r17	; 0x03
    1fde:	2c 83       	std	Y+4, r18	; 0x04
    1fe0:	3d 83       	std	Y+5, r19	; 0x05
    1fe2:	4e 83       	std	Y+6, r20	; 0x06
    1fe4:	5f 83       	std	Y+7, r21	; 0x07
    1fe6:	68 87       	std	Y+8, r22	; 0x08
    1fe8:	79 87       	std	Y+9, r23	; 0x09
    1fea:	aa 80       	ldd	r10, Y+2	; 0x02
    1fec:	bb 80       	ldd	r11, Y+3	; 0x03
    1fee:	cc 80       	ldd	r12, Y+4	; 0x04
    1ff0:	dd 80       	ldd	r13, Y+5	; 0x05
    1ff2:	ee 80       	ldd	r14, Y+6	; 0x06
    1ff4:	ff 80       	ldd	r15, Y+7	; 0x07
    1ff6:	08 85       	ldd	r16, Y+8	; 0x08
    1ff8:	19 85       	ldd	r17, Y+9	; 0x09
    1ffa:	2a 2d       	mov	r18, r10
    1ffc:	3b 2d       	mov	r19, r11
    1ffe:	4c 2d       	mov	r20, r12
    2000:	5d 2d       	mov	r21, r13
    2002:	6e 2d       	mov	r22, r14
    2004:	7f 2d       	mov	r23, r15
    2006:	80 2f       	mov	r24, r16
    2008:	91 2f       	mov	r25, r17
    200a:	02 e0       	ldi	r16, 0x02	; 2
    200c:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    2010:	2a 87       	std	Y+10, r18	; 0x0a
    2012:	3b 87       	std	Y+11, r19	; 0x0b
    2014:	4c 87       	std	Y+12, r20	; 0x0c
    2016:	5d 87       	std	Y+13, r21	; 0x0d
    2018:	6e 87       	std	Y+14, r22	; 0x0e
    201a:	7f 87       	std	Y+15, r23	; 0x0f
    201c:	88 8b       	std	Y+16, r24	; 0x10
    201e:	99 8b       	std	Y+17, r25	; 0x11
    2020:	2a 85       	ldd	r18, Y+10	; 0x0a
    2022:	3b 85       	ldd	r19, Y+11	; 0x0b
    2024:	4c 85       	ldd	r20, Y+12	; 0x0c
    2026:	5d 85       	ldd	r21, Y+13	; 0x0d
    2028:	6e 85       	ldd	r22, Y+14	; 0x0e
    202a:	7f 85       	ldd	r23, Y+15	; 0x0f
    202c:	88 89       	ldd	r24, Y+16	; 0x10
    202e:	99 89       	ldd	r25, Y+17	; 0x11
    2030:	05 e0       	ldi	r16, 0x05	; 5
    2032:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    2036:	2a 8b       	std	Y+18, r18	; 0x12
    2038:	3b 8b       	std	Y+19, r19	; 0x13
    203a:	4c 8b       	std	Y+20, r20	; 0x14
    203c:	5d 8b       	std	Y+21, r21	; 0x15
    203e:	6e 8b       	std	Y+22, r22	; 0x16
    2040:	7f 8b       	std	Y+23, r23	; 0x17
    2042:	88 8f       	std	Y+24, r24	; 0x18
    2044:	99 8f       	std	Y+25, r25	; 0x19
    2046:	1a 89       	ldd	r17, Y+18	; 0x12
    2048:	2a 85       	ldd	r18, Y+10	; 0x0a
    204a:	12 1b       	sub	r17, r18
    204c:	1a 8f       	std	Y+26, r17	; 0x1a
    204e:	31 e0       	ldi	r19, 0x01	; 1
    2050:	3a a3       	std	Y+34, r19	; 0x22
    2052:	4a 8d       	ldd	r20, Y+26	; 0x1a
    2054:	5a 89       	ldd	r21, Y+18	; 0x12
    2056:	54 17       	cp	r21, r20
    2058:	08 f0       	brcs	.+2      	; 0x205c <TIMER0_Set_Time_S+0xc4>
    205a:	1a a2       	std	Y+34, r1	; 0x22
    205c:	6b 89       	ldd	r22, Y+19	; 0x13
    205e:	7b 85       	ldd	r23, Y+11	; 0x0b
    2060:	67 1b       	sub	r22, r23
    2062:	6b 8f       	std	Y+27, r22	; 0x1b
    2064:	81 e0       	ldi	r24, 0x01	; 1
    2066:	8b a3       	std	Y+35, r24	; 0x23
    2068:	9b 8d       	ldd	r25, Y+27	; 0x1b
    206a:	eb 89       	ldd	r30, Y+19	; 0x13
    206c:	e9 17       	cp	r30, r25
    206e:	08 f0       	brcs	.+2      	; 0x2072 <TIMER0_Set_Time_S+0xda>
    2070:	1b a2       	std	Y+35, r1	; 0x23
    2072:	fb 8d       	ldd	r31, Y+27	; 0x1b
    2074:	0a a1       	ldd	r16, Y+34	; 0x22
    2076:	f0 1b       	sub	r31, r16
    2078:	fc a3       	std	Y+36, r31	; 0x24
    207a:	11 e0       	ldi	r17, 0x01	; 1
    207c:	1d a3       	std	Y+37, r17	; 0x25
    207e:	2c a1       	ldd	r18, Y+36	; 0x24
    2080:	3b 8d       	ldd	r19, Y+27	; 0x1b
    2082:	32 17       	cp	r19, r18
    2084:	08 f0       	brcs	.+2      	; 0x2088 <TIMER0_Set_Time_S+0xf0>
    2086:	1d a2       	std	Y+37, r1	; 0x25
    2088:	4b a1       	ldd	r20, Y+35	; 0x23
    208a:	5d a1       	ldd	r21, Y+37	; 0x25
    208c:	45 2b       	or	r20, r21
    208e:	4b a3       	std	Y+35, r20	; 0x23
    2090:	6c a1       	ldd	r22, Y+36	; 0x24
    2092:	6b 8f       	std	Y+27, r22	; 0x1b
    2094:	7c 89       	ldd	r23, Y+20	; 0x14
    2096:	8c 85       	ldd	r24, Y+12	; 0x0c
    2098:	78 1b       	sub	r23, r24
    209a:	7c 8f       	std	Y+28, r23	; 0x1c
    209c:	91 e0       	ldi	r25, 0x01	; 1
    209e:	9e a3       	std	Y+38, r25	; 0x26
    20a0:	ec 8d       	ldd	r30, Y+28	; 0x1c
    20a2:	fc 89       	ldd	r31, Y+20	; 0x14
    20a4:	fe 17       	cp	r31, r30
    20a6:	08 f0       	brcs	.+2      	; 0x20aa <TIMER0_Set_Time_S+0x112>
    20a8:	1e a2       	std	Y+38, r1	; 0x26
    20aa:	0c 8d       	ldd	r16, Y+28	; 0x1c
    20ac:	1b a1       	ldd	r17, Y+35	; 0x23
    20ae:	01 1b       	sub	r16, r17
    20b0:	0f a3       	std	Y+39, r16	; 0x27
    20b2:	21 e0       	ldi	r18, 0x01	; 1
    20b4:	28 a7       	std	Y+40, r18	; 0x28
    20b6:	3f a1       	ldd	r19, Y+39	; 0x27
    20b8:	4c 8d       	ldd	r20, Y+28	; 0x1c
    20ba:	43 17       	cp	r20, r19
    20bc:	08 f0       	brcs	.+2      	; 0x20c0 <TIMER0_Set_Time_S+0x128>
    20be:	18 a6       	std	Y+40, r1	; 0x28
    20c0:	5e a1       	ldd	r21, Y+38	; 0x26
    20c2:	68 a5       	ldd	r22, Y+40	; 0x28
    20c4:	56 2b       	or	r21, r22
    20c6:	5e a3       	std	Y+38, r21	; 0x26
    20c8:	7f a1       	ldd	r23, Y+39	; 0x27
    20ca:	7c 8f       	std	Y+28, r23	; 0x1c
    20cc:	8d 89       	ldd	r24, Y+21	; 0x15
    20ce:	9d 85       	ldd	r25, Y+13	; 0x0d
    20d0:	89 1b       	sub	r24, r25
    20d2:	8d 8f       	std	Y+29, r24	; 0x1d
    20d4:	e1 e0       	ldi	r30, 0x01	; 1
    20d6:	e9 a7       	std	Y+41, r30	; 0x29
    20d8:	fd 8d       	ldd	r31, Y+29	; 0x1d
    20da:	0d 89       	ldd	r16, Y+21	; 0x15
    20dc:	0f 17       	cp	r16, r31
    20de:	08 f0       	brcs	.+2      	; 0x20e2 <TIMER0_Set_Time_S+0x14a>
    20e0:	19 a6       	std	Y+41, r1	; 0x29
    20e2:	1d 8d       	ldd	r17, Y+29	; 0x1d
    20e4:	2e a1       	ldd	r18, Y+38	; 0x26
    20e6:	12 1b       	sub	r17, r18
    20e8:	1a a7       	std	Y+42, r17	; 0x2a
    20ea:	31 e0       	ldi	r19, 0x01	; 1
    20ec:	3b a7       	std	Y+43, r19	; 0x2b
    20ee:	4a a5       	ldd	r20, Y+42	; 0x2a
    20f0:	5d 8d       	ldd	r21, Y+29	; 0x1d
    20f2:	54 17       	cp	r21, r20
    20f4:	08 f0       	brcs	.+2      	; 0x20f8 <TIMER0_Set_Time_S+0x160>
    20f6:	1b a6       	std	Y+43, r1	; 0x2b
    20f8:	69 a5       	ldd	r22, Y+41	; 0x29
    20fa:	7b a5       	ldd	r23, Y+43	; 0x2b
    20fc:	67 2b       	or	r22, r23
    20fe:	69 a7       	std	Y+41, r22	; 0x29
    2100:	8a a5       	ldd	r24, Y+42	; 0x2a
    2102:	8d 8f       	std	Y+29, r24	; 0x1d
    2104:	9e 89       	ldd	r25, Y+22	; 0x16
    2106:	ee 85       	ldd	r30, Y+14	; 0x0e
    2108:	9e 1b       	sub	r25, r30
    210a:	9e 8f       	std	Y+30, r25	; 0x1e
    210c:	f1 e0       	ldi	r31, 0x01	; 1
    210e:	fc a7       	std	Y+44, r31	; 0x2c
    2110:	0e 8d       	ldd	r16, Y+30	; 0x1e
    2112:	1e 89       	ldd	r17, Y+22	; 0x16
    2114:	10 17       	cp	r17, r16
    2116:	08 f0       	brcs	.+2      	; 0x211a <TIMER0_Set_Time_S+0x182>
    2118:	1c a6       	std	Y+44, r1	; 0x2c
    211a:	2e 8d       	ldd	r18, Y+30	; 0x1e
    211c:	39 a5       	ldd	r19, Y+41	; 0x29
    211e:	23 1b       	sub	r18, r19
    2120:	2d a7       	std	Y+45, r18	; 0x2d
    2122:	41 e0       	ldi	r20, 0x01	; 1
    2124:	4e a7       	std	Y+46, r20	; 0x2e
    2126:	5d a5       	ldd	r21, Y+45	; 0x2d
    2128:	6e 8d       	ldd	r22, Y+30	; 0x1e
    212a:	65 17       	cp	r22, r21
    212c:	08 f0       	brcs	.+2      	; 0x2130 <TIMER0_Set_Time_S+0x198>
    212e:	1e a6       	std	Y+46, r1	; 0x2e
    2130:	7c a5       	ldd	r23, Y+44	; 0x2c
    2132:	8e a5       	ldd	r24, Y+46	; 0x2e
    2134:	78 2b       	or	r23, r24
    2136:	7c a7       	std	Y+44, r23	; 0x2c
    2138:	9d a5       	ldd	r25, Y+45	; 0x2d
    213a:	9e 8f       	std	Y+30, r25	; 0x1e
    213c:	ef 89       	ldd	r30, Y+23	; 0x17
    213e:	ff 85       	ldd	r31, Y+15	; 0x0f
    2140:	ef 1b       	sub	r30, r31
    2142:	ef 8f       	std	Y+31, r30	; 0x1f
    2144:	01 e0       	ldi	r16, 0x01	; 1
    2146:	0f a7       	std	Y+47, r16	; 0x2f
    2148:	1f 8d       	ldd	r17, Y+31	; 0x1f
    214a:	2f 89       	ldd	r18, Y+23	; 0x17
    214c:	21 17       	cp	r18, r17
    214e:	08 f0       	brcs	.+2      	; 0x2152 <TIMER0_Set_Time_S+0x1ba>
    2150:	1f a6       	std	Y+47, r1	; 0x2f
    2152:	3f 8d       	ldd	r19, Y+31	; 0x1f
    2154:	4c a5       	ldd	r20, Y+44	; 0x2c
    2156:	34 1b       	sub	r19, r20
    2158:	38 ab       	std	Y+48, r19	; 0x30
    215a:	51 e0       	ldi	r21, 0x01	; 1
    215c:	59 ab       	std	Y+49, r21	; 0x31
    215e:	68 a9       	ldd	r22, Y+48	; 0x30
    2160:	7f 8d       	ldd	r23, Y+31	; 0x1f
    2162:	76 17       	cp	r23, r22
    2164:	08 f0       	brcs	.+2      	; 0x2168 <TIMER0_Set_Time_S+0x1d0>
    2166:	19 aa       	std	Y+49, r1	; 0x31
    2168:	8f a5       	ldd	r24, Y+47	; 0x2f
    216a:	99 a9       	ldd	r25, Y+49	; 0x31
    216c:	89 2b       	or	r24, r25
    216e:	8f a7       	std	Y+47, r24	; 0x2f
    2170:	e8 a9       	ldd	r30, Y+48	; 0x30
    2172:	ef 8f       	std	Y+31, r30	; 0x1f
    2174:	f8 8d       	ldd	r31, Y+24	; 0x18
    2176:	08 89       	ldd	r16, Y+16	; 0x10
    2178:	f0 1b       	sub	r31, r16
    217a:	f8 a3       	std	Y+32, r31	; 0x20
    217c:	11 e0       	ldi	r17, 0x01	; 1
    217e:	1a ab       	std	Y+50, r17	; 0x32
    2180:	28 a1       	ldd	r18, Y+32	; 0x20
    2182:	38 8d       	ldd	r19, Y+24	; 0x18
    2184:	32 17       	cp	r19, r18
    2186:	08 f0       	brcs	.+2      	; 0x218a <TIMER0_Set_Time_S+0x1f2>
    2188:	1a aa       	std	Y+50, r1	; 0x32
    218a:	48 a1       	ldd	r20, Y+32	; 0x20
    218c:	5f a5       	ldd	r21, Y+47	; 0x2f
    218e:	45 1b       	sub	r20, r21
    2190:	4b ab       	std	Y+51, r20	; 0x33
    2192:	61 e0       	ldi	r22, 0x01	; 1
    2194:	6c ab       	std	Y+52, r22	; 0x34
    2196:	7b a9       	ldd	r23, Y+51	; 0x33
    2198:	88 a1       	ldd	r24, Y+32	; 0x20
    219a:	87 17       	cp	r24, r23
    219c:	08 f0       	brcs	.+2      	; 0x21a0 <TIMER0_Set_Time_S+0x208>
    219e:	1c aa       	std	Y+52, r1	; 0x34
    21a0:	9a a9       	ldd	r25, Y+50	; 0x32
    21a2:	ec a9       	ldd	r30, Y+52	; 0x34
    21a4:	9e 2b       	or	r25, r30
    21a6:	9a ab       	std	Y+50, r25	; 0x32
    21a8:	fb a9       	ldd	r31, Y+51	; 0x33
    21aa:	f8 a3       	std	Y+32, r31	; 0x20
    21ac:	09 8d       	ldd	r16, Y+25	; 0x19
    21ae:	19 89       	ldd	r17, Y+17	; 0x11
    21b0:	01 1b       	sub	r16, r17
    21b2:	09 a3       	std	Y+33, r16	; 0x21
    21b4:	89 a1       	ldd	r24, Y+33	; 0x21
    21b6:	2a a9       	ldd	r18, Y+50	; 0x32
    21b8:	82 1b       	sub	r24, r18
    21ba:	89 a3       	std	Y+33, r24	; 0x21
    21bc:	3a 8d       	ldd	r19, Y+26	; 0x1a
    21be:	3a 8b       	std	Y+18, r19	; 0x12
    21c0:	4b 8d       	ldd	r20, Y+27	; 0x1b
    21c2:	4b 8b       	std	Y+19, r20	; 0x13
    21c4:	5c 8d       	ldd	r21, Y+28	; 0x1c
    21c6:	5c 8b       	std	Y+20, r21	; 0x14
    21c8:	6d 8d       	ldd	r22, Y+29	; 0x1d
    21ca:	6d 8b       	std	Y+21, r22	; 0x15
    21cc:	7e 8d       	ldd	r23, Y+30	; 0x1e
    21ce:	7e 8b       	std	Y+22, r23	; 0x16
    21d0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21d2:	8f 8b       	std	Y+23, r24	; 0x17
    21d4:	98 a1       	ldd	r25, Y+32	; 0x20
    21d6:	98 8f       	std	Y+24, r25	; 0x18
    21d8:	e9 a1       	ldd	r30, Y+33	; 0x21
    21da:	e9 8f       	std	Y+25, r30	; 0x19
    21dc:	fa 89       	ldd	r31, Y+18	; 0x12
    21de:	0a 81       	ldd	r16, Y+2	; 0x02
    21e0:	f0 0f       	add	r31, r16
    21e2:	fd ab       	std	Y+53, r31	; 0x35
    21e4:	11 e0       	ldi	r17, 0x01	; 1
    21e6:	1d af       	std	Y+61, r17	; 0x3d
    21e8:	2d a9       	ldd	r18, Y+53	; 0x35
    21ea:	3a 89       	ldd	r19, Y+18	; 0x12
    21ec:	23 17       	cp	r18, r19
    21ee:	08 f0       	brcs	.+2      	; 0x21f2 <TIMER0_Set_Time_S+0x25a>
    21f0:	1d ae       	std	Y+61, r1	; 0x3d
    21f2:	4b 89       	ldd	r20, Y+19	; 0x13
    21f4:	5b 81       	ldd	r21, Y+3	; 0x03
    21f6:	45 0f       	add	r20, r21
    21f8:	4e ab       	std	Y+54, r20	; 0x36
    21fa:	61 e0       	ldi	r22, 0x01	; 1
    21fc:	6e af       	std	Y+62, r22	; 0x3e
    21fe:	7e a9       	ldd	r23, Y+54	; 0x36
    2200:	8b 89       	ldd	r24, Y+19	; 0x13
    2202:	78 17       	cp	r23, r24
    2204:	08 f0       	brcs	.+2      	; 0x2208 <TIMER0_Set_Time_S+0x270>
    2206:	1e ae       	std	Y+62, r1	; 0x3e
    2208:	9d ad       	ldd	r25, Y+61	; 0x3d
    220a:	ee a9       	ldd	r30, Y+54	; 0x36
    220c:	9e 0f       	add	r25, r30
    220e:	9f af       	std	Y+63, r25	; 0x3f
    2210:	f1 e0       	ldi	r31, 0x01	; 1
    2212:	21 96       	adiw	r28, 0x01	; 1
    2214:	ff af       	std	Y+63, r31	; 0x3f
    2216:	21 97       	sbiw	r28, 0x01	; 1
    2218:	0f ad       	ldd	r16, Y+63	; 0x3f
    221a:	1e a9       	ldd	r17, Y+54	; 0x36
    221c:	01 17       	cp	r16, r17
    221e:	18 f0       	brcs	.+6      	; 0x2226 <TIMER0_Set_Time_S+0x28e>
    2220:	21 96       	adiw	r28, 0x01	; 1
    2222:	1f ae       	std	Y+63, r1	; 0x3f
    2224:	21 97       	sbiw	r28, 0x01	; 1
    2226:	2e ad       	ldd	r18, Y+62	; 0x3e
    2228:	21 96       	adiw	r28, 0x01	; 1
    222a:	3f ad       	ldd	r19, Y+63	; 0x3f
    222c:	21 97       	sbiw	r28, 0x01	; 1
    222e:	23 2b       	or	r18, r19
    2230:	2e af       	std	Y+62, r18	; 0x3e
    2232:	4f ad       	ldd	r20, Y+63	; 0x3f
    2234:	4e ab       	std	Y+54, r20	; 0x36
    2236:	5c 89       	ldd	r21, Y+20	; 0x14
    2238:	6c 81       	ldd	r22, Y+4	; 0x04
    223a:	56 0f       	add	r21, r22
    223c:	5f ab       	std	Y+55, r21	; 0x37
    223e:	71 e0       	ldi	r23, 0x01	; 1
    2240:	22 96       	adiw	r28, 0x02	; 2
    2242:	7f af       	std	Y+63, r23	; 0x3f
    2244:	22 97       	sbiw	r28, 0x02	; 2
    2246:	8f a9       	ldd	r24, Y+55	; 0x37
    2248:	9c 89       	ldd	r25, Y+20	; 0x14
    224a:	89 17       	cp	r24, r25
    224c:	18 f0       	brcs	.+6      	; 0x2254 <TIMER0_Set_Time_S+0x2bc>
    224e:	22 96       	adiw	r28, 0x02	; 2
    2250:	1f ae       	std	Y+63, r1	; 0x3f
    2252:	22 97       	sbiw	r28, 0x02	; 2
    2254:	ee ad       	ldd	r30, Y+62	; 0x3e
    2256:	ff a9       	ldd	r31, Y+55	; 0x37
    2258:	ef 0f       	add	r30, r31
    225a:	23 96       	adiw	r28, 0x03	; 3
    225c:	ef af       	std	Y+63, r30	; 0x3f
    225e:	23 97       	sbiw	r28, 0x03	; 3
    2260:	01 e0       	ldi	r16, 0x01	; 1
    2262:	24 96       	adiw	r28, 0x04	; 4
    2264:	0f af       	std	Y+63, r16	; 0x3f
    2266:	24 97       	sbiw	r28, 0x04	; 4
    2268:	23 96       	adiw	r28, 0x03	; 3
    226a:	1f ad       	ldd	r17, Y+63	; 0x3f
    226c:	23 97       	sbiw	r28, 0x03	; 3
    226e:	2f a9       	ldd	r18, Y+55	; 0x37
    2270:	12 17       	cp	r17, r18
    2272:	18 f0       	brcs	.+6      	; 0x227a <TIMER0_Set_Time_S+0x2e2>
    2274:	24 96       	adiw	r28, 0x04	; 4
    2276:	1f ae       	std	Y+63, r1	; 0x3f
    2278:	24 97       	sbiw	r28, 0x04	; 4
    227a:	22 96       	adiw	r28, 0x02	; 2
    227c:	3f ad       	ldd	r19, Y+63	; 0x3f
    227e:	22 97       	sbiw	r28, 0x02	; 2
    2280:	24 96       	adiw	r28, 0x04	; 4
    2282:	4f ad       	ldd	r20, Y+63	; 0x3f
    2284:	24 97       	sbiw	r28, 0x04	; 4
    2286:	34 2b       	or	r19, r20
    2288:	22 96       	adiw	r28, 0x02	; 2
    228a:	3f af       	std	Y+63, r19	; 0x3f
    228c:	22 97       	sbiw	r28, 0x02	; 2
    228e:	23 96       	adiw	r28, 0x03	; 3
    2290:	5f ad       	ldd	r21, Y+63	; 0x3f
    2292:	23 97       	sbiw	r28, 0x03	; 3
    2294:	5f ab       	std	Y+55, r21	; 0x37
    2296:	6d 89       	ldd	r22, Y+21	; 0x15
    2298:	7d 81       	ldd	r23, Y+5	; 0x05
    229a:	67 0f       	add	r22, r23
    229c:	68 af       	std	Y+56, r22	; 0x38
    229e:	81 e0       	ldi	r24, 0x01	; 1
    22a0:	25 96       	adiw	r28, 0x05	; 5
    22a2:	8f af       	std	Y+63, r24	; 0x3f
    22a4:	25 97       	sbiw	r28, 0x05	; 5
    22a6:	98 ad       	ldd	r25, Y+56	; 0x38
    22a8:	ed 89       	ldd	r30, Y+21	; 0x15
    22aa:	9e 17       	cp	r25, r30
    22ac:	18 f0       	brcs	.+6      	; 0x22b4 <TIMER0_Set_Time_S+0x31c>
    22ae:	25 96       	adiw	r28, 0x05	; 5
    22b0:	1f ae       	std	Y+63, r1	; 0x3f
    22b2:	25 97       	sbiw	r28, 0x05	; 5
    22b4:	22 96       	adiw	r28, 0x02	; 2
    22b6:	ff ad       	ldd	r31, Y+63	; 0x3f
    22b8:	22 97       	sbiw	r28, 0x02	; 2
    22ba:	08 ad       	ldd	r16, Y+56	; 0x38
    22bc:	f0 0f       	add	r31, r16
    22be:	26 96       	adiw	r28, 0x06	; 6
    22c0:	ff af       	std	Y+63, r31	; 0x3f
    22c2:	26 97       	sbiw	r28, 0x06	; 6
    22c4:	11 e0       	ldi	r17, 0x01	; 1
    22c6:	27 96       	adiw	r28, 0x07	; 7
    22c8:	1f af       	std	Y+63, r17	; 0x3f
    22ca:	27 97       	sbiw	r28, 0x07	; 7
    22cc:	26 96       	adiw	r28, 0x06	; 6
    22ce:	2f ad       	ldd	r18, Y+63	; 0x3f
    22d0:	26 97       	sbiw	r28, 0x06	; 6
    22d2:	38 ad       	ldd	r19, Y+56	; 0x38
    22d4:	23 17       	cp	r18, r19
    22d6:	18 f0       	brcs	.+6      	; 0x22de <TIMER0_Set_Time_S+0x346>
    22d8:	27 96       	adiw	r28, 0x07	; 7
    22da:	1f ae       	std	Y+63, r1	; 0x3f
    22dc:	27 97       	sbiw	r28, 0x07	; 7
    22de:	25 96       	adiw	r28, 0x05	; 5
    22e0:	4f ad       	ldd	r20, Y+63	; 0x3f
    22e2:	25 97       	sbiw	r28, 0x05	; 5
    22e4:	27 96       	adiw	r28, 0x07	; 7
    22e6:	5f ad       	ldd	r21, Y+63	; 0x3f
    22e8:	27 97       	sbiw	r28, 0x07	; 7
    22ea:	45 2b       	or	r20, r21
    22ec:	25 96       	adiw	r28, 0x05	; 5
    22ee:	4f af       	std	Y+63, r20	; 0x3f
    22f0:	25 97       	sbiw	r28, 0x05	; 5
    22f2:	26 96       	adiw	r28, 0x06	; 6
    22f4:	6f ad       	ldd	r22, Y+63	; 0x3f
    22f6:	26 97       	sbiw	r28, 0x06	; 6
    22f8:	68 af       	std	Y+56, r22	; 0x38
    22fa:	7e 89       	ldd	r23, Y+22	; 0x16
    22fc:	8e 81       	ldd	r24, Y+6	; 0x06
    22fe:	78 0f       	add	r23, r24
    2300:	79 af       	std	Y+57, r23	; 0x39
    2302:	91 e0       	ldi	r25, 0x01	; 1
    2304:	28 96       	adiw	r28, 0x08	; 8
    2306:	9f af       	std	Y+63, r25	; 0x3f
    2308:	28 97       	sbiw	r28, 0x08	; 8
    230a:	e9 ad       	ldd	r30, Y+57	; 0x39
    230c:	fe 89       	ldd	r31, Y+22	; 0x16
    230e:	ef 17       	cp	r30, r31
    2310:	18 f0       	brcs	.+6      	; 0x2318 <TIMER0_Set_Time_S+0x380>
    2312:	28 96       	adiw	r28, 0x08	; 8
    2314:	1f ae       	std	Y+63, r1	; 0x3f
    2316:	28 97       	sbiw	r28, 0x08	; 8
    2318:	25 96       	adiw	r28, 0x05	; 5
    231a:	0f ad       	ldd	r16, Y+63	; 0x3f
    231c:	25 97       	sbiw	r28, 0x05	; 5
    231e:	19 ad       	ldd	r17, Y+57	; 0x39
    2320:	01 0f       	add	r16, r17
    2322:	29 96       	adiw	r28, 0x09	; 9
    2324:	0f af       	std	Y+63, r16	; 0x3f
    2326:	29 97       	sbiw	r28, 0x09	; 9
    2328:	21 e0       	ldi	r18, 0x01	; 1
    232a:	2a 96       	adiw	r28, 0x0a	; 10
    232c:	2f af       	std	Y+63, r18	; 0x3f
    232e:	2a 97       	sbiw	r28, 0x0a	; 10
    2330:	29 96       	adiw	r28, 0x09	; 9
    2332:	3f ad       	ldd	r19, Y+63	; 0x3f
    2334:	29 97       	sbiw	r28, 0x09	; 9
    2336:	49 ad       	ldd	r20, Y+57	; 0x39
    2338:	34 17       	cp	r19, r20
    233a:	18 f0       	brcs	.+6      	; 0x2342 <TIMER0_Set_Time_S+0x3aa>
    233c:	2a 96       	adiw	r28, 0x0a	; 10
    233e:	1f ae       	std	Y+63, r1	; 0x3f
    2340:	2a 97       	sbiw	r28, 0x0a	; 10
    2342:	28 96       	adiw	r28, 0x08	; 8
    2344:	5f ad       	ldd	r21, Y+63	; 0x3f
    2346:	28 97       	sbiw	r28, 0x08	; 8
    2348:	2a 96       	adiw	r28, 0x0a	; 10
    234a:	6f ad       	ldd	r22, Y+63	; 0x3f
    234c:	2a 97       	sbiw	r28, 0x0a	; 10
    234e:	56 2b       	or	r21, r22
    2350:	28 96       	adiw	r28, 0x08	; 8
    2352:	5f af       	std	Y+63, r21	; 0x3f
    2354:	28 97       	sbiw	r28, 0x08	; 8
    2356:	29 96       	adiw	r28, 0x09	; 9
    2358:	7f ad       	ldd	r23, Y+63	; 0x3f
    235a:	29 97       	sbiw	r28, 0x09	; 9
    235c:	79 af       	std	Y+57, r23	; 0x39
    235e:	8f 89       	ldd	r24, Y+23	; 0x17
    2360:	9f 81       	ldd	r25, Y+7	; 0x07
    2362:	89 0f       	add	r24, r25
    2364:	8a af       	std	Y+58, r24	; 0x3a
    2366:	e1 e0       	ldi	r30, 0x01	; 1
    2368:	2b 96       	adiw	r28, 0x0b	; 11
    236a:	ef af       	std	Y+63, r30	; 0x3f
    236c:	2b 97       	sbiw	r28, 0x0b	; 11
    236e:	fa ad       	ldd	r31, Y+58	; 0x3a
    2370:	0f 89       	ldd	r16, Y+23	; 0x17
    2372:	f0 17       	cp	r31, r16
    2374:	18 f0       	brcs	.+6      	; 0x237c <TIMER0_Set_Time_S+0x3e4>
    2376:	2b 96       	adiw	r28, 0x0b	; 11
    2378:	1f ae       	std	Y+63, r1	; 0x3f
    237a:	2b 97       	sbiw	r28, 0x0b	; 11
    237c:	28 96       	adiw	r28, 0x08	; 8
    237e:	1f ad       	ldd	r17, Y+63	; 0x3f
    2380:	28 97       	sbiw	r28, 0x08	; 8
    2382:	2a ad       	ldd	r18, Y+58	; 0x3a
    2384:	12 0f       	add	r17, r18
    2386:	2c 96       	adiw	r28, 0x0c	; 12
    2388:	1f af       	std	Y+63, r17	; 0x3f
    238a:	2c 97       	sbiw	r28, 0x0c	; 12
    238c:	31 e0       	ldi	r19, 0x01	; 1
    238e:	2d 96       	adiw	r28, 0x0d	; 13
    2390:	3f af       	std	Y+63, r19	; 0x3f
    2392:	2d 97       	sbiw	r28, 0x0d	; 13
    2394:	2c 96       	adiw	r28, 0x0c	; 12
    2396:	4f ad       	ldd	r20, Y+63	; 0x3f
    2398:	2c 97       	sbiw	r28, 0x0c	; 12
    239a:	5a ad       	ldd	r21, Y+58	; 0x3a
    239c:	45 17       	cp	r20, r21
    239e:	18 f0       	brcs	.+6      	; 0x23a6 <TIMER0_Set_Time_S+0x40e>
    23a0:	2d 96       	adiw	r28, 0x0d	; 13
    23a2:	1f ae       	std	Y+63, r1	; 0x3f
    23a4:	2d 97       	sbiw	r28, 0x0d	; 13
    23a6:	2b 96       	adiw	r28, 0x0b	; 11
    23a8:	6f ad       	ldd	r22, Y+63	; 0x3f
    23aa:	2b 97       	sbiw	r28, 0x0b	; 11
    23ac:	2d 96       	adiw	r28, 0x0d	; 13
    23ae:	7f ad       	ldd	r23, Y+63	; 0x3f
    23b0:	2d 97       	sbiw	r28, 0x0d	; 13
    23b2:	67 2b       	or	r22, r23
    23b4:	2b 96       	adiw	r28, 0x0b	; 11
    23b6:	6f af       	std	Y+63, r22	; 0x3f
    23b8:	2b 97       	sbiw	r28, 0x0b	; 11
    23ba:	2c 96       	adiw	r28, 0x0c	; 12
    23bc:	8f ad       	ldd	r24, Y+63	; 0x3f
    23be:	2c 97       	sbiw	r28, 0x0c	; 12
    23c0:	8a af       	std	Y+58, r24	; 0x3a
    23c2:	98 8d       	ldd	r25, Y+24	; 0x18
    23c4:	e8 85       	ldd	r30, Y+8	; 0x08
    23c6:	9e 0f       	add	r25, r30
    23c8:	9b af       	std	Y+59, r25	; 0x3b
    23ca:	f1 e0       	ldi	r31, 0x01	; 1
    23cc:	2e 96       	adiw	r28, 0x0e	; 14
    23ce:	ff af       	std	Y+63, r31	; 0x3f
    23d0:	2e 97       	sbiw	r28, 0x0e	; 14
    23d2:	0b ad       	ldd	r16, Y+59	; 0x3b
    23d4:	18 8d       	ldd	r17, Y+24	; 0x18
    23d6:	01 17       	cp	r16, r17
    23d8:	18 f0       	brcs	.+6      	; 0x23e0 <TIMER0_Set_Time_S+0x448>
    23da:	2e 96       	adiw	r28, 0x0e	; 14
    23dc:	1f ae       	std	Y+63, r1	; 0x3f
    23de:	2e 97       	sbiw	r28, 0x0e	; 14
    23e0:	2b 96       	adiw	r28, 0x0b	; 11
    23e2:	2f ad       	ldd	r18, Y+63	; 0x3f
    23e4:	2b 97       	sbiw	r28, 0x0b	; 11
    23e6:	3b ad       	ldd	r19, Y+59	; 0x3b
    23e8:	23 0f       	add	r18, r19
    23ea:	2f 96       	adiw	r28, 0x0f	; 15
    23ec:	2f af       	std	Y+63, r18	; 0x3f
    23ee:	2f 97       	sbiw	r28, 0x0f	; 15
    23f0:	41 e0       	ldi	r20, 0x01	; 1
    23f2:	60 96       	adiw	r28, 0x10	; 16
    23f4:	4f af       	std	Y+63, r20	; 0x3f
    23f6:	60 97       	sbiw	r28, 0x10	; 16
    23f8:	2f 96       	adiw	r28, 0x0f	; 15
    23fa:	5f ad       	ldd	r21, Y+63	; 0x3f
    23fc:	2f 97       	sbiw	r28, 0x0f	; 15
    23fe:	6b ad       	ldd	r22, Y+59	; 0x3b
    2400:	56 17       	cp	r21, r22
    2402:	18 f0       	brcs	.+6      	; 0x240a <TIMER0_Set_Time_S+0x472>
    2404:	60 96       	adiw	r28, 0x10	; 16
    2406:	1f ae       	std	Y+63, r1	; 0x3f
    2408:	60 97       	sbiw	r28, 0x10	; 16
    240a:	2e 96       	adiw	r28, 0x0e	; 14
    240c:	7f ad       	ldd	r23, Y+63	; 0x3f
    240e:	2e 97       	sbiw	r28, 0x0e	; 14
    2410:	60 96       	adiw	r28, 0x10	; 16
    2412:	8f ad       	ldd	r24, Y+63	; 0x3f
    2414:	60 97       	sbiw	r28, 0x10	; 16
    2416:	78 2b       	or	r23, r24
    2418:	2e 96       	adiw	r28, 0x0e	; 14
    241a:	7f af       	std	Y+63, r23	; 0x3f
    241c:	2e 97       	sbiw	r28, 0x0e	; 14
    241e:	2f 96       	adiw	r28, 0x0f	; 15
    2420:	9f ad       	ldd	r25, Y+63	; 0x3f
    2422:	2f 97       	sbiw	r28, 0x0f	; 15
    2424:	9b af       	std	Y+59, r25	; 0x3b
    2426:	e9 8d       	ldd	r30, Y+25	; 0x19
    2428:	f9 85       	ldd	r31, Y+9	; 0x09
    242a:	ef 0f       	add	r30, r31
    242c:	ec af       	std	Y+60, r30	; 0x3c
    242e:	2e 96       	adiw	r28, 0x0e	; 14
    2430:	8f ad       	ldd	r24, Y+63	; 0x3f
    2432:	2e 97       	sbiw	r28, 0x0e	; 14
    2434:	0c ad       	ldd	r16, Y+60	; 0x3c
    2436:	80 0f       	add	r24, r16
    2438:	8c af       	std	Y+60, r24	; 0x3c
    243a:	1d a9       	ldd	r17, Y+53	; 0x35
    243c:	1a 8b       	std	Y+18, r17	; 0x12
    243e:	2e a9       	ldd	r18, Y+54	; 0x36
    2440:	2b 8b       	std	Y+19, r18	; 0x13
    2442:	3f a9       	ldd	r19, Y+55	; 0x37
    2444:	3c 8b       	std	Y+20, r19	; 0x14
    2446:	48 ad       	ldd	r20, Y+56	; 0x38
    2448:	4d 8b       	std	Y+21, r20	; 0x15
    244a:	59 ad       	ldd	r21, Y+57	; 0x39
    244c:	5e 8b       	std	Y+22, r21	; 0x16
    244e:	6a ad       	ldd	r22, Y+58	; 0x3a
    2450:	6f 8b       	std	Y+23, r22	; 0x17
    2452:	7b ad       	ldd	r23, Y+59	; 0x3b
    2454:	78 8f       	std	Y+24, r23	; 0x18
    2456:	8c ad       	ldd	r24, Y+60	; 0x3c
    2458:	89 8f       	std	Y+25, r24	; 0x19
    245a:	2a 89       	ldd	r18, Y+18	; 0x12
    245c:	3b 89       	ldd	r19, Y+19	; 0x13
    245e:	4c 89       	ldd	r20, Y+20	; 0x14
    2460:	5d 89       	ldd	r21, Y+21	; 0x15
    2462:	6e 89       	ldd	r22, Y+22	; 0x16
    2464:	7f 89       	ldd	r23, Y+23	; 0x17
    2466:	88 8d       	ldd	r24, Y+24	; 0x18
    2468:	99 8d       	ldd	r25, Y+25	; 0x19
    246a:	03 e0       	ldi	r16, 0x03	; 3
    246c:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    2470:	a2 2e       	mov	r10, r18
    2472:	b3 2e       	mov	r11, r19
    2474:	c4 2e       	mov	r12, r20
    2476:	d5 2e       	mov	r13, r21
    2478:	e6 2e       	mov	r14, r22
    247a:	f7 2e       	mov	r15, r23
    247c:	08 2f       	mov	r16, r24
    247e:	19 2f       	mov	r17, r25
    2480:	2a 2d       	mov	r18, r10
    2482:	3b 2d       	mov	r19, r11
    2484:	4c 2d       	mov	r20, r12
    2486:	5d 2d       	mov	r21, r13
    2488:	6e 2d       	mov	r22, r14
    248a:	7f 2d       	mov	r23, r15
    248c:	80 2f       	mov	r24, r16
    248e:	91 2f       	mov	r25, r17
    2490:	20 93 7c 01 	sts	0x017C, r18
    2494:	30 93 7d 01 	sts	0x017D, r19
    2498:	40 93 7e 01 	sts	0x017E, r20
    249c:	50 93 7f 01 	sts	0x017F, r21
    24a0:	60 93 80 01 	sts	0x0180, r22
    24a4:	70 93 81 01 	sts	0x0181, r23
    24a8:	80 93 82 01 	sts	0x0182, r24
    24ac:	90 93 83 01 	sts	0x0183, r25
    T_OV_TIMER0 = (256*(f32)PRE_SCALAR_TIMER0)/8000 ;                                //time in ms
    24b0:	80 91 84 01 	lds	r24, 0x0184
    24b4:	90 91 85 01 	lds	r25, 0x0185
    24b8:	cc 01       	movw	r24, r24
    24ba:	a0 e0       	ldi	r26, 0x00	; 0
    24bc:	b0 e0       	ldi	r27, 0x00	; 0
    24be:	bc 01       	movw	r22, r24
    24c0:	cd 01       	movw	r24, r26
    24c2:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__floatunsisf>
    24c6:	dc 01       	movw	r26, r24
    24c8:	cb 01       	movw	r24, r22
    24ca:	bc 01       	movw	r22, r24
    24cc:	cd 01       	movw	r24, r26
    24ce:	20 e0       	ldi	r18, 0x00	; 0
    24d0:	30 e0       	ldi	r19, 0x00	; 0
    24d2:	40 e8       	ldi	r20, 0x80	; 128
    24d4:	53 e4       	ldi	r21, 0x43	; 67
    24d6:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    24da:	dc 01       	movw	r26, r24
    24dc:	cb 01       	movw	r24, r22
    24de:	bc 01       	movw	r22, r24
    24e0:	cd 01       	movw	r24, r26
    24e2:	20 e0       	ldi	r18, 0x00	; 0
    24e4:	30 e0       	ldi	r19, 0x00	; 0
    24e6:	4a ef       	ldi	r20, 0xFA	; 250
    24e8:	55 e4       	ldi	r21, 0x45	; 69
    24ea:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__divsf3>
    24ee:	dc 01       	movw	r26, r24
    24f0:	cb 01       	movw	r24, r22
    24f2:	80 93 86 01 	sts	0x0186, r24
    24f6:	90 93 87 01 	sts	0x0187, r25
    24fa:	a0 93 88 01 	sts	0x0188, r26
    24fe:	b0 93 89 01 	sts	0x0189, r27
	NUM_OV_TIMER0 = DESIRED_TIME_TIMER0 / T_OV_TIMER0 ;                              //number of overflow wanted in entered if
    2502:	a0 90 7c 01 	lds	r10, 0x017C
    2506:	b0 90 7d 01 	lds	r11, 0x017D
    250a:	c0 90 7e 01 	lds	r12, 0x017E
    250e:	d0 90 7f 01 	lds	r13, 0x017F
    2512:	e0 90 80 01 	lds	r14, 0x0180
    2516:	f0 90 81 01 	lds	r15, 0x0181
    251a:	00 91 82 01 	lds	r16, 0x0182
    251e:	10 91 83 01 	lds	r17, 0x0183
    2522:	2a 2d       	mov	r18, r10
    2524:	3b 2d       	mov	r19, r11
    2526:	4c 2d       	mov	r20, r12
    2528:	5d 2d       	mov	r21, r13
    252a:	6e 2d       	mov	r22, r14
    252c:	7f 2d       	mov	r23, r15
    252e:	80 2f       	mov	r24, r16
    2530:	91 2f       	mov	r25, r17
    2532:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__floatundisf>
    2536:	dc 01       	movw	r26, r24
    2538:	cb 01       	movw	r24, r22
    253a:	20 91 86 01 	lds	r18, 0x0186
    253e:	30 91 87 01 	lds	r19, 0x0187
    2542:	40 91 88 01 	lds	r20, 0x0188
    2546:	50 91 89 01 	lds	r21, 0x0189
    254a:	bc 01       	movw	r22, r24
    254c:	cd 01       	movw	r24, r26
    254e:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__divsf3>
    2552:	dc 01       	movw	r26, r24
    2554:	cb 01       	movw	r24, r22
    2556:	80 93 8a 01 	sts	0x018A, r24
    255a:	90 93 8b 01 	sts	0x018B, r25
    255e:	a0 93 8c 01 	sts	0x018C, r26
    2562:	b0 93 8d 01 	sts	0x018D, r27
	PRE_LOAD_TIMER0  = NUM_OV_TIMER0 -( (u32)(DESIRED_TIME_TIMER0 /T_OV_TIMER0) );   //the value which should be in TCNT to make time more accurate
    2566:	60 90 8a 01 	lds	r6, 0x018A
    256a:	70 90 8b 01 	lds	r7, 0x018B
    256e:	80 90 8c 01 	lds	r8, 0x018C
    2572:	90 90 8d 01 	lds	r9, 0x018D
    2576:	a0 90 7c 01 	lds	r10, 0x017C
    257a:	b0 90 7d 01 	lds	r11, 0x017D
    257e:	c0 90 7e 01 	lds	r12, 0x017E
    2582:	d0 90 7f 01 	lds	r13, 0x017F
    2586:	e0 90 80 01 	lds	r14, 0x0180
    258a:	f0 90 81 01 	lds	r15, 0x0181
    258e:	00 91 82 01 	lds	r16, 0x0182
    2592:	10 91 83 01 	lds	r17, 0x0183
    2596:	2a 2d       	mov	r18, r10
    2598:	3b 2d       	mov	r19, r11
    259a:	4c 2d       	mov	r20, r12
    259c:	5d 2d       	mov	r21, r13
    259e:	6e 2d       	mov	r22, r14
    25a0:	7f 2d       	mov	r23, r15
    25a2:	80 2f       	mov	r24, r16
    25a4:	91 2f       	mov	r25, r17
    25a6:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__floatundisf>
    25aa:	dc 01       	movw	r26, r24
    25ac:	cb 01       	movw	r24, r22
    25ae:	20 91 86 01 	lds	r18, 0x0186
    25b2:	30 91 87 01 	lds	r19, 0x0187
    25b6:	40 91 88 01 	lds	r20, 0x0188
    25ba:	50 91 89 01 	lds	r21, 0x0189
    25be:	bc 01       	movw	r22, r24
    25c0:	cd 01       	movw	r24, r26
    25c2:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__divsf3>
    25c6:	dc 01       	movw	r26, r24
    25c8:	cb 01       	movw	r24, r22
    25ca:	bc 01       	movw	r22, r24
    25cc:	cd 01       	movw	r24, r26
    25ce:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    25d2:	dc 01       	movw	r26, r24
    25d4:	cb 01       	movw	r24, r22
    25d6:	cc 01       	movw	r24, r24
    25d8:	a0 e0       	ldi	r26, 0x00	; 0
    25da:	b0 e0       	ldi	r27, 0x00	; 0
    25dc:	bc 01       	movw	r22, r24
    25de:	cd 01       	movw	r24, r26
    25e0:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__floatunsisf>
    25e4:	9b 01       	movw	r18, r22
    25e6:	ac 01       	movw	r20, r24
    25e8:	c4 01       	movw	r24, r8
    25ea:	b3 01       	movw	r22, r6
    25ec:	0e 94 1c 03 	call	0x638	; 0x638 <__subsf3>
    25f0:	dc 01       	movw	r26, r24
    25f2:	cb 01       	movw	r24, r22
    25f4:	80 93 8e 01 	sts	0x018E, r24
    25f8:	90 93 8f 01 	sts	0x018F, r25
    25fc:	a0 93 90 01 	sts	0x0190, r26
    2600:	b0 93 91 01 	sts	0x0191, r27
	if ( NUM_OV_TIMER0 > (u32)NUM_OV_TIMER0 ){
    2604:	80 91 8a 01 	lds	r24, 0x018A
    2608:	90 91 8b 01 	lds	r25, 0x018B
    260c:	a0 91 8c 01 	lds	r26, 0x018C
    2610:	b0 91 8d 01 	lds	r27, 0x018D
    2614:	bc 01       	movw	r22, r24
    2616:	cd 01       	movw	r24, r26
    2618:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    261c:	dc 01       	movw	r26, r24
    261e:	cb 01       	movw	r24, r22
    2620:	cc 01       	movw	r24, r24
    2622:	a0 e0       	ldi	r26, 0x00	; 0
    2624:	b0 e0       	ldi	r27, 0x00	; 0
    2626:	bc 01       	movw	r22, r24
    2628:	cd 01       	movw	r24, r26
    262a:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__floatunsisf>
    262e:	dc 01       	movw	r26, r24
    2630:	cb 01       	movw	r24, r22
    2632:	20 91 8a 01 	lds	r18, 0x018A
    2636:	30 91 8b 01 	lds	r19, 0x018B
    263a:	40 91 8c 01 	lds	r20, 0x018C
    263e:	50 91 8d 01 	lds	r21, 0x018D
    2642:	bc 01       	movw	r22, r24
    2644:	cd 01       	movw	r24, r26
    2646:	0e 94 80 05 	call	0xb00	; 0xb00 <__ltsf2>
    264a:	88 23       	and	r24, r24
    264c:	d4 f4       	brge	.+52     	; 0x2682 <TIMER0_Set_Time_S+0x6ea>
		NUM_OV_TIMER0++;
    264e:	80 91 8a 01 	lds	r24, 0x018A
    2652:	90 91 8b 01 	lds	r25, 0x018B
    2656:	a0 91 8c 01 	lds	r26, 0x018C
    265a:	b0 91 8d 01 	lds	r27, 0x018D
    265e:	bc 01       	movw	r22, r24
    2660:	cd 01       	movw	r24, r26
    2662:	20 e0       	ldi	r18, 0x00	; 0
    2664:	30 e0       	ldi	r19, 0x00	; 0
    2666:	40 e8       	ldi	r20, 0x80	; 128
    2668:	5f e3       	ldi	r21, 0x3F	; 63
    266a:	0e 94 4d 03 	call	0x69a	; 0x69a <__addsf3>
    266e:	dc 01       	movw	r26, r24
    2670:	cb 01       	movw	r24, r22
    2672:	80 93 8a 01 	sts	0x018A, r24
    2676:	90 93 8b 01 	sts	0x018B, r25
    267a:	a0 93 8c 01 	sts	0x018C, r26
    267e:	b0 93 8d 01 	sts	0x018D, r27
	}//end if

	//to begin from specific value
	TCNT0 = 256-(256*PRE_LOAD_TIMER0 );
    2682:	02 e5       	ldi	r16, 0x52	; 82
    2684:	10 e0       	ldi	r17, 0x00	; 0
    2686:	80 91 8e 01 	lds	r24, 0x018E
    268a:	90 91 8f 01 	lds	r25, 0x018F
    268e:	a0 91 90 01 	lds	r26, 0x0190
    2692:	b0 91 91 01 	lds	r27, 0x0191
    2696:	bc 01       	movw	r22, r24
    2698:	cd 01       	movw	r24, r26
    269a:	20 e0       	ldi	r18, 0x00	; 0
    269c:	30 e0       	ldi	r19, 0x00	; 0
    269e:	40 e8       	ldi	r20, 0x80	; 128
    26a0:	53 ec       	ldi	r21, 0xC3	; 195
    26a2:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    26a6:	dc 01       	movw	r26, r24
    26a8:	cb 01       	movw	r24, r22
    26aa:	bc 01       	movw	r22, r24
    26ac:	cd 01       	movw	r24, r26
    26ae:	20 e0       	ldi	r18, 0x00	; 0
    26b0:	30 e0       	ldi	r19, 0x00	; 0
    26b2:	40 e8       	ldi	r20, 0x80	; 128
    26b4:	53 e4       	ldi	r21, 0x43	; 67
    26b6:	0e 94 4d 03 	call	0x69a	; 0x69a <__addsf3>
    26ba:	dc 01       	movw	r26, r24
    26bc:	cb 01       	movw	r24, r22
    26be:	bc 01       	movw	r22, r24
    26c0:	cd 01       	movw	r24, r26
    26c2:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    26c6:	dc 01       	movw	r26, r24
    26c8:	cb 01       	movw	r24, r22
    26ca:	f8 01       	movw	r30, r16
    26cc:	80 83       	st	Z, r24
}
    26ce:	c1 5b       	subi	r28, 0xB1	; 177
    26d0:	df 4f       	sbci	r29, 0xFF	; 255
    26d2:	0f b6       	in	r0, 0x3f	; 63
    26d4:	f8 94       	cli
    26d6:	de bf       	out	0x3e, r29	; 62
    26d8:	0f be       	out	0x3f, r0	; 63
    26da:	cd bf       	out	0x3d, r28	; 61
    26dc:	cf 91       	pop	r28
    26de:	df 91       	pop	r29
    26e0:	1f 91       	pop	r17
    26e2:	0f 91       	pop	r16
    26e4:	ff 90       	pop	r15
    26e6:	ef 90       	pop	r14
    26e8:	df 90       	pop	r13
    26ea:	cf 90       	pop	r12
    26ec:	bf 90       	pop	r11
    26ee:	af 90       	pop	r10
    26f0:	9f 90       	pop	r9
    26f2:	8f 90       	pop	r8
    26f4:	7f 90       	pop	r7
    26f6:	6f 90       	pop	r6
    26f8:	08 95       	ret

000026fa <TIMER0_Set_Time_mS>:

void TIMER0_Set_Time_mS (u16 Copy_U8Time){
    26fa:	6f 92       	push	r6
    26fc:	7f 92       	push	r7
    26fe:	8f 92       	push	r8
    2700:	9f 92       	push	r9
    2702:	af 92       	push	r10
    2704:	bf 92       	push	r11
    2706:	cf 92       	push	r12
    2708:	df 92       	push	r13
    270a:	ef 92       	push	r14
    270c:	ff 92       	push	r15
    270e:	0f 93       	push	r16
    2710:	1f 93       	push	r17
    2712:	df 93       	push	r29
    2714:	cf 93       	push	r28
    2716:	00 d0       	rcall	.+0      	; 0x2718 <TIMER0_Set_Time_mS+0x1e>
    2718:	cd b7       	in	r28, 0x3d	; 61
    271a:	de b7       	in	r29, 0x3e	; 62
    271c:	9a 83       	std	Y+2, r25	; 0x02
    271e:	89 83       	std	Y+1, r24	; 0x01
	DESIRED_TIME_TIMER0 = Copy_U8Time ;                                              //time in ms
    2720:	89 81       	ldd	r24, Y+1	; 0x01
    2722:	9a 81       	ldd	r25, Y+2	; 0x02
    2724:	9c 01       	movw	r18, r24
    2726:	40 e0       	ldi	r20, 0x00	; 0
    2728:	50 e0       	ldi	r21, 0x00	; 0
    272a:	60 e0       	ldi	r22, 0x00	; 0
    272c:	70 e0       	ldi	r23, 0x00	; 0
    272e:	80 e0       	ldi	r24, 0x00	; 0
    2730:	90 e0       	ldi	r25, 0x00	; 0
    2732:	20 93 7c 01 	sts	0x017C, r18
    2736:	30 93 7d 01 	sts	0x017D, r19
    273a:	40 93 7e 01 	sts	0x017E, r20
    273e:	50 93 7f 01 	sts	0x017F, r21
    2742:	60 93 80 01 	sts	0x0180, r22
    2746:	70 93 81 01 	sts	0x0181, r23
    274a:	80 93 82 01 	sts	0x0182, r24
    274e:	90 93 83 01 	sts	0x0183, r25
    T_OV_TIMER0 = (256*(f32)PRE_SCALAR_TIMER0)/8000 ;                                //time in us
    2752:	80 91 84 01 	lds	r24, 0x0184
    2756:	90 91 85 01 	lds	r25, 0x0185
    275a:	cc 01       	movw	r24, r24
    275c:	a0 e0       	ldi	r26, 0x00	; 0
    275e:	b0 e0       	ldi	r27, 0x00	; 0
    2760:	bc 01       	movw	r22, r24
    2762:	cd 01       	movw	r24, r26
    2764:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__floatunsisf>
    2768:	dc 01       	movw	r26, r24
    276a:	cb 01       	movw	r24, r22
    276c:	bc 01       	movw	r22, r24
    276e:	cd 01       	movw	r24, r26
    2770:	20 e0       	ldi	r18, 0x00	; 0
    2772:	30 e0       	ldi	r19, 0x00	; 0
    2774:	40 e8       	ldi	r20, 0x80	; 128
    2776:	53 e4       	ldi	r21, 0x43	; 67
    2778:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    277c:	dc 01       	movw	r26, r24
    277e:	cb 01       	movw	r24, r22
    2780:	bc 01       	movw	r22, r24
    2782:	cd 01       	movw	r24, r26
    2784:	20 e0       	ldi	r18, 0x00	; 0
    2786:	30 e0       	ldi	r19, 0x00	; 0
    2788:	4a ef       	ldi	r20, 0xFA	; 250
    278a:	55 e4       	ldi	r21, 0x45	; 69
    278c:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__divsf3>
    2790:	dc 01       	movw	r26, r24
    2792:	cb 01       	movw	r24, r22
    2794:	80 93 86 01 	sts	0x0186, r24
    2798:	90 93 87 01 	sts	0x0187, r25
    279c:	a0 93 88 01 	sts	0x0188, r26
    27a0:	b0 93 89 01 	sts	0x0189, r27
	NUM_OV_TIMER0 = DESIRED_TIME_TIMER0 / T_OV_TIMER0 ;                              //number of overflow wanted in entered if
    27a4:	a0 90 7c 01 	lds	r10, 0x017C
    27a8:	b0 90 7d 01 	lds	r11, 0x017D
    27ac:	c0 90 7e 01 	lds	r12, 0x017E
    27b0:	d0 90 7f 01 	lds	r13, 0x017F
    27b4:	e0 90 80 01 	lds	r14, 0x0180
    27b8:	f0 90 81 01 	lds	r15, 0x0181
    27bc:	00 91 82 01 	lds	r16, 0x0182
    27c0:	10 91 83 01 	lds	r17, 0x0183
    27c4:	2a 2d       	mov	r18, r10
    27c6:	3b 2d       	mov	r19, r11
    27c8:	4c 2d       	mov	r20, r12
    27ca:	5d 2d       	mov	r21, r13
    27cc:	6e 2d       	mov	r22, r14
    27ce:	7f 2d       	mov	r23, r15
    27d0:	80 2f       	mov	r24, r16
    27d2:	91 2f       	mov	r25, r17
    27d4:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__floatundisf>
    27d8:	dc 01       	movw	r26, r24
    27da:	cb 01       	movw	r24, r22
    27dc:	20 91 86 01 	lds	r18, 0x0186
    27e0:	30 91 87 01 	lds	r19, 0x0187
    27e4:	40 91 88 01 	lds	r20, 0x0188
    27e8:	50 91 89 01 	lds	r21, 0x0189
    27ec:	bc 01       	movw	r22, r24
    27ee:	cd 01       	movw	r24, r26
    27f0:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__divsf3>
    27f4:	dc 01       	movw	r26, r24
    27f6:	cb 01       	movw	r24, r22
    27f8:	80 93 8a 01 	sts	0x018A, r24
    27fc:	90 93 8b 01 	sts	0x018B, r25
    2800:	a0 93 8c 01 	sts	0x018C, r26
    2804:	b0 93 8d 01 	sts	0x018D, r27
	PRE_LOAD_TIMER0  = NUM_OV_TIMER0 -( (u32)(DESIRED_TIME_TIMER0 /T_OV_TIMER0) );   //the value which should be in TCNT to make time more accurate
    2808:	60 90 8a 01 	lds	r6, 0x018A
    280c:	70 90 8b 01 	lds	r7, 0x018B
    2810:	80 90 8c 01 	lds	r8, 0x018C
    2814:	90 90 8d 01 	lds	r9, 0x018D
    2818:	a0 90 7c 01 	lds	r10, 0x017C
    281c:	b0 90 7d 01 	lds	r11, 0x017D
    2820:	c0 90 7e 01 	lds	r12, 0x017E
    2824:	d0 90 7f 01 	lds	r13, 0x017F
    2828:	e0 90 80 01 	lds	r14, 0x0180
    282c:	f0 90 81 01 	lds	r15, 0x0181
    2830:	00 91 82 01 	lds	r16, 0x0182
    2834:	10 91 83 01 	lds	r17, 0x0183
    2838:	2a 2d       	mov	r18, r10
    283a:	3b 2d       	mov	r19, r11
    283c:	4c 2d       	mov	r20, r12
    283e:	5d 2d       	mov	r21, r13
    2840:	6e 2d       	mov	r22, r14
    2842:	7f 2d       	mov	r23, r15
    2844:	80 2f       	mov	r24, r16
    2846:	91 2f       	mov	r25, r17
    2848:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__floatundisf>
    284c:	dc 01       	movw	r26, r24
    284e:	cb 01       	movw	r24, r22
    2850:	20 91 86 01 	lds	r18, 0x0186
    2854:	30 91 87 01 	lds	r19, 0x0187
    2858:	40 91 88 01 	lds	r20, 0x0188
    285c:	50 91 89 01 	lds	r21, 0x0189
    2860:	bc 01       	movw	r22, r24
    2862:	cd 01       	movw	r24, r26
    2864:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__divsf3>
    2868:	dc 01       	movw	r26, r24
    286a:	cb 01       	movw	r24, r22
    286c:	bc 01       	movw	r22, r24
    286e:	cd 01       	movw	r24, r26
    2870:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2874:	dc 01       	movw	r26, r24
    2876:	cb 01       	movw	r24, r22
    2878:	cc 01       	movw	r24, r24
    287a:	a0 e0       	ldi	r26, 0x00	; 0
    287c:	b0 e0       	ldi	r27, 0x00	; 0
    287e:	bc 01       	movw	r22, r24
    2880:	cd 01       	movw	r24, r26
    2882:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__floatunsisf>
    2886:	9b 01       	movw	r18, r22
    2888:	ac 01       	movw	r20, r24
    288a:	c4 01       	movw	r24, r8
    288c:	b3 01       	movw	r22, r6
    288e:	0e 94 1c 03 	call	0x638	; 0x638 <__subsf3>
    2892:	dc 01       	movw	r26, r24
    2894:	cb 01       	movw	r24, r22
    2896:	80 93 8e 01 	sts	0x018E, r24
    289a:	90 93 8f 01 	sts	0x018F, r25
    289e:	a0 93 90 01 	sts	0x0190, r26
    28a2:	b0 93 91 01 	sts	0x0191, r27
	if ( NUM_OV_TIMER0 > (u32)NUM_OV_TIMER0 ){
    28a6:	80 91 8a 01 	lds	r24, 0x018A
    28aa:	90 91 8b 01 	lds	r25, 0x018B
    28ae:	a0 91 8c 01 	lds	r26, 0x018C
    28b2:	b0 91 8d 01 	lds	r27, 0x018D
    28b6:	bc 01       	movw	r22, r24
    28b8:	cd 01       	movw	r24, r26
    28ba:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    28be:	dc 01       	movw	r26, r24
    28c0:	cb 01       	movw	r24, r22
    28c2:	cc 01       	movw	r24, r24
    28c4:	a0 e0       	ldi	r26, 0x00	; 0
    28c6:	b0 e0       	ldi	r27, 0x00	; 0
    28c8:	bc 01       	movw	r22, r24
    28ca:	cd 01       	movw	r24, r26
    28cc:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__floatunsisf>
    28d0:	dc 01       	movw	r26, r24
    28d2:	cb 01       	movw	r24, r22
    28d4:	20 91 8a 01 	lds	r18, 0x018A
    28d8:	30 91 8b 01 	lds	r19, 0x018B
    28dc:	40 91 8c 01 	lds	r20, 0x018C
    28e0:	50 91 8d 01 	lds	r21, 0x018D
    28e4:	bc 01       	movw	r22, r24
    28e6:	cd 01       	movw	r24, r26
    28e8:	0e 94 80 05 	call	0xb00	; 0xb00 <__ltsf2>
    28ec:	88 23       	and	r24, r24
    28ee:	d4 f4       	brge	.+52     	; 0x2924 <TIMER0_Set_Time_mS+0x22a>
		NUM_OV_TIMER0++;
    28f0:	80 91 8a 01 	lds	r24, 0x018A
    28f4:	90 91 8b 01 	lds	r25, 0x018B
    28f8:	a0 91 8c 01 	lds	r26, 0x018C
    28fc:	b0 91 8d 01 	lds	r27, 0x018D
    2900:	bc 01       	movw	r22, r24
    2902:	cd 01       	movw	r24, r26
    2904:	20 e0       	ldi	r18, 0x00	; 0
    2906:	30 e0       	ldi	r19, 0x00	; 0
    2908:	40 e8       	ldi	r20, 0x80	; 128
    290a:	5f e3       	ldi	r21, 0x3F	; 63
    290c:	0e 94 4d 03 	call	0x69a	; 0x69a <__addsf3>
    2910:	dc 01       	movw	r26, r24
    2912:	cb 01       	movw	r24, r22
    2914:	80 93 8a 01 	sts	0x018A, r24
    2918:	90 93 8b 01 	sts	0x018B, r25
    291c:	a0 93 8c 01 	sts	0x018C, r26
    2920:	b0 93 8d 01 	sts	0x018D, r27
#if PRE_TYPE_TIMER0 != PRE_8
#error "YOU SELECTED PRE_SCALAR MAKE MORE THAN 1 ms"
#endif

	//to begin from specific value
	TCNT0 = 256-(256*PRE_LOAD_TIMER0 );
    2924:	02 e5       	ldi	r16, 0x52	; 82
    2926:	10 e0       	ldi	r17, 0x00	; 0
    2928:	80 91 8e 01 	lds	r24, 0x018E
    292c:	90 91 8f 01 	lds	r25, 0x018F
    2930:	a0 91 90 01 	lds	r26, 0x0190
    2934:	b0 91 91 01 	lds	r27, 0x0191
    2938:	bc 01       	movw	r22, r24
    293a:	cd 01       	movw	r24, r26
    293c:	20 e0       	ldi	r18, 0x00	; 0
    293e:	30 e0       	ldi	r19, 0x00	; 0
    2940:	40 e8       	ldi	r20, 0x80	; 128
    2942:	53 ec       	ldi	r21, 0xC3	; 195
    2944:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    2948:	dc 01       	movw	r26, r24
    294a:	cb 01       	movw	r24, r22
    294c:	bc 01       	movw	r22, r24
    294e:	cd 01       	movw	r24, r26
    2950:	20 e0       	ldi	r18, 0x00	; 0
    2952:	30 e0       	ldi	r19, 0x00	; 0
    2954:	40 e8       	ldi	r20, 0x80	; 128
    2956:	53 e4       	ldi	r21, 0x43	; 67
    2958:	0e 94 4d 03 	call	0x69a	; 0x69a <__addsf3>
    295c:	dc 01       	movw	r26, r24
    295e:	cb 01       	movw	r24, r22
    2960:	bc 01       	movw	r22, r24
    2962:	cd 01       	movw	r24, r26
    2964:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2968:	dc 01       	movw	r26, r24
    296a:	cb 01       	movw	r24, r22
    296c:	f8 01       	movw	r30, r16
    296e:	80 83       	st	Z, r24
}
    2970:	0f 90       	pop	r0
    2972:	0f 90       	pop	r0
    2974:	cf 91       	pop	r28
    2976:	df 91       	pop	r29
    2978:	1f 91       	pop	r17
    297a:	0f 91       	pop	r16
    297c:	ff 90       	pop	r15
    297e:	ef 90       	pop	r14
    2980:	df 90       	pop	r13
    2982:	cf 90       	pop	r12
    2984:	bf 90       	pop	r11
    2986:	af 90       	pop	r10
    2988:	9f 90       	pop	r9
    298a:	8f 90       	pop	r8
    298c:	7f 90       	pop	r7
    298e:	6f 90       	pop	r6
    2990:	08 95       	ret

00002992 <Timer0_VidSETDUTY>:


void Timer0_VidSETDUTY (u8 duty ) {
    2992:	df 93       	push	r29
    2994:	cf 93       	push	r28
    2996:	0f 92       	push	r0
    2998:	cd b7       	in	r28, 0x3d	; 61
    299a:	de b7       	in	r29, 0x3e	; 62
    299c:	89 83       	std	Y+1, r24	; 0x01
	duty = (u8)( (u16)duty*255/100 ) ;
    299e:	89 81       	ldd	r24, Y+1	; 0x01
    29a0:	48 2f       	mov	r20, r24
    29a2:	50 e0       	ldi	r21, 0x00	; 0
    29a4:	ca 01       	movw	r24, r20
    29a6:	9c 01       	movw	r18, r24
    29a8:	22 0f       	add	r18, r18
    29aa:	33 1f       	adc	r19, r19
    29ac:	c9 01       	movw	r24, r18
    29ae:	96 95       	lsr	r25
    29b0:	98 2f       	mov	r25, r24
    29b2:	88 27       	eor	r24, r24
    29b4:	97 95       	ror	r25
    29b6:	87 95       	ror	r24
    29b8:	82 1b       	sub	r24, r18
    29ba:	93 0b       	sbc	r25, r19
    29bc:	84 0f       	add	r24, r20
    29be:	95 1f       	adc	r25, r21
    29c0:	24 e6       	ldi	r18, 0x64	; 100
    29c2:	30 e0       	ldi	r19, 0x00	; 0
    29c4:	b9 01       	movw	r22, r18
    29c6:	0e 94 78 2e 	call	0x5cf0	; 0x5cf0 <__udivmodhi4>
    29ca:	cb 01       	movw	r24, r22
    29cc:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = duty ;
    29ce:	ec e5       	ldi	r30, 0x5C	; 92
    29d0:	f0 e0       	ldi	r31, 0x00	; 0
    29d2:	89 81       	ldd	r24, Y+1	; 0x01
    29d4:	80 83       	st	Z, r24
}
    29d6:	0f 90       	pop	r0
    29d8:	cf 91       	pop	r28
    29da:	df 91       	pop	r29
    29dc:	08 95       	ret

000029de <TIMER1_VidInitializeMode14>:



/*******************To initialize OV or COMPARE or FAST_PWM mode***************************************/
//to check that you don't use OV or COMPARE or FAST_PWM mode
void TIMER1_VidInitializeMode14 (void) {
    29de:	df 93       	push	r29
    29e0:	cf 93       	push	r28
    29e2:	cd b7       	in	r28, 0x3d	; 61
    29e4:	de b7       	in	r29, 0x3e	; 62

	//COM1A1/COM1B1 COM1A0/COM1B0  1 0 Clear OC1A/OC1B on compare match, set  OC1A/OC1B at TOP
	TCCR1A = 0b10100000 ;
    29e6:	ef e4       	ldi	r30, 0x4F	; 79
    29e8:	f0 e0       	ldi	r31, 0x00	; 0
    29ea:	80 ea       	ldi	r24, 0xA0	; 160
    29ec:	80 83       	st	Z, r24

	//in next update we will make Timer not fixed modes
	/*WGM13 WGM12	WGM11	WGM10	Timer/Counter Mode of Operation TOP Update of OCR1x	TOV1 Flag Set 	on
      1      1       1        0        Fast PWM                      ICR1 TOP TOP*/
	SET_BIT(TCCR1B,WGM13);
    29ee:	ae e4       	ldi	r26, 0x4E	; 78
    29f0:	b0 e0       	ldi	r27, 0x00	; 0
    29f2:	ee e4       	ldi	r30, 0x4E	; 78
    29f4:	f0 e0       	ldi	r31, 0x00	; 0
    29f6:	80 81       	ld	r24, Z
    29f8:	80 61       	ori	r24, 0x10	; 16
    29fa:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM12);
    29fc:	ae e4       	ldi	r26, 0x4E	; 78
    29fe:	b0 e0       	ldi	r27, 0x00	; 0
    2a00:	ee e4       	ldi	r30, 0x4E	; 78
    2a02:	f0 e0       	ldi	r31, 0x00	; 0
    2a04:	80 81       	ld	r24, Z
    2a06:	88 60       	ori	r24, 0x08	; 8
    2a08:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,WGM11);
    2a0a:	af e4       	ldi	r26, 0x4F	; 79
    2a0c:	b0 e0       	ldi	r27, 0x00	; 0
    2a0e:	ef e4       	ldi	r30, 0x4F	; 79
    2a10:	f0 e0       	ldi	r31, 0x00	; 0
    2a12:	80 81       	ld	r24, Z
    2a14:	82 60       	ori	r24, 0x02	; 2
    2a16:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,WGM10);
    2a18:	af e4       	ldi	r26, 0x4F	; 79
    2a1a:	b0 e0       	ldi	r27, 0x00	; 0
    2a1c:	ef e4       	ldi	r30, 0x4F	; 79
    2a1e:	f0 e0       	ldi	r31, 0x00	; 0
    2a20:	80 81       	ld	r24, Z
    2a22:	8e 7f       	andi	r24, 0xFE	; 254
    2a24:	8c 93       	st	X, r24

	//define pin of timer1
	DIO_VidSetPinDirection(3,5,1);
    2a26:	83 e0       	ldi	r24, 0x03	; 3
    2a28:	65 e0       	ldi	r22, 0x05	; 5
    2a2a:	41 e0       	ldi	r20, 0x01	; 1
    2a2c:	0e 94 4f 09 	call	0x129e	; 0x129e <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(3,4,1);
    2a30:	83 e0       	ldi	r24, 0x03	; 3
    2a32:	64 e0       	ldi	r22, 0x04	; 4
    2a34:	41 e0       	ldi	r20, 0x01	; 1
    2a36:	0e 94 4f 09 	call	0x129e	; 0x129e <DIO_VidSetPinDirection>
	DIO_VidSetPinValue(3,5,0);
    2a3a:	83 e0       	ldi	r24, 0x03	; 3
    2a3c:	65 e0       	ldi	r22, 0x05	; 5
    2a3e:	40 e0       	ldi	r20, 0x00	; 0
    2a40:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(3,4,0);
    2a44:	83 e0       	ldi	r24, 0x03	; 3
    2a46:	64 e0       	ldi	r22, 0x04	; 4
    2a48:	40 e0       	ldi	r20, 0x00	; 0
    2a4a:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_VidSetPinValue>
	CLR_BIT(TCCR1B,CS12);
	CLR_BIT(TCCR1B,CS11);
	SET_BIT(TCCR1B,CS10);
	PRE_SCALAR_TIMER1 = 1 ;
#elif PRE_TYPE_TIMER1 == PRE_8
	CLR_BIT(TCCR1B,CS12);
    2a4e:	ae e4       	ldi	r26, 0x4E	; 78
    2a50:	b0 e0       	ldi	r27, 0x00	; 0
    2a52:	ee e4       	ldi	r30, 0x4E	; 78
    2a54:	f0 e0       	ldi	r31, 0x00	; 0
    2a56:	80 81       	ld	r24, Z
    2a58:	8b 7f       	andi	r24, 0xFB	; 251
    2a5a:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,CS11);
    2a5c:	ae e4       	ldi	r26, 0x4E	; 78
    2a5e:	b0 e0       	ldi	r27, 0x00	; 0
    2a60:	ee e4       	ldi	r30, 0x4E	; 78
    2a62:	f0 e0       	ldi	r31, 0x00	; 0
    2a64:	80 81       	ld	r24, Z
    2a66:	82 60       	ori	r24, 0x02	; 2
    2a68:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,CS10);
    2a6a:	ae e4       	ldi	r26, 0x4E	; 78
    2a6c:	b0 e0       	ldi	r27, 0x00	; 0
    2a6e:	ee e4       	ldi	r30, 0x4E	; 78
    2a70:	f0 e0       	ldi	r31, 0x00	; 0
    2a72:	80 81       	ld	r24, Z
    2a74:	8e 7f       	andi	r24, 0xFE	; 254
    2a76:	8c 93       	st	X, r24
	PRE_SCALAR_TIMER1 = 8 ;
    2a78:	88 e0       	ldi	r24, 0x08	; 8
    2a7a:	90 e0       	ldi	r25, 0x00	; 0
    2a7c:	90 93 93 01 	sts	0x0193, r25
    2a80:	80 93 92 01 	sts	0x0192, r24
	CLR_BIT(TCCR1B,CS11);
	SET_BIT(TCCR1B,CS10);
	PRE_SCALAR_TIMER1 = 1024 ;
#endif

}//end FUNC TIMER_VidInitialize
    2a84:	cf 91       	pop	r28
    2a86:	df 91       	pop	r29
    2a88:	08 95       	ret

00002a8a <Timer1_VidSETFreqency>:

/***************** Servo in MODE 14  *****************************/
//to set the top of counting in PWM
void Timer1_VidSETFreqency (){
    2a8a:	df 93       	push	r29
    2a8c:	cf 93       	push	r28
    2a8e:	cd b7       	in	r28, 0x3d	; 61
    2a90:	de b7       	in	r29, 0x3e	; 62
	ICR1H = (u8)(top_count>>8) ;
	ICR1L = (u8)(top_count) ;
	*/

	/* set duty accroding to the wanted frequency */
	ICR1H = 0b10011000 ;
    2a92:	e7 e4       	ldi	r30, 0x47	; 71
    2a94:	f0 e0       	ldi	r31, 0x00	; 0
    2a96:	88 e9       	ldi	r24, 0x98	; 152
    2a98:	80 83       	st	Z, r24
	ICR1L = 0b00100000 ;
    2a9a:	e6 e4       	ldi	r30, 0x46	; 70
    2a9c:	f0 e0       	ldi	r31, 0x00	; 0
    2a9e:	80 e2       	ldi	r24, 0x20	; 32
    2aa0:	80 83       	st	Z, r24
}
    2aa2:	cf 91       	pop	r28
    2aa4:	df 91       	pop	r29
    2aa6:	08 95       	ret

00002aa8 <Timer1_VidSETDUTY>:

//in next update we want to make duty by _precentage %
void Timer1_VidSETDUTY (u16 Copy_U8DutyA , u16 Copy_U8DutyB ) {
    2aa8:	df 93       	push	r29
    2aaa:	cf 93       	push	r28
    2aac:	00 d0       	rcall	.+0      	; 0x2aae <Timer1_VidSETDUTY+0x6>
    2aae:	00 d0       	rcall	.+0      	; 0x2ab0 <Timer1_VidSETDUTY+0x8>
    2ab0:	cd b7       	in	r28, 0x3d	; 61
    2ab2:	de b7       	in	r29, 0x3e	; 62
    2ab4:	9a 83       	std	Y+2, r25	; 0x02
    2ab6:	89 83       	std	Y+1, r24	; 0x01
    2ab8:	7c 83       	std	Y+4, r23	; 0x04
    2aba:	6b 83       	std	Y+3, r22	; 0x03
	OCR1AH = (u8)(Copy_U8DutyA>>8) ;
    2abc:	eb e4       	ldi	r30, 0x4B	; 75
    2abe:	f0 e0       	ldi	r31, 0x00	; 0
    2ac0:	89 81       	ldd	r24, Y+1	; 0x01
    2ac2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ac4:	89 2f       	mov	r24, r25
    2ac6:	99 27       	eor	r25, r25
    2ac8:	80 83       	st	Z, r24
	OCR1AL = (u8)Copy_U8DutyA ;
    2aca:	ea e4       	ldi	r30, 0x4A	; 74
    2acc:	f0 e0       	ldi	r31, 0x00	; 0
    2ace:	89 81       	ldd	r24, Y+1	; 0x01
    2ad0:	80 83       	st	Z, r24

	OCR1BH = (u8)(Copy_U8DutyB>>8) ;
    2ad2:	e9 e4       	ldi	r30, 0x49	; 73
    2ad4:	f0 e0       	ldi	r31, 0x00	; 0
    2ad6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ad8:	9c 81       	ldd	r25, Y+4	; 0x04
    2ada:	89 2f       	mov	r24, r25
    2adc:	99 27       	eor	r25, r25
    2ade:	80 83       	st	Z, r24
	OCR1BL = (u8)Copy_U8DutyB ;
    2ae0:	e8 e4       	ldi	r30, 0x48	; 72
    2ae2:	f0 e0       	ldi	r31, 0x00	; 0
    2ae4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae6:	80 83       	st	Z, r24
}
    2ae8:	0f 90       	pop	r0
    2aea:	0f 90       	pop	r0
    2aec:	0f 90       	pop	r0
    2aee:	0f 90       	pop	r0
    2af0:	cf 91       	pop	r28
    2af2:	df 91       	pop	r29
    2af4:	08 95       	ret

00002af6 <TIMER1_VidInitializeMode15>:


/*Servo in mode 15*/
void TIMER1_VidInitializeMode15(u8 Mode,u8 ModelA,u8 ModelB){
    2af6:	df 93       	push	r29
    2af8:	cf 93       	push	r28
    2afa:	cd b7       	in	r28, 0x3d	; 61
    2afc:	de b7       	in	r29, 0x3e	; 62
    2afe:	29 97       	sbiw	r28, 0x09	; 9
    2b00:	0f b6       	in	r0, 0x3f	; 63
    2b02:	f8 94       	cli
    2b04:	de bf       	out	0x3e, r29	; 62
    2b06:	0f be       	out	0x3f, r0	; 63
    2b08:	cd bf       	out	0x3d, r28	; 61
    2b0a:	89 83       	std	Y+1, r24	; 0x01
    2b0c:	6a 83       	std	Y+2, r22	; 0x02
    2b0e:	4b 83       	std	Y+3, r20	; 0x03
	switch(Mode){
    2b10:	89 81       	ldd	r24, Y+1	; 0x01
    2b12:	28 2f       	mov	r18, r24
    2b14:	30 e0       	ldi	r19, 0x00	; 0
    2b16:	39 87       	std	Y+9, r19	; 0x09
    2b18:	28 87       	std	Y+8, r18	; 0x08
    2b1a:	88 85       	ldd	r24, Y+8	; 0x08
    2b1c:	99 85       	ldd	r25, Y+9	; 0x09
    2b1e:	8e 30       	cpi	r24, 0x0E	; 14
    2b20:	91 05       	cpc	r25, r1
    2b22:	31 f0       	breq	.+12     	; 0x2b30 <TIMER1_VidInitializeMode15+0x3a>
    2b24:	28 85       	ldd	r18, Y+8	; 0x08
    2b26:	39 85       	ldd	r19, Y+9	; 0x09
    2b28:	2f 30       	cpi	r18, 0x0F	; 15
    2b2a:	31 05       	cpc	r19, r1
    2b2c:	f1 f0       	breq	.+60     	; 0x2b6a <TIMER1_VidInitializeMode15+0x74>
    2b2e:	39 c0       	rjmp	.+114    	; 0x2ba2 <TIMER1_VidInitializeMode15+0xac>
	   case  FAST_PWM_ICR1 :
		   CLR_BIT(TCCR1A,WGM10);
    2b30:	af e4       	ldi	r26, 0x4F	; 79
    2b32:	b0 e0       	ldi	r27, 0x00	; 0
    2b34:	ef e4       	ldi	r30, 0x4F	; 79
    2b36:	f0 e0       	ldi	r31, 0x00	; 0
    2b38:	80 81       	ld	r24, Z
    2b3a:	8e 7f       	andi	r24, 0xFE	; 254
    2b3c:	8c 93       	st	X, r24
		   SET_BIT(TCCR1A,WGM11);
    2b3e:	af e4       	ldi	r26, 0x4F	; 79
    2b40:	b0 e0       	ldi	r27, 0x00	; 0
    2b42:	ef e4       	ldi	r30, 0x4F	; 79
    2b44:	f0 e0       	ldi	r31, 0x00	; 0
    2b46:	80 81       	ld	r24, Z
    2b48:	82 60       	ori	r24, 0x02	; 2
    2b4a:	8c 93       	st	X, r24
		   SET_BIT(TCCR1B,WGM12);
    2b4c:	ae e4       	ldi	r26, 0x4E	; 78
    2b4e:	b0 e0       	ldi	r27, 0x00	; 0
    2b50:	ee e4       	ldi	r30, 0x4E	; 78
    2b52:	f0 e0       	ldi	r31, 0x00	; 0
    2b54:	80 81       	ld	r24, Z
    2b56:	88 60       	ori	r24, 0x08	; 8
    2b58:	8c 93       	st	X, r24
		   SET_BIT(TCCR1B,WGM13);
    2b5a:	ae e4       	ldi	r26, 0x4E	; 78
    2b5c:	b0 e0       	ldi	r27, 0x00	; 0
    2b5e:	ee e4       	ldi	r30, 0x4E	; 78
    2b60:	f0 e0       	ldi	r31, 0x00	; 0
    2b62:	80 81       	ld	r24, Z
    2b64:	80 61       	ori	r24, 0x10	; 16
    2b66:	8c 93       	st	X, r24
    2b68:	1c c0       	rjmp	.+56     	; 0x2ba2 <TIMER1_VidInitializeMode15+0xac>
	       break                ;
	   case  FAST_PWM_OCR1A :
		   SET_BIT(TCCR1A,WGM10);
    2b6a:	af e4       	ldi	r26, 0x4F	; 79
    2b6c:	b0 e0       	ldi	r27, 0x00	; 0
    2b6e:	ef e4       	ldi	r30, 0x4F	; 79
    2b70:	f0 e0       	ldi	r31, 0x00	; 0
    2b72:	80 81       	ld	r24, Z
    2b74:	81 60       	ori	r24, 0x01	; 1
    2b76:	8c 93       	st	X, r24
		   SET_BIT(TCCR1A,WGM11);
    2b78:	af e4       	ldi	r26, 0x4F	; 79
    2b7a:	b0 e0       	ldi	r27, 0x00	; 0
    2b7c:	ef e4       	ldi	r30, 0x4F	; 79
    2b7e:	f0 e0       	ldi	r31, 0x00	; 0
    2b80:	80 81       	ld	r24, Z
    2b82:	82 60       	ori	r24, 0x02	; 2
    2b84:	8c 93       	st	X, r24
		   SET_BIT(TCCR1B,WGM12);
    2b86:	ae e4       	ldi	r26, 0x4E	; 78
    2b88:	b0 e0       	ldi	r27, 0x00	; 0
    2b8a:	ee e4       	ldi	r30, 0x4E	; 78
    2b8c:	f0 e0       	ldi	r31, 0x00	; 0
    2b8e:	80 81       	ld	r24, Z
    2b90:	88 60       	ori	r24, 0x08	; 8
    2b92:	8c 93       	st	X, r24
		   SET_BIT(TCCR1B,WGM13);
    2b94:	ae e4       	ldi	r26, 0x4E	; 78
    2b96:	b0 e0       	ldi	r27, 0x00	; 0
    2b98:	ee e4       	ldi	r30, 0x4E	; 78
    2b9a:	f0 e0       	ldi	r31, 0x00	; 0
    2b9c:	80 81       	ld	r24, Z
    2b9e:	80 61       	ori	r24, 0x10	; 16
    2ba0:	8c 93       	st	X, r24
	       break                ;
	}
	switch(ModelA){
    2ba2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba4:	28 2f       	mov	r18, r24
    2ba6:	30 e0       	ldi	r19, 0x00	; 0
    2ba8:	3f 83       	std	Y+7, r19	; 0x07
    2baa:	2e 83       	std	Y+6, r18	; 0x06
    2bac:	8e 81       	ldd	r24, Y+6	; 0x06
    2bae:	9f 81       	ldd	r25, Y+7	; 0x07
    2bb0:	81 30       	cpi	r24, 0x01	; 1
    2bb2:	91 05       	cpc	r25, r1
    2bb4:	21 f1       	breq	.+72     	; 0x2bfe <TIMER1_VidInitializeMode15+0x108>
    2bb6:	2e 81       	ldd	r18, Y+6	; 0x06
    2bb8:	3f 81       	ldd	r19, Y+7	; 0x07
    2bba:	22 30       	cpi	r18, 0x02	; 2
    2bbc:	31 05       	cpc	r19, r1
    2bbe:	2c f4       	brge	.+10     	; 0x2bca <TIMER1_VidInitializeMode15+0xd4>
    2bc0:	8e 81       	ldd	r24, Y+6	; 0x06
    2bc2:	9f 81       	ldd	r25, Y+7	; 0x07
    2bc4:	00 97       	sbiw	r24, 0x00	; 0
    2bc6:	61 f0       	breq	.+24     	; 0x2be0 <TIMER1_VidInitializeMode15+0xea>
    2bc8:	46 c0       	rjmp	.+140    	; 0x2c56 <TIMER1_VidInitializeMode15+0x160>
    2bca:	2e 81       	ldd	r18, Y+6	; 0x06
    2bcc:	3f 81       	ldd	r19, Y+7	; 0x07
    2bce:	22 30       	cpi	r18, 0x02	; 2
    2bd0:	31 05       	cpc	r19, r1
    2bd2:	21 f1       	breq	.+72     	; 0x2c1c <TIMER1_VidInitializeMode15+0x126>
    2bd4:	8e 81       	ldd	r24, Y+6	; 0x06
    2bd6:	9f 81       	ldd	r25, Y+7	; 0x07
    2bd8:	83 30       	cpi	r24, 0x03	; 3
    2bda:	91 05       	cpc	r25, r1
    2bdc:	71 f1       	breq	.+92     	; 0x2c3a <TIMER1_VidInitializeMode15+0x144>
    2bde:	3b c0       	rjmp	.+118    	; 0x2c56 <TIMER1_VidInitializeMode15+0x160>
		case   Normal :
		   CLR_BIT(TCCR1A,COM1A0);
    2be0:	af e4       	ldi	r26, 0x4F	; 79
    2be2:	b0 e0       	ldi	r27, 0x00	; 0
    2be4:	ef e4       	ldi	r30, 0x4F	; 79
    2be6:	f0 e0       	ldi	r31, 0x00	; 0
    2be8:	80 81       	ld	r24, Z
    2bea:	8f 7b       	andi	r24, 0xBF	; 191
    2bec:	8c 93       	st	X, r24
		   CLR_BIT(TCCR1A,COM1A1);
    2bee:	af e4       	ldi	r26, 0x4F	; 79
    2bf0:	b0 e0       	ldi	r27, 0x00	; 0
    2bf2:	ef e4       	ldi	r30, 0x4F	; 79
    2bf4:	f0 e0       	ldi	r31, 0x00	; 0
    2bf6:	80 81       	ld	r24, Z
    2bf8:	8f 77       	andi	r24, 0x7F	; 127
    2bfa:	8c 93       	st	X, r24
    2bfc:	2c c0       	rjmp	.+88     	; 0x2c56 <TIMER1_VidInitializeMode15+0x160>
		   break                 ;
		case   Toggle :
			SET_BIT(TCCR1A,COM1A0);
    2bfe:	af e4       	ldi	r26, 0x4F	; 79
    2c00:	b0 e0       	ldi	r27, 0x00	; 0
    2c02:	ef e4       	ldi	r30, 0x4F	; 79
    2c04:	f0 e0       	ldi	r31, 0x00	; 0
    2c06:	80 81       	ld	r24, Z
    2c08:	80 64       	ori	r24, 0x40	; 64
    2c0a:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,COM1A1);
    2c0c:	af e4       	ldi	r26, 0x4F	; 79
    2c0e:	b0 e0       	ldi	r27, 0x00	; 0
    2c10:	ef e4       	ldi	r30, 0x4F	; 79
    2c12:	f0 e0       	ldi	r31, 0x00	; 0
    2c14:	80 81       	ld	r24, Z
    2c16:	8f 77       	andi	r24, 0x7F	; 127
    2c18:	8c 93       	st	X, r24
    2c1a:	1d c0       	rjmp	.+58     	; 0x2c56 <TIMER1_VidInitializeMode15+0x160>
		    break                 ;
		case   CLEAR :
			CLR_BIT(TCCR1A,COM1A0);
    2c1c:	af e4       	ldi	r26, 0x4F	; 79
    2c1e:	b0 e0       	ldi	r27, 0x00	; 0
    2c20:	ef e4       	ldi	r30, 0x4F	; 79
    2c22:	f0 e0       	ldi	r31, 0x00	; 0
    2c24:	80 81       	ld	r24, Z
    2c26:	8f 7b       	andi	r24, 0xBF	; 191
    2c28:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,COM1A1);
    2c2a:	af e4       	ldi	r26, 0x4F	; 79
    2c2c:	b0 e0       	ldi	r27, 0x00	; 0
    2c2e:	ef e4       	ldi	r30, 0x4F	; 79
    2c30:	f0 e0       	ldi	r31, 0x00	; 0
    2c32:	80 81       	ld	r24, Z
    2c34:	80 68       	ori	r24, 0x80	; 128
    2c36:	8c 93       	st	X, r24
    2c38:	0e c0       	rjmp	.+28     	; 0x2c56 <TIMER1_VidInitializeMode15+0x160>
		    break                 ;
		case   SET :
			SET_BIT(TCCR1A,COM1A0);
    2c3a:	af e4       	ldi	r26, 0x4F	; 79
    2c3c:	b0 e0       	ldi	r27, 0x00	; 0
    2c3e:	ef e4       	ldi	r30, 0x4F	; 79
    2c40:	f0 e0       	ldi	r31, 0x00	; 0
    2c42:	80 81       	ld	r24, Z
    2c44:	80 64       	ori	r24, 0x40	; 64
    2c46:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,COM1A1);
    2c48:	af e4       	ldi	r26, 0x4F	; 79
    2c4a:	b0 e0       	ldi	r27, 0x00	; 0
    2c4c:	ef e4       	ldi	r30, 0x4F	; 79
    2c4e:	f0 e0       	ldi	r31, 0x00	; 0
    2c50:	80 81       	ld	r24, Z
    2c52:	80 68       	ori	r24, 0x80	; 128
    2c54:	8c 93       	st	X, r24
		    break                 ;
	}
	switch(ModelB){
    2c56:	8b 81       	ldd	r24, Y+3	; 0x03
    2c58:	28 2f       	mov	r18, r24
    2c5a:	30 e0       	ldi	r19, 0x00	; 0
    2c5c:	3d 83       	std	Y+5, r19	; 0x05
    2c5e:	2c 83       	std	Y+4, r18	; 0x04
    2c60:	8c 81       	ldd	r24, Y+4	; 0x04
    2c62:	9d 81       	ldd	r25, Y+5	; 0x05
    2c64:	81 30       	cpi	r24, 0x01	; 1
    2c66:	91 05       	cpc	r25, r1
    2c68:	21 f1       	breq	.+72     	; 0x2cb2 <TIMER1_VidInitializeMode15+0x1bc>
    2c6a:	2c 81       	ldd	r18, Y+4	; 0x04
    2c6c:	3d 81       	ldd	r19, Y+5	; 0x05
    2c6e:	22 30       	cpi	r18, 0x02	; 2
    2c70:	31 05       	cpc	r19, r1
    2c72:	2c f4       	brge	.+10     	; 0x2c7e <TIMER1_VidInitializeMode15+0x188>
    2c74:	8c 81       	ldd	r24, Y+4	; 0x04
    2c76:	9d 81       	ldd	r25, Y+5	; 0x05
    2c78:	00 97       	sbiw	r24, 0x00	; 0
    2c7a:	61 f0       	breq	.+24     	; 0x2c94 <TIMER1_VidInitializeMode15+0x19e>
    2c7c:	46 c0       	rjmp	.+140    	; 0x2d0a <TIMER1_VidInitializeMode15+0x214>
    2c7e:	2c 81       	ldd	r18, Y+4	; 0x04
    2c80:	3d 81       	ldd	r19, Y+5	; 0x05
    2c82:	22 30       	cpi	r18, 0x02	; 2
    2c84:	31 05       	cpc	r19, r1
    2c86:	21 f1       	breq	.+72     	; 0x2cd0 <TIMER1_VidInitializeMode15+0x1da>
    2c88:	8c 81       	ldd	r24, Y+4	; 0x04
    2c8a:	9d 81       	ldd	r25, Y+5	; 0x05
    2c8c:	83 30       	cpi	r24, 0x03	; 3
    2c8e:	91 05       	cpc	r25, r1
    2c90:	71 f1       	breq	.+92     	; 0x2cee <TIMER1_VidInitializeMode15+0x1f8>
    2c92:	3b c0       	rjmp	.+118    	; 0x2d0a <TIMER1_VidInitializeMode15+0x214>
		case   Normal :
		   CLR_BIT(TCCR1A,COM1B0);
    2c94:	af e4       	ldi	r26, 0x4F	; 79
    2c96:	b0 e0       	ldi	r27, 0x00	; 0
    2c98:	ef e4       	ldi	r30, 0x4F	; 79
    2c9a:	f0 e0       	ldi	r31, 0x00	; 0
    2c9c:	80 81       	ld	r24, Z
    2c9e:	8f 7e       	andi	r24, 0xEF	; 239
    2ca0:	8c 93       	st	X, r24
		   CLR_BIT(TCCR1A,COM1B1);
    2ca2:	af e4       	ldi	r26, 0x4F	; 79
    2ca4:	b0 e0       	ldi	r27, 0x00	; 0
    2ca6:	ef e4       	ldi	r30, 0x4F	; 79
    2ca8:	f0 e0       	ldi	r31, 0x00	; 0
    2caa:	80 81       	ld	r24, Z
    2cac:	8f 7d       	andi	r24, 0xDF	; 223
    2cae:	8c 93       	st	X, r24
    2cb0:	2c c0       	rjmp	.+88     	; 0x2d0a <TIMER1_VidInitializeMode15+0x214>
		   break                 ;
		case   Toggle :
			SET_BIT(TCCR1A,COM1B0);
    2cb2:	af e4       	ldi	r26, 0x4F	; 79
    2cb4:	b0 e0       	ldi	r27, 0x00	; 0
    2cb6:	ef e4       	ldi	r30, 0x4F	; 79
    2cb8:	f0 e0       	ldi	r31, 0x00	; 0
    2cba:	80 81       	ld	r24, Z
    2cbc:	80 61       	ori	r24, 0x10	; 16
    2cbe:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,COM1B1);
    2cc0:	af e4       	ldi	r26, 0x4F	; 79
    2cc2:	b0 e0       	ldi	r27, 0x00	; 0
    2cc4:	ef e4       	ldi	r30, 0x4F	; 79
    2cc6:	f0 e0       	ldi	r31, 0x00	; 0
    2cc8:	80 81       	ld	r24, Z
    2cca:	8f 7d       	andi	r24, 0xDF	; 223
    2ccc:	8c 93       	st	X, r24
    2cce:	1d c0       	rjmp	.+58     	; 0x2d0a <TIMER1_VidInitializeMode15+0x214>
			break                 ;
		case   CLEAR :
			CLR_BIT(TCCR1A,COM1B0);
    2cd0:	af e4       	ldi	r26, 0x4F	; 79
    2cd2:	b0 e0       	ldi	r27, 0x00	; 0
    2cd4:	ef e4       	ldi	r30, 0x4F	; 79
    2cd6:	f0 e0       	ldi	r31, 0x00	; 0
    2cd8:	80 81       	ld	r24, Z
    2cda:	8f 7e       	andi	r24, 0xEF	; 239
    2cdc:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,COM1B1);
    2cde:	af e4       	ldi	r26, 0x4F	; 79
    2ce0:	b0 e0       	ldi	r27, 0x00	; 0
    2ce2:	ef e4       	ldi	r30, 0x4F	; 79
    2ce4:	f0 e0       	ldi	r31, 0x00	; 0
    2ce6:	80 81       	ld	r24, Z
    2ce8:	80 62       	ori	r24, 0x20	; 32
    2cea:	8c 93       	st	X, r24
    2cec:	0e c0       	rjmp	.+28     	; 0x2d0a <TIMER1_VidInitializeMode15+0x214>
			break                 ;
		case   SET :
			SET_BIT(TCCR1A,COM1B0);
    2cee:	af e4       	ldi	r26, 0x4F	; 79
    2cf0:	b0 e0       	ldi	r27, 0x00	; 0
    2cf2:	ef e4       	ldi	r30, 0x4F	; 79
    2cf4:	f0 e0       	ldi	r31, 0x00	; 0
    2cf6:	80 81       	ld	r24, Z
    2cf8:	80 61       	ori	r24, 0x10	; 16
    2cfa:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,COM1B1);
    2cfc:	af e4       	ldi	r26, 0x4F	; 79
    2cfe:	b0 e0       	ldi	r27, 0x00	; 0
    2d00:	ef e4       	ldi	r30, 0x4F	; 79
    2d02:	f0 e0       	ldi	r31, 0x00	; 0
    2d04:	80 81       	ld	r24, Z
    2d06:	80 62       	ori	r24, 0x20	; 32
    2d08:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,CS12);
		CLR_BIT(TCCR1B,CS11);
		SET_BIT(TCCR1B,CS10);
		PRE_SCALAR_TIMER1 = 1 ;
	#elif PRE_TYPE_TIMER1 == PRE_8
		CLR_BIT(TCCR1B,CS12);
    2d0a:	ae e4       	ldi	r26, 0x4E	; 78
    2d0c:	b0 e0       	ldi	r27, 0x00	; 0
    2d0e:	ee e4       	ldi	r30, 0x4E	; 78
    2d10:	f0 e0       	ldi	r31, 0x00	; 0
    2d12:	80 81       	ld	r24, Z
    2d14:	8b 7f       	andi	r24, 0xFB	; 251
    2d16:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,CS11);
    2d18:	ae e4       	ldi	r26, 0x4E	; 78
    2d1a:	b0 e0       	ldi	r27, 0x00	; 0
    2d1c:	ee e4       	ldi	r30, 0x4E	; 78
    2d1e:	f0 e0       	ldi	r31, 0x00	; 0
    2d20:	80 81       	ld	r24, Z
    2d22:	82 60       	ori	r24, 0x02	; 2
    2d24:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,CS10);
    2d26:	ae e4       	ldi	r26, 0x4E	; 78
    2d28:	b0 e0       	ldi	r27, 0x00	; 0
    2d2a:	ee e4       	ldi	r30, 0x4E	; 78
    2d2c:	f0 e0       	ldi	r31, 0x00	; 0
    2d2e:	80 81       	ld	r24, Z
    2d30:	8e 7f       	andi	r24, 0xFE	; 254
    2d32:	8c 93       	st	X, r24
		PRE_SCALAR_TIMER1 = 8 ;
    2d34:	88 e0       	ldi	r24, 0x08	; 8
    2d36:	90 e0       	ldi	r25, 0x00	; 0
    2d38:	90 93 93 01 	sts	0x0193, r25
    2d3c:	80 93 92 01 	sts	0x0192, r24
		SET_BIT(TCCR1B,CS12);
		CLR_BIT(TCCR1B,CS11);
		SET_BIT(TCCR1B,CS10);
		PRE_SCALAR_TIMER1 = 1024 ;
	#endif
}
    2d40:	29 96       	adiw	r28, 0x09	; 9
    2d42:	0f b6       	in	r0, 0x3f	; 63
    2d44:	f8 94       	cli
    2d46:	de bf       	out	0x3e, r29	; 62
    2d48:	0f be       	out	0x3f, r0	; 63
    2d4a:	cd bf       	out	0x3d, r28	; 61
    2d4c:	cf 91       	pop	r28
    2d4e:	df 91       	pop	r29
    2d50:	08 95       	ret

00002d52 <TIMER1_VidSetOCR1A>:

void TIMER1_VidSetOCR1A(u16 CopyOCR1A)
{
    2d52:	df 93       	push	r29
    2d54:	cf 93       	push	r28
    2d56:	00 d0       	rcall	.+0      	; 0x2d58 <TIMER1_VidSetOCR1A+0x6>
    2d58:	cd b7       	in	r28, 0x3d	; 61
    2d5a:	de b7       	in	r29, 0x3e	; 62
    2d5c:	9a 83       	std	Y+2, r25	; 0x02
    2d5e:	89 83       	std	Y+1, r24	; 0x01
	OCR1AH = (u8)(CopyOCR1A>>8);
    2d60:	eb e4       	ldi	r30, 0x4B	; 75
    2d62:	f0 e0       	ldi	r31, 0x00	; 0
    2d64:	89 81       	ldd	r24, Y+1	; 0x01
    2d66:	9a 81       	ldd	r25, Y+2	; 0x02
    2d68:	89 2f       	mov	r24, r25
    2d6a:	99 27       	eor	r25, r25
    2d6c:	80 83       	st	Z, r24
	OCR1AL = (u8)(CopyOCR1A);
    2d6e:	ea e4       	ldi	r30, 0x4A	; 74
    2d70:	f0 e0       	ldi	r31, 0x00	; 0
    2d72:	89 81       	ldd	r24, Y+1	; 0x01
    2d74:	80 83       	st	Z, r24
}
    2d76:	0f 90       	pop	r0
    2d78:	0f 90       	pop	r0
    2d7a:	cf 91       	pop	r28
    2d7c:	df 91       	pop	r29
    2d7e:	08 95       	ret

00002d80 <TIMER1_VidSetOCR1B>:
void TIMER1_VidSetOCR1B(u16 CopyOCR1B)
{
    2d80:	df 93       	push	r29
    2d82:	cf 93       	push	r28
    2d84:	00 d0       	rcall	.+0      	; 0x2d86 <TIMER1_VidSetOCR1B+0x6>
    2d86:	cd b7       	in	r28, 0x3d	; 61
    2d88:	de b7       	in	r29, 0x3e	; 62
    2d8a:	9a 83       	std	Y+2, r25	; 0x02
    2d8c:	89 83       	std	Y+1, r24	; 0x01
	OCR1BH = (u8)(CopyOCR1B>>8);
    2d8e:	e9 e4       	ldi	r30, 0x49	; 73
    2d90:	f0 e0       	ldi	r31, 0x00	; 0
    2d92:	89 81       	ldd	r24, Y+1	; 0x01
    2d94:	9a 81       	ldd	r25, Y+2	; 0x02
    2d96:	89 2f       	mov	r24, r25
    2d98:	99 27       	eor	r25, r25
    2d9a:	80 83       	st	Z, r24
	OCR1BL = (u8)(CopyOCR1B);
    2d9c:	e8 e4       	ldi	r30, 0x48	; 72
    2d9e:	f0 e0       	ldi	r31, 0x00	; 0
    2da0:	89 81       	ldd	r24, Y+1	; 0x01
    2da2:	80 83       	st	Z, r24
}
    2da4:	0f 90       	pop	r0
    2da6:	0f 90       	pop	r0
    2da8:	cf 91       	pop	r28
    2daa:	df 91       	pop	r29
    2dac:	08 95       	ret

00002dae <TIMER1_VidSetICR1>:
void TIMER1_VidSetICR1(u16 Copy_ICR1)
{
    2dae:	df 93       	push	r29
    2db0:	cf 93       	push	r28
    2db2:	00 d0       	rcall	.+0      	; 0x2db4 <TIMER1_VidSetICR1+0x6>
    2db4:	cd b7       	in	r28, 0x3d	; 61
    2db6:	de b7       	in	r29, 0x3e	; 62
    2db8:	9a 83       	std	Y+2, r25	; 0x02
    2dba:	89 83       	std	Y+1, r24	; 0x01
	ICR1H = (u8)(Copy_ICR1>>8);
    2dbc:	e7 e4       	ldi	r30, 0x47	; 71
    2dbe:	f0 e0       	ldi	r31, 0x00	; 0
    2dc0:	89 81       	ldd	r24, Y+1	; 0x01
    2dc2:	9a 81       	ldd	r25, Y+2	; 0x02
    2dc4:	89 2f       	mov	r24, r25
    2dc6:	99 27       	eor	r25, r25
    2dc8:	80 83       	st	Z, r24
	ICR1L = (u8)(Copy_ICR1)   ;
    2dca:	e6 e4       	ldi	r30, 0x46	; 70
    2dcc:	f0 e0       	ldi	r31, 0x00	; 0
    2dce:	89 81       	ldd	r24, Y+1	; 0x01
    2dd0:	80 83       	st	Z, r24
}
    2dd2:	0f 90       	pop	r0
    2dd4:	0f 90       	pop	r0
    2dd6:	cf 91       	pop	r28
    2dd8:	df 91       	pop	r29
    2dda:	08 95       	ret

00002ddc <Timer1Icu_init>:

/*For ICU Mode*/
void Timer1Icu_init()
{
    2ddc:	df 93       	push	r29
    2dde:	cf 93       	push	r28
    2de0:	cd b7       	in	r28, 0x3d	; 61
    2de2:	de b7       	in	r29, 0x3e	; 62
	/* Configure ICP1/PD6 as i/p pin */
	DIO_VidSetPinDirection(ICP_PORT,ICP_PIN,0);
    2de4:	83 e0       	ldi	r24, 0x03	; 3
    2de6:	66 e0       	ldi	r22, 0x06	; 6
    2de8:	40 e0       	ldi	r20, 0x00	; 0
    2dea:	0e 94 4f 09 	call	0x129e	; 0x129e <DIO_VidSetPinDirection>

	/* Timer1 always operates in Normal Mode */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    2dee:	ef e4       	ldi	r30, 0x4F	; 79
    2df0:	f0 e0       	ldi	r31, 0x00	; 0
    2df2:	8c e0       	ldi	r24, 0x0C	; 12
    2df4:	80 83       	st	Z, r24

	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */
	 CLR_BIT(TCCR1B,CS10);
    2df6:	ae e4       	ldi	r26, 0x4E	; 78
    2df8:	b0 e0       	ldi	r27, 0x00	; 0
    2dfa:	ee e4       	ldi	r30, 0x4E	; 78
    2dfc:	f0 e0       	ldi	r31, 0x00	; 0
    2dfe:	80 81       	ld	r24, Z
    2e00:	8e 7f       	andi	r24, 0xFE	; 254
    2e02:	8c 93       	st	X, r24
	 SET_BIT(TCCR1B,CS11);
    2e04:	ae e4       	ldi	r26, 0x4E	; 78
    2e06:	b0 e0       	ldi	r27, 0x00	; 0
    2e08:	ee e4       	ldi	r30, 0x4E	; 78
    2e0a:	f0 e0       	ldi	r31, 0x00	; 0
    2e0c:	80 81       	ld	r24, Z
    2e0e:	82 60       	ori	r24, 0x02	; 2
    2e10:	8c 93       	st	X, r24
	 CLR_BIT(TCCR1B,CS12);
    2e12:	ae e4       	ldi	r26, 0x4E	; 78
    2e14:	b0 e0       	ldi	r27, 0x00	; 0
    2e16:	ee e4       	ldi	r30, 0x4E	; 78
    2e18:	f0 e0       	ldi	r31, 0x00	; 0
    2e1a:	80 81       	ld	r24, Z
    2e1c:	8b 7f       	andi	r24, 0xFB	; 251
    2e1e:	8c 93       	st	X, r24

	/*
     * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	 SET_BIT(TCCR1B,ICES1);
    2e20:	ae e4       	ldi	r26, 0x4E	; 78
    2e22:	b0 e0       	ldi	r27, 0x00	; 0
    2e24:	ee e4       	ldi	r30, 0x4E	; 78
    2e26:	f0 e0       	ldi	r31, 0x00	; 0
    2e28:	80 81       	ld	r24, Z
    2e2a:	80 64       	ori	r24, 0x40	; 64
    2e2c:	8c 93       	st	X, r24

	/* Initial Value for Timer1 */
	TCNT1 = 0;
    2e2e:	ec e4       	ldi	r30, 0x4C	; 76
    2e30:	f0 e0       	ldi	r31, 0x00	; 0
    2e32:	11 82       	std	Z+1, r1	; 0x01
    2e34:	10 82       	st	Z, r1

	/* Initial Value for the input capture register */
	ICR1 = 0;
    2e36:	e6 e4       	ldi	r30, 0x46	; 70
    2e38:	f0 e0       	ldi	r31, 0x00	; 0
    2e3a:	11 82       	std	Z+1, r1	; 0x01
    2e3c:	10 82       	st	Z, r1

	/* Enable the Input Capture interrupt to generate an interrupt when edge is detected on ICP1/PD6 pin */
	TIMSK |= (1<<TICIE1);
    2e3e:	a9 e5       	ldi	r26, 0x59	; 89
    2e40:	b0 e0       	ldi	r27, 0x00	; 0
    2e42:	e9 e5       	ldi	r30, 0x59	; 89
    2e44:	f0 e0       	ldi	r31, 0x00	; 0
    2e46:	80 81       	ld	r24, Z
    2e48:	80 62       	ori	r24, 0x20	; 32
    2e4a:	8c 93       	st	X, r24
}
    2e4c:	cf 91       	pop	r28
    2e4e:	df 91       	pop	r29
    2e50:	08 95       	ret

00002e52 <Timer1Icu_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void Timer1Icu_setCallBack(void(*a_ptr)(void))
{
    2e52:	df 93       	push	r29
    2e54:	cf 93       	push	r28
    2e56:	00 d0       	rcall	.+0      	; 0x2e58 <Timer1Icu_setCallBack+0x6>
    2e58:	cd b7       	in	r28, 0x3d	; 61
    2e5a:	de b7       	in	r29, 0x3e	; 62
    2e5c:	9a 83       	std	Y+2, r25	; 0x02
    2e5e:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	Timer1_IcuCallBack = a_ptr;
    2e60:	89 81       	ldd	r24, Y+1	; 0x01
    2e62:	9a 81       	ldd	r25, Y+2	; 0x02
    2e64:	90 93 7b 01 	sts	0x017B, r25
    2e68:	80 93 7a 01 	sts	0x017A, r24
}
    2e6c:	0f 90       	pop	r0
    2e6e:	0f 90       	pop	r0
    2e70:	cf 91       	pop	r28
    2e72:	df 91       	pop	r29
    2e74:	08 95       	ret

00002e76 <Timer1Icu_setEdgeDetectionType>:

/*
 * Description: Function to set the required edge detection.
 */
void Timer1Icu_setEdgeDetectionType(u8 Copy_u8EdgeType)
{
    2e76:	df 93       	push	r29
    2e78:	cf 93       	push	r28
    2e7a:	0f 92       	push	r0
    2e7c:	cd b7       	in	r28, 0x3d	; 61
    2e7e:	de b7       	in	r29, 0x3e	; 62
    2e80:	89 83       	std	Y+1, r24	; 0x01
	   if(Copy_u8EdgeType == RISING_EDGY)
    2e82:	89 81       	ldd	r24, Y+1	; 0x01
    2e84:	81 30       	cpi	r24, 0x01	; 1
    2e86:	41 f4       	brne	.+16     	; 0x2e98 <Timer1Icu_setEdgeDetectionType+0x22>
	   {
		  SET_BIT(TCCR1B,ICES1);
    2e88:	ae e4       	ldi	r26, 0x4E	; 78
    2e8a:	b0 e0       	ldi	r27, 0x00	; 0
    2e8c:	ee e4       	ldi	r30, 0x4E	; 78
    2e8e:	f0 e0       	ldi	r31, 0x00	; 0
    2e90:	80 81       	ld	r24, Z
    2e92:	80 64       	ori	r24, 0x40	; 64
    2e94:	8c 93       	st	X, r24
    2e96:	0a c0       	rjmp	.+20     	; 0x2eac <Timer1Icu_setEdgeDetectionType+0x36>
	   }
	   else if(Copy_u8EdgeType == FALLING_EDGY)
    2e98:	89 81       	ldd	r24, Y+1	; 0x01
    2e9a:	88 23       	and	r24, r24
    2e9c:	39 f4       	brne	.+14     	; 0x2eac <Timer1Icu_setEdgeDetectionType+0x36>
	   {
		  CLR_BIT(TCCR1B,ICES1);
    2e9e:	ae e4       	ldi	r26, 0x4E	; 78
    2ea0:	b0 e0       	ldi	r27, 0x00	; 0
    2ea2:	ee e4       	ldi	r30, 0x4E	; 78
    2ea4:	f0 e0       	ldi	r31, 0x00	; 0
    2ea6:	80 81       	ld	r24, Z
    2ea8:	8f 7b       	andi	r24, 0xBF	; 191
    2eaa:	8c 93       	st	X, r24
	   }
}
    2eac:	0f 90       	pop	r0
    2eae:	cf 91       	pop	r28
    2eb0:	df 91       	pop	r29
    2eb2:	08 95       	ret

00002eb4 <Timer1Icu_getInputCaptureValue>:
/*
 * Description: Function to get the Timer1 Value when the input is captured
 *              The value stored at Input Capture Register ICR1
 */
u16 Timer1Icu_getInputCaptureValue(void)
{
    2eb4:	df 93       	push	r29
    2eb6:	cf 93       	push	r28
    2eb8:	cd b7       	in	r28, 0x3d	; 61
    2eba:	de b7       	in	r29, 0x3e	; 62
	 return ICR1;
    2ebc:	e6 e4       	ldi	r30, 0x46	; 70
    2ebe:	f0 e0       	ldi	r31, 0x00	; 0
    2ec0:	80 81       	ld	r24, Z
    2ec2:	91 81       	ldd	r25, Z+1	; 0x01
}
    2ec4:	cf 91       	pop	r28
    2ec6:	df 91       	pop	r29
    2ec8:	08 95       	ret

00002eca <Timer1Icu_clearTimerValue>:

/*
 * Description: Function to clear the Timer1 Value to start count from ZERO
 */
void Timer1Icu_clearTimerValue(void)
{
    2eca:	df 93       	push	r29
    2ecc:	cf 93       	push	r28
    2ece:	cd b7       	in	r28, 0x3d	; 61
    2ed0:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    2ed2:	ec e4       	ldi	r30, 0x4C	; 76
    2ed4:	f0 e0       	ldi	r31, 0x00	; 0
    2ed6:	11 82       	std	Z+1, r1	; 0x01
    2ed8:	10 82       	st	Z, r1
}
    2eda:	cf 91       	pop	r28
    2edc:	df 91       	pop	r29
    2ede:	08 95       	ret

00002ee0 <TIMER2_VidInitialize>:



/*******************To initialize OV or COMPARE or FAST_PWM mode***************************************/
//to check that you don't use OV or COMPARE or FAST_PWM mode
void TIMER2_VidInitialize (void) {
    2ee0:	df 93       	push	r29
    2ee2:	cf 93       	push	r28
    2ee4:	cd b7       	in	r28, 0x3d	; 61
    2ee6:	de b7       	in	r29, 0x3e	; 62
	//define pin of timer 2
	DIO_VidSetPinDirection(3,7,1);
    2ee8:	83 e0       	ldi	r24, 0x03	; 3
    2eea:	67 e0       	ldi	r22, 0x07	; 7
    2eec:	41 e0       	ldi	r20, 0x01	; 1
    2eee:	0e 94 4f 09 	call	0x129e	; 0x129e <DIO_VidSetPinDirection>
	DIO_VidSetPinValue(3,7,0);
    2ef2:	83 e0       	ldi	r24, 0x03	; 3
    2ef4:	67 e0       	ldi	r22, 0x07	; 7
    2ef6:	40 e0       	ldi	r20, 0x00	; 0
    2ef8:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_VidSetPinValue>
	SET_BIT(TIMSK,OCIE2);
#endif

#if TIMER2_MODE == FAST_PWM
	// to initialize timer0 on 0 , FOCO = 0
	TCCR2 = 0 ;
    2efc:	e5 e4       	ldi	r30, 0x45	; 69
    2efe:	f0 e0       	ldi	r31, 0x00	; 0
    2f00:	10 82       	st	Z, r1

	// 1 1 Fast PWM
	SET_BIT(TCCR2,WGM20);
    2f02:	a5 e4       	ldi	r26, 0x45	; 69
    2f04:	b0 e0       	ldi	r27, 0x00	; 0
    2f06:	e5 e4       	ldi	r30, 0x45	; 69
    2f08:	f0 e0       	ldi	r31, 0x00	; 0
    2f0a:	80 81       	ld	r24, Z
    2f0c:	80 64       	ori	r24, 0x40	; 64
    2f0e:	8c 93       	st	X, r24
	SET_BIT(TCCR2,WGM21);
    2f10:	a5 e4       	ldi	r26, 0x45	; 69
    2f12:	b0 e0       	ldi	r27, 0x00	; 0
    2f14:	e5 e4       	ldi	r30, 0x45	; 69
    2f16:	f0 e0       	ldi	r31, 0x00	; 0
    2f18:	80 81       	ld	r24, Z
    2f1a:	88 60       	ori	r24, 0x08	; 8
    2f1c:	8c 93       	st	X, r24

	//1 0 Clear OC0 on compare match, set OC0 at TOP ,  NON_INVERED MODE PWM
	SET_BIT(TCCR2,COM21);
    2f1e:	a5 e4       	ldi	r26, 0x45	; 69
    2f20:	b0 e0       	ldi	r27, 0x00	; 0
    2f22:	e5 e4       	ldi	r30, 0x45	; 69
    2f24:	f0 e0       	ldi	r31, 0x00	; 0
    2f26:	80 81       	ld	r24, Z
    2f28:	80 62       	ori	r24, 0x20	; 32
    2f2a:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,COM20);
    2f2c:	a5 e4       	ldi	r26, 0x45	; 69
    2f2e:	b0 e0       	ldi	r27, 0x00	; 0
    2f30:	e5 e4       	ldi	r30, 0x45	; 69
    2f32:	f0 e0       	ldi	r31, 0x00	; 0
    2f34:	80 81       	ld	r24, Z
    2f36:	8f 7e       	andi	r24, 0xEF	; 239
    2f38:	8c 93       	st	X, r24
#if PRE_TYPE_TIMER2 == NO_PRE
	CLR_BIT(TCCR2,CS22);
	CLR_BIT(TCCR2,CS21);
	SET_BIT(TCCR2,CS20);
#elif PRE_TYPE_TIMER2 == PRE_8
	CLR_BIT(TCCR2,CS22);
    2f3a:	a5 e4       	ldi	r26, 0x45	; 69
    2f3c:	b0 e0       	ldi	r27, 0x00	; 0
    2f3e:	e5 e4       	ldi	r30, 0x45	; 69
    2f40:	f0 e0       	ldi	r31, 0x00	; 0
    2f42:	80 81       	ld	r24, Z
    2f44:	8b 7f       	andi	r24, 0xFB	; 251
    2f46:	8c 93       	st	X, r24
	SET_BIT(TCCR2,CS21);
    2f48:	a5 e4       	ldi	r26, 0x45	; 69
    2f4a:	b0 e0       	ldi	r27, 0x00	; 0
    2f4c:	e5 e4       	ldi	r30, 0x45	; 69
    2f4e:	f0 e0       	ldi	r31, 0x00	; 0
    2f50:	80 81       	ld	r24, Z
    2f52:	82 60       	ori	r24, 0x02	; 2
    2f54:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,CS20);
    2f56:	a5 e4       	ldi	r26, 0x45	; 69
    2f58:	b0 e0       	ldi	r27, 0x00	; 0
    2f5a:	e5 e4       	ldi	r30, 0x45	; 69
    2f5c:	f0 e0       	ldi	r31, 0x00	; 0
    2f5e:	80 81       	ld	r24, Z
    2f60:	8e 7f       	andi	r24, 0xFE	; 254
    2f62:	8c 93       	st	X, r24
	PRE_SCALAR_TIMER2 = 8 ;
    2f64:	88 e0       	ldi	r24, 0x08	; 8
    2f66:	90 e0       	ldi	r25, 0x00	; 0
    2f68:	90 93 9d 01 	sts	0x019D, r25
    2f6c:	80 93 9c 01 	sts	0x019C, r24
	CLR_BIT(TCCR2,CS21);
	SET_BIT(TCCR2,CS20);
	PRE_SCALAR_TIMER2 = 1024 ;
#endif

}//end FUNC TIMER_VidInitialize
    2f70:	cf 91       	pop	r28
    2f72:	df 91       	pop	r29
    2f74:	08 95       	ret

00002f76 <TIMER2_Set_Time_S>:

/******************** The part that use to count time  *************************/
//to check that you don't use OV or COMPARE mode
void TIMER2_Set_Time_S (u8 Copy_U8Time){
    2f76:	6f 92       	push	r6
    2f78:	7f 92       	push	r7
    2f7a:	8f 92       	push	r8
    2f7c:	9f 92       	push	r9
    2f7e:	af 92       	push	r10
    2f80:	bf 92       	push	r11
    2f82:	cf 92       	push	r12
    2f84:	df 92       	push	r13
    2f86:	ef 92       	push	r14
    2f88:	ff 92       	push	r15
    2f8a:	0f 93       	push	r16
    2f8c:	1f 93       	push	r17
    2f8e:	df 93       	push	r29
    2f90:	cf 93       	push	r28
    2f92:	cd b7       	in	r28, 0x3d	; 61
    2f94:	de b7       	in	r29, 0x3e	; 62
    2f96:	cf 54       	subi	r28, 0x4F	; 79
    2f98:	d0 40       	sbci	r29, 0x00	; 0
    2f9a:	0f b6       	in	r0, 0x3f	; 63
    2f9c:	f8 94       	cli
    2f9e:	de bf       	out	0x3e, r29	; 62
    2fa0:	0f be       	out	0x3f, r0	; 63
    2fa2:	cd bf       	out	0x3d, r28	; 61
    2fa4:	89 83       	std	Y+1, r24	; 0x01
	DESIRED_TIME_TIMER2 = (u64)Copy_U8Time*1000 ;                                    //time in ms
    2fa6:	89 81       	ldd	r24, Y+1	; 0x01
    2fa8:	08 2f       	mov	r16, r24
    2faa:	10 e0       	ldi	r17, 0x00	; 0
    2fac:	20 e0       	ldi	r18, 0x00	; 0
    2fae:	30 e0       	ldi	r19, 0x00	; 0
    2fb0:	40 e0       	ldi	r20, 0x00	; 0
    2fb2:	50 e0       	ldi	r21, 0x00	; 0
    2fb4:	60 e0       	ldi	r22, 0x00	; 0
    2fb6:	70 e0       	ldi	r23, 0x00	; 0
    2fb8:	0a 83       	std	Y+2, r16	; 0x02
    2fba:	1b 83       	std	Y+3, r17	; 0x03
    2fbc:	2c 83       	std	Y+4, r18	; 0x04
    2fbe:	3d 83       	std	Y+5, r19	; 0x05
    2fc0:	4e 83       	std	Y+6, r20	; 0x06
    2fc2:	5f 83       	std	Y+7, r21	; 0x07
    2fc4:	68 87       	std	Y+8, r22	; 0x08
    2fc6:	79 87       	std	Y+9, r23	; 0x09
    2fc8:	aa 80       	ldd	r10, Y+2	; 0x02
    2fca:	bb 80       	ldd	r11, Y+3	; 0x03
    2fcc:	cc 80       	ldd	r12, Y+4	; 0x04
    2fce:	dd 80       	ldd	r13, Y+5	; 0x05
    2fd0:	ee 80       	ldd	r14, Y+6	; 0x06
    2fd2:	ff 80       	ldd	r15, Y+7	; 0x07
    2fd4:	08 85       	ldd	r16, Y+8	; 0x08
    2fd6:	19 85       	ldd	r17, Y+9	; 0x09
    2fd8:	2a 2d       	mov	r18, r10
    2fda:	3b 2d       	mov	r19, r11
    2fdc:	4c 2d       	mov	r20, r12
    2fde:	5d 2d       	mov	r21, r13
    2fe0:	6e 2d       	mov	r22, r14
    2fe2:	7f 2d       	mov	r23, r15
    2fe4:	80 2f       	mov	r24, r16
    2fe6:	91 2f       	mov	r25, r17
    2fe8:	02 e0       	ldi	r16, 0x02	; 2
    2fea:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    2fee:	2a 87       	std	Y+10, r18	; 0x0a
    2ff0:	3b 87       	std	Y+11, r19	; 0x0b
    2ff2:	4c 87       	std	Y+12, r20	; 0x0c
    2ff4:	5d 87       	std	Y+13, r21	; 0x0d
    2ff6:	6e 87       	std	Y+14, r22	; 0x0e
    2ff8:	7f 87       	std	Y+15, r23	; 0x0f
    2ffa:	88 8b       	std	Y+16, r24	; 0x10
    2ffc:	99 8b       	std	Y+17, r25	; 0x11
    2ffe:	2a 85       	ldd	r18, Y+10	; 0x0a
    3000:	3b 85       	ldd	r19, Y+11	; 0x0b
    3002:	4c 85       	ldd	r20, Y+12	; 0x0c
    3004:	5d 85       	ldd	r21, Y+13	; 0x0d
    3006:	6e 85       	ldd	r22, Y+14	; 0x0e
    3008:	7f 85       	ldd	r23, Y+15	; 0x0f
    300a:	88 89       	ldd	r24, Y+16	; 0x10
    300c:	99 89       	ldd	r25, Y+17	; 0x11
    300e:	05 e0       	ldi	r16, 0x05	; 5
    3010:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    3014:	2a 8b       	std	Y+18, r18	; 0x12
    3016:	3b 8b       	std	Y+19, r19	; 0x13
    3018:	4c 8b       	std	Y+20, r20	; 0x14
    301a:	5d 8b       	std	Y+21, r21	; 0x15
    301c:	6e 8b       	std	Y+22, r22	; 0x16
    301e:	7f 8b       	std	Y+23, r23	; 0x17
    3020:	88 8f       	std	Y+24, r24	; 0x18
    3022:	99 8f       	std	Y+25, r25	; 0x19
    3024:	1a 89       	ldd	r17, Y+18	; 0x12
    3026:	2a 85       	ldd	r18, Y+10	; 0x0a
    3028:	12 1b       	sub	r17, r18
    302a:	1a 8f       	std	Y+26, r17	; 0x1a
    302c:	31 e0       	ldi	r19, 0x01	; 1
    302e:	3a a3       	std	Y+34, r19	; 0x22
    3030:	4a 8d       	ldd	r20, Y+26	; 0x1a
    3032:	5a 89       	ldd	r21, Y+18	; 0x12
    3034:	54 17       	cp	r21, r20
    3036:	08 f0       	brcs	.+2      	; 0x303a <TIMER2_Set_Time_S+0xc4>
    3038:	1a a2       	std	Y+34, r1	; 0x22
    303a:	6b 89       	ldd	r22, Y+19	; 0x13
    303c:	7b 85       	ldd	r23, Y+11	; 0x0b
    303e:	67 1b       	sub	r22, r23
    3040:	6b 8f       	std	Y+27, r22	; 0x1b
    3042:	81 e0       	ldi	r24, 0x01	; 1
    3044:	8b a3       	std	Y+35, r24	; 0x23
    3046:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3048:	eb 89       	ldd	r30, Y+19	; 0x13
    304a:	e9 17       	cp	r30, r25
    304c:	08 f0       	brcs	.+2      	; 0x3050 <TIMER2_Set_Time_S+0xda>
    304e:	1b a2       	std	Y+35, r1	; 0x23
    3050:	fb 8d       	ldd	r31, Y+27	; 0x1b
    3052:	0a a1       	ldd	r16, Y+34	; 0x22
    3054:	f0 1b       	sub	r31, r16
    3056:	fc a3       	std	Y+36, r31	; 0x24
    3058:	11 e0       	ldi	r17, 0x01	; 1
    305a:	1d a3       	std	Y+37, r17	; 0x25
    305c:	2c a1       	ldd	r18, Y+36	; 0x24
    305e:	3b 8d       	ldd	r19, Y+27	; 0x1b
    3060:	32 17       	cp	r19, r18
    3062:	08 f0       	brcs	.+2      	; 0x3066 <TIMER2_Set_Time_S+0xf0>
    3064:	1d a2       	std	Y+37, r1	; 0x25
    3066:	4b a1       	ldd	r20, Y+35	; 0x23
    3068:	5d a1       	ldd	r21, Y+37	; 0x25
    306a:	45 2b       	or	r20, r21
    306c:	4b a3       	std	Y+35, r20	; 0x23
    306e:	6c a1       	ldd	r22, Y+36	; 0x24
    3070:	6b 8f       	std	Y+27, r22	; 0x1b
    3072:	7c 89       	ldd	r23, Y+20	; 0x14
    3074:	8c 85       	ldd	r24, Y+12	; 0x0c
    3076:	78 1b       	sub	r23, r24
    3078:	7c 8f       	std	Y+28, r23	; 0x1c
    307a:	91 e0       	ldi	r25, 0x01	; 1
    307c:	9e a3       	std	Y+38, r25	; 0x26
    307e:	ec 8d       	ldd	r30, Y+28	; 0x1c
    3080:	fc 89       	ldd	r31, Y+20	; 0x14
    3082:	fe 17       	cp	r31, r30
    3084:	08 f0       	brcs	.+2      	; 0x3088 <TIMER2_Set_Time_S+0x112>
    3086:	1e a2       	std	Y+38, r1	; 0x26
    3088:	0c 8d       	ldd	r16, Y+28	; 0x1c
    308a:	1b a1       	ldd	r17, Y+35	; 0x23
    308c:	01 1b       	sub	r16, r17
    308e:	0f a3       	std	Y+39, r16	; 0x27
    3090:	21 e0       	ldi	r18, 0x01	; 1
    3092:	28 a7       	std	Y+40, r18	; 0x28
    3094:	3f a1       	ldd	r19, Y+39	; 0x27
    3096:	4c 8d       	ldd	r20, Y+28	; 0x1c
    3098:	43 17       	cp	r20, r19
    309a:	08 f0       	brcs	.+2      	; 0x309e <TIMER2_Set_Time_S+0x128>
    309c:	18 a6       	std	Y+40, r1	; 0x28
    309e:	5e a1       	ldd	r21, Y+38	; 0x26
    30a0:	68 a5       	ldd	r22, Y+40	; 0x28
    30a2:	56 2b       	or	r21, r22
    30a4:	5e a3       	std	Y+38, r21	; 0x26
    30a6:	7f a1       	ldd	r23, Y+39	; 0x27
    30a8:	7c 8f       	std	Y+28, r23	; 0x1c
    30aa:	8d 89       	ldd	r24, Y+21	; 0x15
    30ac:	9d 85       	ldd	r25, Y+13	; 0x0d
    30ae:	89 1b       	sub	r24, r25
    30b0:	8d 8f       	std	Y+29, r24	; 0x1d
    30b2:	e1 e0       	ldi	r30, 0x01	; 1
    30b4:	e9 a7       	std	Y+41, r30	; 0x29
    30b6:	fd 8d       	ldd	r31, Y+29	; 0x1d
    30b8:	0d 89       	ldd	r16, Y+21	; 0x15
    30ba:	0f 17       	cp	r16, r31
    30bc:	08 f0       	brcs	.+2      	; 0x30c0 <TIMER2_Set_Time_S+0x14a>
    30be:	19 a6       	std	Y+41, r1	; 0x29
    30c0:	1d 8d       	ldd	r17, Y+29	; 0x1d
    30c2:	2e a1       	ldd	r18, Y+38	; 0x26
    30c4:	12 1b       	sub	r17, r18
    30c6:	1a a7       	std	Y+42, r17	; 0x2a
    30c8:	31 e0       	ldi	r19, 0x01	; 1
    30ca:	3b a7       	std	Y+43, r19	; 0x2b
    30cc:	4a a5       	ldd	r20, Y+42	; 0x2a
    30ce:	5d 8d       	ldd	r21, Y+29	; 0x1d
    30d0:	54 17       	cp	r21, r20
    30d2:	08 f0       	brcs	.+2      	; 0x30d6 <TIMER2_Set_Time_S+0x160>
    30d4:	1b a6       	std	Y+43, r1	; 0x2b
    30d6:	69 a5       	ldd	r22, Y+41	; 0x29
    30d8:	7b a5       	ldd	r23, Y+43	; 0x2b
    30da:	67 2b       	or	r22, r23
    30dc:	69 a7       	std	Y+41, r22	; 0x29
    30de:	8a a5       	ldd	r24, Y+42	; 0x2a
    30e0:	8d 8f       	std	Y+29, r24	; 0x1d
    30e2:	9e 89       	ldd	r25, Y+22	; 0x16
    30e4:	ee 85       	ldd	r30, Y+14	; 0x0e
    30e6:	9e 1b       	sub	r25, r30
    30e8:	9e 8f       	std	Y+30, r25	; 0x1e
    30ea:	f1 e0       	ldi	r31, 0x01	; 1
    30ec:	fc a7       	std	Y+44, r31	; 0x2c
    30ee:	0e 8d       	ldd	r16, Y+30	; 0x1e
    30f0:	1e 89       	ldd	r17, Y+22	; 0x16
    30f2:	10 17       	cp	r17, r16
    30f4:	08 f0       	brcs	.+2      	; 0x30f8 <TIMER2_Set_Time_S+0x182>
    30f6:	1c a6       	std	Y+44, r1	; 0x2c
    30f8:	2e 8d       	ldd	r18, Y+30	; 0x1e
    30fa:	39 a5       	ldd	r19, Y+41	; 0x29
    30fc:	23 1b       	sub	r18, r19
    30fe:	2d a7       	std	Y+45, r18	; 0x2d
    3100:	41 e0       	ldi	r20, 0x01	; 1
    3102:	4e a7       	std	Y+46, r20	; 0x2e
    3104:	5d a5       	ldd	r21, Y+45	; 0x2d
    3106:	6e 8d       	ldd	r22, Y+30	; 0x1e
    3108:	65 17       	cp	r22, r21
    310a:	08 f0       	brcs	.+2      	; 0x310e <TIMER2_Set_Time_S+0x198>
    310c:	1e a6       	std	Y+46, r1	; 0x2e
    310e:	7c a5       	ldd	r23, Y+44	; 0x2c
    3110:	8e a5       	ldd	r24, Y+46	; 0x2e
    3112:	78 2b       	or	r23, r24
    3114:	7c a7       	std	Y+44, r23	; 0x2c
    3116:	9d a5       	ldd	r25, Y+45	; 0x2d
    3118:	9e 8f       	std	Y+30, r25	; 0x1e
    311a:	ef 89       	ldd	r30, Y+23	; 0x17
    311c:	ff 85       	ldd	r31, Y+15	; 0x0f
    311e:	ef 1b       	sub	r30, r31
    3120:	ef 8f       	std	Y+31, r30	; 0x1f
    3122:	01 e0       	ldi	r16, 0x01	; 1
    3124:	0f a7       	std	Y+47, r16	; 0x2f
    3126:	1f 8d       	ldd	r17, Y+31	; 0x1f
    3128:	2f 89       	ldd	r18, Y+23	; 0x17
    312a:	21 17       	cp	r18, r17
    312c:	08 f0       	brcs	.+2      	; 0x3130 <TIMER2_Set_Time_S+0x1ba>
    312e:	1f a6       	std	Y+47, r1	; 0x2f
    3130:	3f 8d       	ldd	r19, Y+31	; 0x1f
    3132:	4c a5       	ldd	r20, Y+44	; 0x2c
    3134:	34 1b       	sub	r19, r20
    3136:	38 ab       	std	Y+48, r19	; 0x30
    3138:	51 e0       	ldi	r21, 0x01	; 1
    313a:	59 ab       	std	Y+49, r21	; 0x31
    313c:	68 a9       	ldd	r22, Y+48	; 0x30
    313e:	7f 8d       	ldd	r23, Y+31	; 0x1f
    3140:	76 17       	cp	r23, r22
    3142:	08 f0       	brcs	.+2      	; 0x3146 <TIMER2_Set_Time_S+0x1d0>
    3144:	19 aa       	std	Y+49, r1	; 0x31
    3146:	8f a5       	ldd	r24, Y+47	; 0x2f
    3148:	99 a9       	ldd	r25, Y+49	; 0x31
    314a:	89 2b       	or	r24, r25
    314c:	8f a7       	std	Y+47, r24	; 0x2f
    314e:	e8 a9       	ldd	r30, Y+48	; 0x30
    3150:	ef 8f       	std	Y+31, r30	; 0x1f
    3152:	f8 8d       	ldd	r31, Y+24	; 0x18
    3154:	08 89       	ldd	r16, Y+16	; 0x10
    3156:	f0 1b       	sub	r31, r16
    3158:	f8 a3       	std	Y+32, r31	; 0x20
    315a:	11 e0       	ldi	r17, 0x01	; 1
    315c:	1a ab       	std	Y+50, r17	; 0x32
    315e:	28 a1       	ldd	r18, Y+32	; 0x20
    3160:	38 8d       	ldd	r19, Y+24	; 0x18
    3162:	32 17       	cp	r19, r18
    3164:	08 f0       	brcs	.+2      	; 0x3168 <TIMER2_Set_Time_S+0x1f2>
    3166:	1a aa       	std	Y+50, r1	; 0x32
    3168:	48 a1       	ldd	r20, Y+32	; 0x20
    316a:	5f a5       	ldd	r21, Y+47	; 0x2f
    316c:	45 1b       	sub	r20, r21
    316e:	4b ab       	std	Y+51, r20	; 0x33
    3170:	61 e0       	ldi	r22, 0x01	; 1
    3172:	6c ab       	std	Y+52, r22	; 0x34
    3174:	7b a9       	ldd	r23, Y+51	; 0x33
    3176:	88 a1       	ldd	r24, Y+32	; 0x20
    3178:	87 17       	cp	r24, r23
    317a:	08 f0       	brcs	.+2      	; 0x317e <TIMER2_Set_Time_S+0x208>
    317c:	1c aa       	std	Y+52, r1	; 0x34
    317e:	9a a9       	ldd	r25, Y+50	; 0x32
    3180:	ec a9       	ldd	r30, Y+52	; 0x34
    3182:	9e 2b       	or	r25, r30
    3184:	9a ab       	std	Y+50, r25	; 0x32
    3186:	fb a9       	ldd	r31, Y+51	; 0x33
    3188:	f8 a3       	std	Y+32, r31	; 0x20
    318a:	09 8d       	ldd	r16, Y+25	; 0x19
    318c:	19 89       	ldd	r17, Y+17	; 0x11
    318e:	01 1b       	sub	r16, r17
    3190:	09 a3       	std	Y+33, r16	; 0x21
    3192:	89 a1       	ldd	r24, Y+33	; 0x21
    3194:	2a a9       	ldd	r18, Y+50	; 0x32
    3196:	82 1b       	sub	r24, r18
    3198:	89 a3       	std	Y+33, r24	; 0x21
    319a:	3a 8d       	ldd	r19, Y+26	; 0x1a
    319c:	3a 8b       	std	Y+18, r19	; 0x12
    319e:	4b 8d       	ldd	r20, Y+27	; 0x1b
    31a0:	4b 8b       	std	Y+19, r20	; 0x13
    31a2:	5c 8d       	ldd	r21, Y+28	; 0x1c
    31a4:	5c 8b       	std	Y+20, r21	; 0x14
    31a6:	6d 8d       	ldd	r22, Y+29	; 0x1d
    31a8:	6d 8b       	std	Y+21, r22	; 0x15
    31aa:	7e 8d       	ldd	r23, Y+30	; 0x1e
    31ac:	7e 8b       	std	Y+22, r23	; 0x16
    31ae:	8f 8d       	ldd	r24, Y+31	; 0x1f
    31b0:	8f 8b       	std	Y+23, r24	; 0x17
    31b2:	98 a1       	ldd	r25, Y+32	; 0x20
    31b4:	98 8f       	std	Y+24, r25	; 0x18
    31b6:	e9 a1       	ldd	r30, Y+33	; 0x21
    31b8:	e9 8f       	std	Y+25, r30	; 0x19
    31ba:	fa 89       	ldd	r31, Y+18	; 0x12
    31bc:	0a 81       	ldd	r16, Y+2	; 0x02
    31be:	f0 0f       	add	r31, r16
    31c0:	fd ab       	std	Y+53, r31	; 0x35
    31c2:	11 e0       	ldi	r17, 0x01	; 1
    31c4:	1d af       	std	Y+61, r17	; 0x3d
    31c6:	2d a9       	ldd	r18, Y+53	; 0x35
    31c8:	3a 89       	ldd	r19, Y+18	; 0x12
    31ca:	23 17       	cp	r18, r19
    31cc:	08 f0       	brcs	.+2      	; 0x31d0 <TIMER2_Set_Time_S+0x25a>
    31ce:	1d ae       	std	Y+61, r1	; 0x3d
    31d0:	4b 89       	ldd	r20, Y+19	; 0x13
    31d2:	5b 81       	ldd	r21, Y+3	; 0x03
    31d4:	45 0f       	add	r20, r21
    31d6:	4e ab       	std	Y+54, r20	; 0x36
    31d8:	61 e0       	ldi	r22, 0x01	; 1
    31da:	6e af       	std	Y+62, r22	; 0x3e
    31dc:	7e a9       	ldd	r23, Y+54	; 0x36
    31de:	8b 89       	ldd	r24, Y+19	; 0x13
    31e0:	78 17       	cp	r23, r24
    31e2:	08 f0       	brcs	.+2      	; 0x31e6 <TIMER2_Set_Time_S+0x270>
    31e4:	1e ae       	std	Y+62, r1	; 0x3e
    31e6:	9d ad       	ldd	r25, Y+61	; 0x3d
    31e8:	ee a9       	ldd	r30, Y+54	; 0x36
    31ea:	9e 0f       	add	r25, r30
    31ec:	9f af       	std	Y+63, r25	; 0x3f
    31ee:	f1 e0       	ldi	r31, 0x01	; 1
    31f0:	21 96       	adiw	r28, 0x01	; 1
    31f2:	ff af       	std	Y+63, r31	; 0x3f
    31f4:	21 97       	sbiw	r28, 0x01	; 1
    31f6:	0f ad       	ldd	r16, Y+63	; 0x3f
    31f8:	1e a9       	ldd	r17, Y+54	; 0x36
    31fa:	01 17       	cp	r16, r17
    31fc:	18 f0       	brcs	.+6      	; 0x3204 <TIMER2_Set_Time_S+0x28e>
    31fe:	21 96       	adiw	r28, 0x01	; 1
    3200:	1f ae       	std	Y+63, r1	; 0x3f
    3202:	21 97       	sbiw	r28, 0x01	; 1
    3204:	2e ad       	ldd	r18, Y+62	; 0x3e
    3206:	21 96       	adiw	r28, 0x01	; 1
    3208:	3f ad       	ldd	r19, Y+63	; 0x3f
    320a:	21 97       	sbiw	r28, 0x01	; 1
    320c:	23 2b       	or	r18, r19
    320e:	2e af       	std	Y+62, r18	; 0x3e
    3210:	4f ad       	ldd	r20, Y+63	; 0x3f
    3212:	4e ab       	std	Y+54, r20	; 0x36
    3214:	5c 89       	ldd	r21, Y+20	; 0x14
    3216:	6c 81       	ldd	r22, Y+4	; 0x04
    3218:	56 0f       	add	r21, r22
    321a:	5f ab       	std	Y+55, r21	; 0x37
    321c:	71 e0       	ldi	r23, 0x01	; 1
    321e:	22 96       	adiw	r28, 0x02	; 2
    3220:	7f af       	std	Y+63, r23	; 0x3f
    3222:	22 97       	sbiw	r28, 0x02	; 2
    3224:	8f a9       	ldd	r24, Y+55	; 0x37
    3226:	9c 89       	ldd	r25, Y+20	; 0x14
    3228:	89 17       	cp	r24, r25
    322a:	18 f0       	brcs	.+6      	; 0x3232 <TIMER2_Set_Time_S+0x2bc>
    322c:	22 96       	adiw	r28, 0x02	; 2
    322e:	1f ae       	std	Y+63, r1	; 0x3f
    3230:	22 97       	sbiw	r28, 0x02	; 2
    3232:	ee ad       	ldd	r30, Y+62	; 0x3e
    3234:	ff a9       	ldd	r31, Y+55	; 0x37
    3236:	ef 0f       	add	r30, r31
    3238:	23 96       	adiw	r28, 0x03	; 3
    323a:	ef af       	std	Y+63, r30	; 0x3f
    323c:	23 97       	sbiw	r28, 0x03	; 3
    323e:	01 e0       	ldi	r16, 0x01	; 1
    3240:	24 96       	adiw	r28, 0x04	; 4
    3242:	0f af       	std	Y+63, r16	; 0x3f
    3244:	24 97       	sbiw	r28, 0x04	; 4
    3246:	23 96       	adiw	r28, 0x03	; 3
    3248:	1f ad       	ldd	r17, Y+63	; 0x3f
    324a:	23 97       	sbiw	r28, 0x03	; 3
    324c:	2f a9       	ldd	r18, Y+55	; 0x37
    324e:	12 17       	cp	r17, r18
    3250:	18 f0       	brcs	.+6      	; 0x3258 <TIMER2_Set_Time_S+0x2e2>
    3252:	24 96       	adiw	r28, 0x04	; 4
    3254:	1f ae       	std	Y+63, r1	; 0x3f
    3256:	24 97       	sbiw	r28, 0x04	; 4
    3258:	22 96       	adiw	r28, 0x02	; 2
    325a:	3f ad       	ldd	r19, Y+63	; 0x3f
    325c:	22 97       	sbiw	r28, 0x02	; 2
    325e:	24 96       	adiw	r28, 0x04	; 4
    3260:	4f ad       	ldd	r20, Y+63	; 0x3f
    3262:	24 97       	sbiw	r28, 0x04	; 4
    3264:	34 2b       	or	r19, r20
    3266:	22 96       	adiw	r28, 0x02	; 2
    3268:	3f af       	std	Y+63, r19	; 0x3f
    326a:	22 97       	sbiw	r28, 0x02	; 2
    326c:	23 96       	adiw	r28, 0x03	; 3
    326e:	5f ad       	ldd	r21, Y+63	; 0x3f
    3270:	23 97       	sbiw	r28, 0x03	; 3
    3272:	5f ab       	std	Y+55, r21	; 0x37
    3274:	6d 89       	ldd	r22, Y+21	; 0x15
    3276:	7d 81       	ldd	r23, Y+5	; 0x05
    3278:	67 0f       	add	r22, r23
    327a:	68 af       	std	Y+56, r22	; 0x38
    327c:	81 e0       	ldi	r24, 0x01	; 1
    327e:	25 96       	adiw	r28, 0x05	; 5
    3280:	8f af       	std	Y+63, r24	; 0x3f
    3282:	25 97       	sbiw	r28, 0x05	; 5
    3284:	98 ad       	ldd	r25, Y+56	; 0x38
    3286:	ed 89       	ldd	r30, Y+21	; 0x15
    3288:	9e 17       	cp	r25, r30
    328a:	18 f0       	brcs	.+6      	; 0x3292 <TIMER2_Set_Time_S+0x31c>
    328c:	25 96       	adiw	r28, 0x05	; 5
    328e:	1f ae       	std	Y+63, r1	; 0x3f
    3290:	25 97       	sbiw	r28, 0x05	; 5
    3292:	22 96       	adiw	r28, 0x02	; 2
    3294:	ff ad       	ldd	r31, Y+63	; 0x3f
    3296:	22 97       	sbiw	r28, 0x02	; 2
    3298:	08 ad       	ldd	r16, Y+56	; 0x38
    329a:	f0 0f       	add	r31, r16
    329c:	26 96       	adiw	r28, 0x06	; 6
    329e:	ff af       	std	Y+63, r31	; 0x3f
    32a0:	26 97       	sbiw	r28, 0x06	; 6
    32a2:	11 e0       	ldi	r17, 0x01	; 1
    32a4:	27 96       	adiw	r28, 0x07	; 7
    32a6:	1f af       	std	Y+63, r17	; 0x3f
    32a8:	27 97       	sbiw	r28, 0x07	; 7
    32aa:	26 96       	adiw	r28, 0x06	; 6
    32ac:	2f ad       	ldd	r18, Y+63	; 0x3f
    32ae:	26 97       	sbiw	r28, 0x06	; 6
    32b0:	38 ad       	ldd	r19, Y+56	; 0x38
    32b2:	23 17       	cp	r18, r19
    32b4:	18 f0       	brcs	.+6      	; 0x32bc <TIMER2_Set_Time_S+0x346>
    32b6:	27 96       	adiw	r28, 0x07	; 7
    32b8:	1f ae       	std	Y+63, r1	; 0x3f
    32ba:	27 97       	sbiw	r28, 0x07	; 7
    32bc:	25 96       	adiw	r28, 0x05	; 5
    32be:	4f ad       	ldd	r20, Y+63	; 0x3f
    32c0:	25 97       	sbiw	r28, 0x05	; 5
    32c2:	27 96       	adiw	r28, 0x07	; 7
    32c4:	5f ad       	ldd	r21, Y+63	; 0x3f
    32c6:	27 97       	sbiw	r28, 0x07	; 7
    32c8:	45 2b       	or	r20, r21
    32ca:	25 96       	adiw	r28, 0x05	; 5
    32cc:	4f af       	std	Y+63, r20	; 0x3f
    32ce:	25 97       	sbiw	r28, 0x05	; 5
    32d0:	26 96       	adiw	r28, 0x06	; 6
    32d2:	6f ad       	ldd	r22, Y+63	; 0x3f
    32d4:	26 97       	sbiw	r28, 0x06	; 6
    32d6:	68 af       	std	Y+56, r22	; 0x38
    32d8:	7e 89       	ldd	r23, Y+22	; 0x16
    32da:	8e 81       	ldd	r24, Y+6	; 0x06
    32dc:	78 0f       	add	r23, r24
    32de:	79 af       	std	Y+57, r23	; 0x39
    32e0:	91 e0       	ldi	r25, 0x01	; 1
    32e2:	28 96       	adiw	r28, 0x08	; 8
    32e4:	9f af       	std	Y+63, r25	; 0x3f
    32e6:	28 97       	sbiw	r28, 0x08	; 8
    32e8:	e9 ad       	ldd	r30, Y+57	; 0x39
    32ea:	fe 89       	ldd	r31, Y+22	; 0x16
    32ec:	ef 17       	cp	r30, r31
    32ee:	18 f0       	brcs	.+6      	; 0x32f6 <TIMER2_Set_Time_S+0x380>
    32f0:	28 96       	adiw	r28, 0x08	; 8
    32f2:	1f ae       	std	Y+63, r1	; 0x3f
    32f4:	28 97       	sbiw	r28, 0x08	; 8
    32f6:	25 96       	adiw	r28, 0x05	; 5
    32f8:	0f ad       	ldd	r16, Y+63	; 0x3f
    32fa:	25 97       	sbiw	r28, 0x05	; 5
    32fc:	19 ad       	ldd	r17, Y+57	; 0x39
    32fe:	01 0f       	add	r16, r17
    3300:	29 96       	adiw	r28, 0x09	; 9
    3302:	0f af       	std	Y+63, r16	; 0x3f
    3304:	29 97       	sbiw	r28, 0x09	; 9
    3306:	21 e0       	ldi	r18, 0x01	; 1
    3308:	2a 96       	adiw	r28, 0x0a	; 10
    330a:	2f af       	std	Y+63, r18	; 0x3f
    330c:	2a 97       	sbiw	r28, 0x0a	; 10
    330e:	29 96       	adiw	r28, 0x09	; 9
    3310:	3f ad       	ldd	r19, Y+63	; 0x3f
    3312:	29 97       	sbiw	r28, 0x09	; 9
    3314:	49 ad       	ldd	r20, Y+57	; 0x39
    3316:	34 17       	cp	r19, r20
    3318:	18 f0       	brcs	.+6      	; 0x3320 <TIMER2_Set_Time_S+0x3aa>
    331a:	2a 96       	adiw	r28, 0x0a	; 10
    331c:	1f ae       	std	Y+63, r1	; 0x3f
    331e:	2a 97       	sbiw	r28, 0x0a	; 10
    3320:	28 96       	adiw	r28, 0x08	; 8
    3322:	5f ad       	ldd	r21, Y+63	; 0x3f
    3324:	28 97       	sbiw	r28, 0x08	; 8
    3326:	2a 96       	adiw	r28, 0x0a	; 10
    3328:	6f ad       	ldd	r22, Y+63	; 0x3f
    332a:	2a 97       	sbiw	r28, 0x0a	; 10
    332c:	56 2b       	or	r21, r22
    332e:	28 96       	adiw	r28, 0x08	; 8
    3330:	5f af       	std	Y+63, r21	; 0x3f
    3332:	28 97       	sbiw	r28, 0x08	; 8
    3334:	29 96       	adiw	r28, 0x09	; 9
    3336:	7f ad       	ldd	r23, Y+63	; 0x3f
    3338:	29 97       	sbiw	r28, 0x09	; 9
    333a:	79 af       	std	Y+57, r23	; 0x39
    333c:	8f 89       	ldd	r24, Y+23	; 0x17
    333e:	9f 81       	ldd	r25, Y+7	; 0x07
    3340:	89 0f       	add	r24, r25
    3342:	8a af       	std	Y+58, r24	; 0x3a
    3344:	e1 e0       	ldi	r30, 0x01	; 1
    3346:	2b 96       	adiw	r28, 0x0b	; 11
    3348:	ef af       	std	Y+63, r30	; 0x3f
    334a:	2b 97       	sbiw	r28, 0x0b	; 11
    334c:	fa ad       	ldd	r31, Y+58	; 0x3a
    334e:	0f 89       	ldd	r16, Y+23	; 0x17
    3350:	f0 17       	cp	r31, r16
    3352:	18 f0       	brcs	.+6      	; 0x335a <TIMER2_Set_Time_S+0x3e4>
    3354:	2b 96       	adiw	r28, 0x0b	; 11
    3356:	1f ae       	std	Y+63, r1	; 0x3f
    3358:	2b 97       	sbiw	r28, 0x0b	; 11
    335a:	28 96       	adiw	r28, 0x08	; 8
    335c:	1f ad       	ldd	r17, Y+63	; 0x3f
    335e:	28 97       	sbiw	r28, 0x08	; 8
    3360:	2a ad       	ldd	r18, Y+58	; 0x3a
    3362:	12 0f       	add	r17, r18
    3364:	2c 96       	adiw	r28, 0x0c	; 12
    3366:	1f af       	std	Y+63, r17	; 0x3f
    3368:	2c 97       	sbiw	r28, 0x0c	; 12
    336a:	31 e0       	ldi	r19, 0x01	; 1
    336c:	2d 96       	adiw	r28, 0x0d	; 13
    336e:	3f af       	std	Y+63, r19	; 0x3f
    3370:	2d 97       	sbiw	r28, 0x0d	; 13
    3372:	2c 96       	adiw	r28, 0x0c	; 12
    3374:	4f ad       	ldd	r20, Y+63	; 0x3f
    3376:	2c 97       	sbiw	r28, 0x0c	; 12
    3378:	5a ad       	ldd	r21, Y+58	; 0x3a
    337a:	45 17       	cp	r20, r21
    337c:	18 f0       	brcs	.+6      	; 0x3384 <TIMER2_Set_Time_S+0x40e>
    337e:	2d 96       	adiw	r28, 0x0d	; 13
    3380:	1f ae       	std	Y+63, r1	; 0x3f
    3382:	2d 97       	sbiw	r28, 0x0d	; 13
    3384:	2b 96       	adiw	r28, 0x0b	; 11
    3386:	6f ad       	ldd	r22, Y+63	; 0x3f
    3388:	2b 97       	sbiw	r28, 0x0b	; 11
    338a:	2d 96       	adiw	r28, 0x0d	; 13
    338c:	7f ad       	ldd	r23, Y+63	; 0x3f
    338e:	2d 97       	sbiw	r28, 0x0d	; 13
    3390:	67 2b       	or	r22, r23
    3392:	2b 96       	adiw	r28, 0x0b	; 11
    3394:	6f af       	std	Y+63, r22	; 0x3f
    3396:	2b 97       	sbiw	r28, 0x0b	; 11
    3398:	2c 96       	adiw	r28, 0x0c	; 12
    339a:	8f ad       	ldd	r24, Y+63	; 0x3f
    339c:	2c 97       	sbiw	r28, 0x0c	; 12
    339e:	8a af       	std	Y+58, r24	; 0x3a
    33a0:	98 8d       	ldd	r25, Y+24	; 0x18
    33a2:	e8 85       	ldd	r30, Y+8	; 0x08
    33a4:	9e 0f       	add	r25, r30
    33a6:	9b af       	std	Y+59, r25	; 0x3b
    33a8:	f1 e0       	ldi	r31, 0x01	; 1
    33aa:	2e 96       	adiw	r28, 0x0e	; 14
    33ac:	ff af       	std	Y+63, r31	; 0x3f
    33ae:	2e 97       	sbiw	r28, 0x0e	; 14
    33b0:	0b ad       	ldd	r16, Y+59	; 0x3b
    33b2:	18 8d       	ldd	r17, Y+24	; 0x18
    33b4:	01 17       	cp	r16, r17
    33b6:	18 f0       	brcs	.+6      	; 0x33be <TIMER2_Set_Time_S+0x448>
    33b8:	2e 96       	adiw	r28, 0x0e	; 14
    33ba:	1f ae       	std	Y+63, r1	; 0x3f
    33bc:	2e 97       	sbiw	r28, 0x0e	; 14
    33be:	2b 96       	adiw	r28, 0x0b	; 11
    33c0:	2f ad       	ldd	r18, Y+63	; 0x3f
    33c2:	2b 97       	sbiw	r28, 0x0b	; 11
    33c4:	3b ad       	ldd	r19, Y+59	; 0x3b
    33c6:	23 0f       	add	r18, r19
    33c8:	2f 96       	adiw	r28, 0x0f	; 15
    33ca:	2f af       	std	Y+63, r18	; 0x3f
    33cc:	2f 97       	sbiw	r28, 0x0f	; 15
    33ce:	41 e0       	ldi	r20, 0x01	; 1
    33d0:	60 96       	adiw	r28, 0x10	; 16
    33d2:	4f af       	std	Y+63, r20	; 0x3f
    33d4:	60 97       	sbiw	r28, 0x10	; 16
    33d6:	2f 96       	adiw	r28, 0x0f	; 15
    33d8:	5f ad       	ldd	r21, Y+63	; 0x3f
    33da:	2f 97       	sbiw	r28, 0x0f	; 15
    33dc:	6b ad       	ldd	r22, Y+59	; 0x3b
    33de:	56 17       	cp	r21, r22
    33e0:	18 f0       	brcs	.+6      	; 0x33e8 <TIMER2_Set_Time_S+0x472>
    33e2:	60 96       	adiw	r28, 0x10	; 16
    33e4:	1f ae       	std	Y+63, r1	; 0x3f
    33e6:	60 97       	sbiw	r28, 0x10	; 16
    33e8:	2e 96       	adiw	r28, 0x0e	; 14
    33ea:	7f ad       	ldd	r23, Y+63	; 0x3f
    33ec:	2e 97       	sbiw	r28, 0x0e	; 14
    33ee:	60 96       	adiw	r28, 0x10	; 16
    33f0:	8f ad       	ldd	r24, Y+63	; 0x3f
    33f2:	60 97       	sbiw	r28, 0x10	; 16
    33f4:	78 2b       	or	r23, r24
    33f6:	2e 96       	adiw	r28, 0x0e	; 14
    33f8:	7f af       	std	Y+63, r23	; 0x3f
    33fa:	2e 97       	sbiw	r28, 0x0e	; 14
    33fc:	2f 96       	adiw	r28, 0x0f	; 15
    33fe:	9f ad       	ldd	r25, Y+63	; 0x3f
    3400:	2f 97       	sbiw	r28, 0x0f	; 15
    3402:	9b af       	std	Y+59, r25	; 0x3b
    3404:	e9 8d       	ldd	r30, Y+25	; 0x19
    3406:	f9 85       	ldd	r31, Y+9	; 0x09
    3408:	ef 0f       	add	r30, r31
    340a:	ec af       	std	Y+60, r30	; 0x3c
    340c:	2e 96       	adiw	r28, 0x0e	; 14
    340e:	8f ad       	ldd	r24, Y+63	; 0x3f
    3410:	2e 97       	sbiw	r28, 0x0e	; 14
    3412:	0c ad       	ldd	r16, Y+60	; 0x3c
    3414:	80 0f       	add	r24, r16
    3416:	8c af       	std	Y+60, r24	; 0x3c
    3418:	1d a9       	ldd	r17, Y+53	; 0x35
    341a:	1a 8b       	std	Y+18, r17	; 0x12
    341c:	2e a9       	ldd	r18, Y+54	; 0x36
    341e:	2b 8b       	std	Y+19, r18	; 0x13
    3420:	3f a9       	ldd	r19, Y+55	; 0x37
    3422:	3c 8b       	std	Y+20, r19	; 0x14
    3424:	48 ad       	ldd	r20, Y+56	; 0x38
    3426:	4d 8b       	std	Y+21, r20	; 0x15
    3428:	59 ad       	ldd	r21, Y+57	; 0x39
    342a:	5e 8b       	std	Y+22, r21	; 0x16
    342c:	6a ad       	ldd	r22, Y+58	; 0x3a
    342e:	6f 8b       	std	Y+23, r22	; 0x17
    3430:	7b ad       	ldd	r23, Y+59	; 0x3b
    3432:	78 8f       	std	Y+24, r23	; 0x18
    3434:	8c ad       	ldd	r24, Y+60	; 0x3c
    3436:	89 8f       	std	Y+25, r24	; 0x19
    3438:	2a 89       	ldd	r18, Y+18	; 0x12
    343a:	3b 89       	ldd	r19, Y+19	; 0x13
    343c:	4c 89       	ldd	r20, Y+20	; 0x14
    343e:	5d 89       	ldd	r21, Y+21	; 0x15
    3440:	6e 89       	ldd	r22, Y+22	; 0x16
    3442:	7f 89       	ldd	r23, Y+23	; 0x17
    3444:	88 8d       	ldd	r24, Y+24	; 0x18
    3446:	99 8d       	ldd	r25, Y+25	; 0x19
    3448:	03 e0       	ldi	r16, 0x03	; 3
    344a:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    344e:	a2 2e       	mov	r10, r18
    3450:	b3 2e       	mov	r11, r19
    3452:	c4 2e       	mov	r12, r20
    3454:	d5 2e       	mov	r13, r21
    3456:	e6 2e       	mov	r14, r22
    3458:	f7 2e       	mov	r15, r23
    345a:	08 2f       	mov	r16, r24
    345c:	19 2f       	mov	r17, r25
    345e:	2a 2d       	mov	r18, r10
    3460:	3b 2d       	mov	r19, r11
    3462:	4c 2d       	mov	r20, r12
    3464:	5d 2d       	mov	r21, r13
    3466:	6e 2d       	mov	r22, r14
    3468:	7f 2d       	mov	r23, r15
    346a:	80 2f       	mov	r24, r16
    346c:	91 2f       	mov	r25, r17
    346e:	20 93 94 01 	sts	0x0194, r18
    3472:	30 93 95 01 	sts	0x0195, r19
    3476:	40 93 96 01 	sts	0x0196, r20
    347a:	50 93 97 01 	sts	0x0197, r21
    347e:	60 93 98 01 	sts	0x0198, r22
    3482:	70 93 99 01 	sts	0x0199, r23
    3486:	80 93 9a 01 	sts	0x019A, r24
    348a:	90 93 9b 01 	sts	0x019B, r25
    T_OV_TIMER2 = (256*(f32)PRE_SCALAR_TIMER2)/8000 ;                                //time in ms
    348e:	80 91 9c 01 	lds	r24, 0x019C
    3492:	90 91 9d 01 	lds	r25, 0x019D
    3496:	cc 01       	movw	r24, r24
    3498:	a0 e0       	ldi	r26, 0x00	; 0
    349a:	b0 e0       	ldi	r27, 0x00	; 0
    349c:	bc 01       	movw	r22, r24
    349e:	cd 01       	movw	r24, r26
    34a0:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__floatunsisf>
    34a4:	dc 01       	movw	r26, r24
    34a6:	cb 01       	movw	r24, r22
    34a8:	bc 01       	movw	r22, r24
    34aa:	cd 01       	movw	r24, r26
    34ac:	20 e0       	ldi	r18, 0x00	; 0
    34ae:	30 e0       	ldi	r19, 0x00	; 0
    34b0:	40 e8       	ldi	r20, 0x80	; 128
    34b2:	53 e4       	ldi	r21, 0x43	; 67
    34b4:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    34b8:	dc 01       	movw	r26, r24
    34ba:	cb 01       	movw	r24, r22
    34bc:	bc 01       	movw	r22, r24
    34be:	cd 01       	movw	r24, r26
    34c0:	20 e0       	ldi	r18, 0x00	; 0
    34c2:	30 e0       	ldi	r19, 0x00	; 0
    34c4:	4a ef       	ldi	r20, 0xFA	; 250
    34c6:	55 e4       	ldi	r21, 0x45	; 69
    34c8:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__divsf3>
    34cc:	dc 01       	movw	r26, r24
    34ce:	cb 01       	movw	r24, r22
    34d0:	80 93 9e 01 	sts	0x019E, r24
    34d4:	90 93 9f 01 	sts	0x019F, r25
    34d8:	a0 93 a0 01 	sts	0x01A0, r26
    34dc:	b0 93 a1 01 	sts	0x01A1, r27
	NUM_OV_TIMER2 = DESIRED_TIME_TIMER2 / T_OV_TIMER2 ;                              //number of overflow wanted in entered if
    34e0:	a0 90 94 01 	lds	r10, 0x0194
    34e4:	b0 90 95 01 	lds	r11, 0x0195
    34e8:	c0 90 96 01 	lds	r12, 0x0196
    34ec:	d0 90 97 01 	lds	r13, 0x0197
    34f0:	e0 90 98 01 	lds	r14, 0x0198
    34f4:	f0 90 99 01 	lds	r15, 0x0199
    34f8:	00 91 9a 01 	lds	r16, 0x019A
    34fc:	10 91 9b 01 	lds	r17, 0x019B
    3500:	2a 2d       	mov	r18, r10
    3502:	3b 2d       	mov	r19, r11
    3504:	4c 2d       	mov	r20, r12
    3506:	5d 2d       	mov	r21, r13
    3508:	6e 2d       	mov	r22, r14
    350a:	7f 2d       	mov	r23, r15
    350c:	80 2f       	mov	r24, r16
    350e:	91 2f       	mov	r25, r17
    3510:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__floatundisf>
    3514:	dc 01       	movw	r26, r24
    3516:	cb 01       	movw	r24, r22
    3518:	20 91 9e 01 	lds	r18, 0x019E
    351c:	30 91 9f 01 	lds	r19, 0x019F
    3520:	40 91 a0 01 	lds	r20, 0x01A0
    3524:	50 91 a1 01 	lds	r21, 0x01A1
    3528:	bc 01       	movw	r22, r24
    352a:	cd 01       	movw	r24, r26
    352c:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__divsf3>
    3530:	dc 01       	movw	r26, r24
    3532:	cb 01       	movw	r24, r22
    3534:	80 93 a2 01 	sts	0x01A2, r24
    3538:	90 93 a3 01 	sts	0x01A3, r25
    353c:	a0 93 a4 01 	sts	0x01A4, r26
    3540:	b0 93 a5 01 	sts	0x01A5, r27
	PRE_LOAD_TIMER2  = NUM_OV_TIMER2 -( (u32)(DESIRED_TIME_TIMER2 /T_OV_TIMER2) );   //the value which should be in TCNT to make time more accurate
    3544:	60 90 a2 01 	lds	r6, 0x01A2
    3548:	70 90 a3 01 	lds	r7, 0x01A3
    354c:	80 90 a4 01 	lds	r8, 0x01A4
    3550:	90 90 a5 01 	lds	r9, 0x01A5
    3554:	a0 90 94 01 	lds	r10, 0x0194
    3558:	b0 90 95 01 	lds	r11, 0x0195
    355c:	c0 90 96 01 	lds	r12, 0x0196
    3560:	d0 90 97 01 	lds	r13, 0x0197
    3564:	e0 90 98 01 	lds	r14, 0x0198
    3568:	f0 90 99 01 	lds	r15, 0x0199
    356c:	00 91 9a 01 	lds	r16, 0x019A
    3570:	10 91 9b 01 	lds	r17, 0x019B
    3574:	2a 2d       	mov	r18, r10
    3576:	3b 2d       	mov	r19, r11
    3578:	4c 2d       	mov	r20, r12
    357a:	5d 2d       	mov	r21, r13
    357c:	6e 2d       	mov	r22, r14
    357e:	7f 2d       	mov	r23, r15
    3580:	80 2f       	mov	r24, r16
    3582:	91 2f       	mov	r25, r17
    3584:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__floatundisf>
    3588:	dc 01       	movw	r26, r24
    358a:	cb 01       	movw	r24, r22
    358c:	20 91 9e 01 	lds	r18, 0x019E
    3590:	30 91 9f 01 	lds	r19, 0x019F
    3594:	40 91 a0 01 	lds	r20, 0x01A0
    3598:	50 91 a1 01 	lds	r21, 0x01A1
    359c:	bc 01       	movw	r22, r24
    359e:	cd 01       	movw	r24, r26
    35a0:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__divsf3>
    35a4:	dc 01       	movw	r26, r24
    35a6:	cb 01       	movw	r24, r22
    35a8:	bc 01       	movw	r22, r24
    35aa:	cd 01       	movw	r24, r26
    35ac:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    35b0:	dc 01       	movw	r26, r24
    35b2:	cb 01       	movw	r24, r22
    35b4:	cc 01       	movw	r24, r24
    35b6:	a0 e0       	ldi	r26, 0x00	; 0
    35b8:	b0 e0       	ldi	r27, 0x00	; 0
    35ba:	bc 01       	movw	r22, r24
    35bc:	cd 01       	movw	r24, r26
    35be:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__floatunsisf>
    35c2:	9b 01       	movw	r18, r22
    35c4:	ac 01       	movw	r20, r24
    35c6:	c4 01       	movw	r24, r8
    35c8:	b3 01       	movw	r22, r6
    35ca:	0e 94 1c 03 	call	0x638	; 0x638 <__subsf3>
    35ce:	dc 01       	movw	r26, r24
    35d0:	cb 01       	movw	r24, r22
    35d2:	80 93 a6 01 	sts	0x01A6, r24
    35d6:	90 93 a7 01 	sts	0x01A7, r25
    35da:	a0 93 a8 01 	sts	0x01A8, r26
    35de:	b0 93 a9 01 	sts	0x01A9, r27
	if ( NUM_OV_TIMER2 > (u32)NUM_OV_TIMER2 ){
    35e2:	80 91 a2 01 	lds	r24, 0x01A2
    35e6:	90 91 a3 01 	lds	r25, 0x01A3
    35ea:	a0 91 a4 01 	lds	r26, 0x01A4
    35ee:	b0 91 a5 01 	lds	r27, 0x01A5
    35f2:	bc 01       	movw	r22, r24
    35f4:	cd 01       	movw	r24, r26
    35f6:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    35fa:	dc 01       	movw	r26, r24
    35fc:	cb 01       	movw	r24, r22
    35fe:	cc 01       	movw	r24, r24
    3600:	a0 e0       	ldi	r26, 0x00	; 0
    3602:	b0 e0       	ldi	r27, 0x00	; 0
    3604:	bc 01       	movw	r22, r24
    3606:	cd 01       	movw	r24, r26
    3608:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__floatunsisf>
    360c:	dc 01       	movw	r26, r24
    360e:	cb 01       	movw	r24, r22
    3610:	20 91 a2 01 	lds	r18, 0x01A2
    3614:	30 91 a3 01 	lds	r19, 0x01A3
    3618:	40 91 a4 01 	lds	r20, 0x01A4
    361c:	50 91 a5 01 	lds	r21, 0x01A5
    3620:	bc 01       	movw	r22, r24
    3622:	cd 01       	movw	r24, r26
    3624:	0e 94 80 05 	call	0xb00	; 0xb00 <__ltsf2>
    3628:	88 23       	and	r24, r24
    362a:	d4 f4       	brge	.+52     	; 0x3660 <TIMER2_Set_Time_S+0x6ea>
		NUM_OV_TIMER2++;
    362c:	80 91 a2 01 	lds	r24, 0x01A2
    3630:	90 91 a3 01 	lds	r25, 0x01A3
    3634:	a0 91 a4 01 	lds	r26, 0x01A4
    3638:	b0 91 a5 01 	lds	r27, 0x01A5
    363c:	bc 01       	movw	r22, r24
    363e:	cd 01       	movw	r24, r26
    3640:	20 e0       	ldi	r18, 0x00	; 0
    3642:	30 e0       	ldi	r19, 0x00	; 0
    3644:	40 e8       	ldi	r20, 0x80	; 128
    3646:	5f e3       	ldi	r21, 0x3F	; 63
    3648:	0e 94 4d 03 	call	0x69a	; 0x69a <__addsf3>
    364c:	dc 01       	movw	r26, r24
    364e:	cb 01       	movw	r24, r22
    3650:	80 93 a2 01 	sts	0x01A2, r24
    3654:	90 93 a3 01 	sts	0x01A3, r25
    3658:	a0 93 a4 01 	sts	0x01A4, r26
    365c:	b0 93 a5 01 	sts	0x01A5, r27
	}//end if

	//to begin from specific value
	TCNT2 = 256-(256*PRE_LOAD_TIMER2 );
    3660:	04 e4       	ldi	r16, 0x44	; 68
    3662:	10 e0       	ldi	r17, 0x00	; 0
    3664:	80 91 a6 01 	lds	r24, 0x01A6
    3668:	90 91 a7 01 	lds	r25, 0x01A7
    366c:	a0 91 a8 01 	lds	r26, 0x01A8
    3670:	b0 91 a9 01 	lds	r27, 0x01A9
    3674:	bc 01       	movw	r22, r24
    3676:	cd 01       	movw	r24, r26
    3678:	20 e0       	ldi	r18, 0x00	; 0
    367a:	30 e0       	ldi	r19, 0x00	; 0
    367c:	40 e8       	ldi	r20, 0x80	; 128
    367e:	53 ec       	ldi	r21, 0xC3	; 195
    3680:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    3684:	dc 01       	movw	r26, r24
    3686:	cb 01       	movw	r24, r22
    3688:	bc 01       	movw	r22, r24
    368a:	cd 01       	movw	r24, r26
    368c:	20 e0       	ldi	r18, 0x00	; 0
    368e:	30 e0       	ldi	r19, 0x00	; 0
    3690:	40 e8       	ldi	r20, 0x80	; 128
    3692:	53 e4       	ldi	r21, 0x43	; 67
    3694:	0e 94 4d 03 	call	0x69a	; 0x69a <__addsf3>
    3698:	dc 01       	movw	r26, r24
    369a:	cb 01       	movw	r24, r22
    369c:	bc 01       	movw	r22, r24
    369e:	cd 01       	movw	r24, r26
    36a0:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    36a4:	dc 01       	movw	r26, r24
    36a6:	cb 01       	movw	r24, r22
    36a8:	f8 01       	movw	r30, r16
    36aa:	80 83       	st	Z, r24
}
    36ac:	c1 5b       	subi	r28, 0xB1	; 177
    36ae:	df 4f       	sbci	r29, 0xFF	; 255
    36b0:	0f b6       	in	r0, 0x3f	; 63
    36b2:	f8 94       	cli
    36b4:	de bf       	out	0x3e, r29	; 62
    36b6:	0f be       	out	0x3f, r0	; 63
    36b8:	cd bf       	out	0x3d, r28	; 61
    36ba:	cf 91       	pop	r28
    36bc:	df 91       	pop	r29
    36be:	1f 91       	pop	r17
    36c0:	0f 91       	pop	r16
    36c2:	ff 90       	pop	r15
    36c4:	ef 90       	pop	r14
    36c6:	df 90       	pop	r13
    36c8:	cf 90       	pop	r12
    36ca:	bf 90       	pop	r11
    36cc:	af 90       	pop	r10
    36ce:	9f 90       	pop	r9
    36d0:	8f 90       	pop	r8
    36d2:	7f 90       	pop	r7
    36d4:	6f 90       	pop	r6
    36d6:	08 95       	ret

000036d8 <TIMER2_Set_Time_mS>:

void TIMER2_Set_Time_mS (u16 Copy_U8Time){
    36d8:	6f 92       	push	r6
    36da:	7f 92       	push	r7
    36dc:	8f 92       	push	r8
    36de:	9f 92       	push	r9
    36e0:	af 92       	push	r10
    36e2:	bf 92       	push	r11
    36e4:	cf 92       	push	r12
    36e6:	df 92       	push	r13
    36e8:	ef 92       	push	r14
    36ea:	ff 92       	push	r15
    36ec:	0f 93       	push	r16
    36ee:	1f 93       	push	r17
    36f0:	df 93       	push	r29
    36f2:	cf 93       	push	r28
    36f4:	00 d0       	rcall	.+0      	; 0x36f6 <TIMER2_Set_Time_mS+0x1e>
    36f6:	cd b7       	in	r28, 0x3d	; 61
    36f8:	de b7       	in	r29, 0x3e	; 62
    36fa:	9a 83       	std	Y+2, r25	; 0x02
    36fc:	89 83       	std	Y+1, r24	; 0x01
	DESIRED_TIME_TIMER2 = Copy_U8Time ;                         //time in ms
    36fe:	89 81       	ldd	r24, Y+1	; 0x01
    3700:	9a 81       	ldd	r25, Y+2	; 0x02
    3702:	9c 01       	movw	r18, r24
    3704:	40 e0       	ldi	r20, 0x00	; 0
    3706:	50 e0       	ldi	r21, 0x00	; 0
    3708:	60 e0       	ldi	r22, 0x00	; 0
    370a:	70 e0       	ldi	r23, 0x00	; 0
    370c:	80 e0       	ldi	r24, 0x00	; 0
    370e:	90 e0       	ldi	r25, 0x00	; 0
    3710:	20 93 94 01 	sts	0x0194, r18
    3714:	30 93 95 01 	sts	0x0195, r19
    3718:	40 93 96 01 	sts	0x0196, r20
    371c:	50 93 97 01 	sts	0x0197, r21
    3720:	60 93 98 01 	sts	0x0198, r22
    3724:	70 93 99 01 	sts	0x0199, r23
    3728:	80 93 9a 01 	sts	0x019A, r24
    372c:	90 93 9b 01 	sts	0x019B, r25
    T_OV_TIMER2 = (256*(f32)PRE_SCALAR_TIMER2)/8000 ;                  //time in us
    3730:	80 91 9c 01 	lds	r24, 0x019C
    3734:	90 91 9d 01 	lds	r25, 0x019D
    3738:	cc 01       	movw	r24, r24
    373a:	a0 e0       	ldi	r26, 0x00	; 0
    373c:	b0 e0       	ldi	r27, 0x00	; 0
    373e:	bc 01       	movw	r22, r24
    3740:	cd 01       	movw	r24, r26
    3742:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__floatunsisf>
    3746:	dc 01       	movw	r26, r24
    3748:	cb 01       	movw	r24, r22
    374a:	bc 01       	movw	r22, r24
    374c:	cd 01       	movw	r24, r26
    374e:	20 e0       	ldi	r18, 0x00	; 0
    3750:	30 e0       	ldi	r19, 0x00	; 0
    3752:	40 e8       	ldi	r20, 0x80	; 128
    3754:	53 e4       	ldi	r21, 0x43	; 67
    3756:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    375a:	dc 01       	movw	r26, r24
    375c:	cb 01       	movw	r24, r22
    375e:	bc 01       	movw	r22, r24
    3760:	cd 01       	movw	r24, r26
    3762:	20 e0       	ldi	r18, 0x00	; 0
    3764:	30 e0       	ldi	r19, 0x00	; 0
    3766:	4a ef       	ldi	r20, 0xFA	; 250
    3768:	55 e4       	ldi	r21, 0x45	; 69
    376a:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__divsf3>
    376e:	dc 01       	movw	r26, r24
    3770:	cb 01       	movw	r24, r22
    3772:	80 93 9e 01 	sts	0x019E, r24
    3776:	90 93 9f 01 	sts	0x019F, r25
    377a:	a0 93 a0 01 	sts	0x01A0, r26
    377e:	b0 93 a1 01 	sts	0x01A1, r27
	NUM_OV_TIMER2 = DESIRED_TIME_TIMER2 / T_OV_TIMER2 ;                       //number of overflow wanted in entered if
    3782:	a0 90 94 01 	lds	r10, 0x0194
    3786:	b0 90 95 01 	lds	r11, 0x0195
    378a:	c0 90 96 01 	lds	r12, 0x0196
    378e:	d0 90 97 01 	lds	r13, 0x0197
    3792:	e0 90 98 01 	lds	r14, 0x0198
    3796:	f0 90 99 01 	lds	r15, 0x0199
    379a:	00 91 9a 01 	lds	r16, 0x019A
    379e:	10 91 9b 01 	lds	r17, 0x019B
    37a2:	2a 2d       	mov	r18, r10
    37a4:	3b 2d       	mov	r19, r11
    37a6:	4c 2d       	mov	r20, r12
    37a8:	5d 2d       	mov	r21, r13
    37aa:	6e 2d       	mov	r22, r14
    37ac:	7f 2d       	mov	r23, r15
    37ae:	80 2f       	mov	r24, r16
    37b0:	91 2f       	mov	r25, r17
    37b2:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__floatundisf>
    37b6:	dc 01       	movw	r26, r24
    37b8:	cb 01       	movw	r24, r22
    37ba:	20 91 9e 01 	lds	r18, 0x019E
    37be:	30 91 9f 01 	lds	r19, 0x019F
    37c2:	40 91 a0 01 	lds	r20, 0x01A0
    37c6:	50 91 a1 01 	lds	r21, 0x01A1
    37ca:	bc 01       	movw	r22, r24
    37cc:	cd 01       	movw	r24, r26
    37ce:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__divsf3>
    37d2:	dc 01       	movw	r26, r24
    37d4:	cb 01       	movw	r24, r22
    37d6:	80 93 a2 01 	sts	0x01A2, r24
    37da:	90 93 a3 01 	sts	0x01A3, r25
    37de:	a0 93 a4 01 	sts	0x01A4, r26
    37e2:	b0 93 a5 01 	sts	0x01A5, r27
	PRE_LOAD_TIMER2  = NUM_OV_TIMER2 -( (u32)(DESIRED_TIME_TIMER2 /T_OV_TIMER2) );   //the value which should be in TCNT to make time more accurate
    37e6:	60 90 a2 01 	lds	r6, 0x01A2
    37ea:	70 90 a3 01 	lds	r7, 0x01A3
    37ee:	80 90 a4 01 	lds	r8, 0x01A4
    37f2:	90 90 a5 01 	lds	r9, 0x01A5
    37f6:	a0 90 94 01 	lds	r10, 0x0194
    37fa:	b0 90 95 01 	lds	r11, 0x0195
    37fe:	c0 90 96 01 	lds	r12, 0x0196
    3802:	d0 90 97 01 	lds	r13, 0x0197
    3806:	e0 90 98 01 	lds	r14, 0x0198
    380a:	f0 90 99 01 	lds	r15, 0x0199
    380e:	00 91 9a 01 	lds	r16, 0x019A
    3812:	10 91 9b 01 	lds	r17, 0x019B
    3816:	2a 2d       	mov	r18, r10
    3818:	3b 2d       	mov	r19, r11
    381a:	4c 2d       	mov	r20, r12
    381c:	5d 2d       	mov	r21, r13
    381e:	6e 2d       	mov	r22, r14
    3820:	7f 2d       	mov	r23, r15
    3822:	80 2f       	mov	r24, r16
    3824:	91 2f       	mov	r25, r17
    3826:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__floatundisf>
    382a:	dc 01       	movw	r26, r24
    382c:	cb 01       	movw	r24, r22
    382e:	20 91 9e 01 	lds	r18, 0x019E
    3832:	30 91 9f 01 	lds	r19, 0x019F
    3836:	40 91 a0 01 	lds	r20, 0x01A0
    383a:	50 91 a1 01 	lds	r21, 0x01A1
    383e:	bc 01       	movw	r22, r24
    3840:	cd 01       	movw	r24, r26
    3842:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__divsf3>
    3846:	dc 01       	movw	r26, r24
    3848:	cb 01       	movw	r24, r22
    384a:	bc 01       	movw	r22, r24
    384c:	cd 01       	movw	r24, r26
    384e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3852:	dc 01       	movw	r26, r24
    3854:	cb 01       	movw	r24, r22
    3856:	cc 01       	movw	r24, r24
    3858:	a0 e0       	ldi	r26, 0x00	; 0
    385a:	b0 e0       	ldi	r27, 0x00	; 0
    385c:	bc 01       	movw	r22, r24
    385e:	cd 01       	movw	r24, r26
    3860:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__floatunsisf>
    3864:	9b 01       	movw	r18, r22
    3866:	ac 01       	movw	r20, r24
    3868:	c4 01       	movw	r24, r8
    386a:	b3 01       	movw	r22, r6
    386c:	0e 94 1c 03 	call	0x638	; 0x638 <__subsf3>
    3870:	dc 01       	movw	r26, r24
    3872:	cb 01       	movw	r24, r22
    3874:	80 93 a6 01 	sts	0x01A6, r24
    3878:	90 93 a7 01 	sts	0x01A7, r25
    387c:	a0 93 a8 01 	sts	0x01A8, r26
    3880:	b0 93 a9 01 	sts	0x01A9, r27
	if ( NUM_OV_TIMER2 > (u32)NUM_OV_TIMER2 ){
    3884:	80 91 a2 01 	lds	r24, 0x01A2
    3888:	90 91 a3 01 	lds	r25, 0x01A3
    388c:	a0 91 a4 01 	lds	r26, 0x01A4
    3890:	b0 91 a5 01 	lds	r27, 0x01A5
    3894:	bc 01       	movw	r22, r24
    3896:	cd 01       	movw	r24, r26
    3898:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    389c:	dc 01       	movw	r26, r24
    389e:	cb 01       	movw	r24, r22
    38a0:	cc 01       	movw	r24, r24
    38a2:	a0 e0       	ldi	r26, 0x00	; 0
    38a4:	b0 e0       	ldi	r27, 0x00	; 0
    38a6:	bc 01       	movw	r22, r24
    38a8:	cd 01       	movw	r24, r26
    38aa:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__floatunsisf>
    38ae:	dc 01       	movw	r26, r24
    38b0:	cb 01       	movw	r24, r22
    38b2:	20 91 a2 01 	lds	r18, 0x01A2
    38b6:	30 91 a3 01 	lds	r19, 0x01A3
    38ba:	40 91 a4 01 	lds	r20, 0x01A4
    38be:	50 91 a5 01 	lds	r21, 0x01A5
    38c2:	bc 01       	movw	r22, r24
    38c4:	cd 01       	movw	r24, r26
    38c6:	0e 94 80 05 	call	0xb00	; 0xb00 <__ltsf2>
    38ca:	88 23       	and	r24, r24
    38cc:	d4 f4       	brge	.+52     	; 0x3902 <TIMER2_Set_Time_mS+0x22a>
		NUM_OV_TIMER2++;
    38ce:	80 91 a2 01 	lds	r24, 0x01A2
    38d2:	90 91 a3 01 	lds	r25, 0x01A3
    38d6:	a0 91 a4 01 	lds	r26, 0x01A4
    38da:	b0 91 a5 01 	lds	r27, 0x01A5
    38de:	bc 01       	movw	r22, r24
    38e0:	cd 01       	movw	r24, r26
    38e2:	20 e0       	ldi	r18, 0x00	; 0
    38e4:	30 e0       	ldi	r19, 0x00	; 0
    38e6:	40 e8       	ldi	r20, 0x80	; 128
    38e8:	5f e3       	ldi	r21, 0x3F	; 63
    38ea:	0e 94 4d 03 	call	0x69a	; 0x69a <__addsf3>
    38ee:	dc 01       	movw	r26, r24
    38f0:	cb 01       	movw	r24, r22
    38f2:	80 93 a2 01 	sts	0x01A2, r24
    38f6:	90 93 a3 01 	sts	0x01A3, r25
    38fa:	a0 93 a4 01 	sts	0x01A4, r26
    38fe:	b0 93 a5 01 	sts	0x01A5, r27
#if PRE_TYPE_TIMER2 != PRE_8
#error "YOU SELECTED PRE_SCALAR MAKE MORE THAN 1 ms"
#endif

	//to begin from specific value
	TCNT2 = 256-(256*PRE_LOAD_TIMER2 );
    3902:	04 e4       	ldi	r16, 0x44	; 68
    3904:	10 e0       	ldi	r17, 0x00	; 0
    3906:	80 91 a6 01 	lds	r24, 0x01A6
    390a:	90 91 a7 01 	lds	r25, 0x01A7
    390e:	a0 91 a8 01 	lds	r26, 0x01A8
    3912:	b0 91 a9 01 	lds	r27, 0x01A9
    3916:	bc 01       	movw	r22, r24
    3918:	cd 01       	movw	r24, r26
    391a:	20 e0       	ldi	r18, 0x00	; 0
    391c:	30 e0       	ldi	r19, 0x00	; 0
    391e:	40 e8       	ldi	r20, 0x80	; 128
    3920:	53 ec       	ldi	r21, 0xC3	; 195
    3922:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    3926:	dc 01       	movw	r26, r24
    3928:	cb 01       	movw	r24, r22
    392a:	bc 01       	movw	r22, r24
    392c:	cd 01       	movw	r24, r26
    392e:	20 e0       	ldi	r18, 0x00	; 0
    3930:	30 e0       	ldi	r19, 0x00	; 0
    3932:	40 e8       	ldi	r20, 0x80	; 128
    3934:	53 e4       	ldi	r21, 0x43	; 67
    3936:	0e 94 4d 03 	call	0x69a	; 0x69a <__addsf3>
    393a:	dc 01       	movw	r26, r24
    393c:	cb 01       	movw	r24, r22
    393e:	bc 01       	movw	r22, r24
    3940:	cd 01       	movw	r24, r26
    3942:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3946:	dc 01       	movw	r26, r24
    3948:	cb 01       	movw	r24, r22
    394a:	f8 01       	movw	r30, r16
    394c:	80 83       	st	Z, r24
}
    394e:	0f 90       	pop	r0
    3950:	0f 90       	pop	r0
    3952:	cf 91       	pop	r28
    3954:	df 91       	pop	r29
    3956:	1f 91       	pop	r17
    3958:	0f 91       	pop	r16
    395a:	ff 90       	pop	r15
    395c:	ef 90       	pop	r14
    395e:	df 90       	pop	r13
    3960:	cf 90       	pop	r12
    3962:	bf 90       	pop	r11
    3964:	af 90       	pop	r10
    3966:	9f 90       	pop	r9
    3968:	8f 90       	pop	r8
    396a:	7f 90       	pop	r7
    396c:	6f 90       	pop	r6
    396e:	08 95       	ret

00003970 <Timer2_VidSETDUTY>:


//to check that you use FAST_PWM mode
void Timer2_VidSETDUTY (u8 duty ) {
    3970:	df 93       	push	r29
    3972:	cf 93       	push	r28
    3974:	0f 92       	push	r0
    3976:	cd b7       	in	r28, 0x3d	; 61
    3978:	de b7       	in	r29, 0x3e	; 62
    397a:	89 83       	std	Y+1, r24	; 0x01
	duty = (u8)( (u16)duty*255/100 ) ;
    397c:	89 81       	ldd	r24, Y+1	; 0x01
    397e:	48 2f       	mov	r20, r24
    3980:	50 e0       	ldi	r21, 0x00	; 0
    3982:	ca 01       	movw	r24, r20
    3984:	9c 01       	movw	r18, r24
    3986:	22 0f       	add	r18, r18
    3988:	33 1f       	adc	r19, r19
    398a:	c9 01       	movw	r24, r18
    398c:	96 95       	lsr	r25
    398e:	98 2f       	mov	r25, r24
    3990:	88 27       	eor	r24, r24
    3992:	97 95       	ror	r25
    3994:	87 95       	ror	r24
    3996:	82 1b       	sub	r24, r18
    3998:	93 0b       	sbc	r25, r19
    399a:	84 0f       	add	r24, r20
    399c:	95 1f       	adc	r25, r21
    399e:	24 e6       	ldi	r18, 0x64	; 100
    39a0:	30 e0       	ldi	r19, 0x00	; 0
    39a2:	b9 01       	movw	r22, r18
    39a4:	0e 94 78 2e 	call	0x5cf0	; 0x5cf0 <__udivmodhi4>
    39a8:	cb 01       	movw	r24, r22
    39aa:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = duty ;
    39ac:	e3 e4       	ldi	r30, 0x43	; 67
    39ae:	f0 e0       	ldi	r31, 0x00	; 0
    39b0:	89 81       	ldd	r24, Y+1	; 0x01
    39b2:	80 83       	st	Z, r24
}
    39b4:	0f 90       	pop	r0
    39b6:	cf 91       	pop	r28
    39b8:	df 91       	pop	r29
    39ba:	08 95       	ret

000039bc <__vector_11>:
    5) PRE_1024 every 1sec need t_ov = 32.768ms , num_ov = 30.51757813 , pre_load = 0.51757813
*/



void __vector_11(void){
    39bc:	1f 92       	push	r1
    39be:	0f 92       	push	r0
    39c0:	0f b6       	in	r0, 0x3f	; 63
    39c2:	0f 92       	push	r0
    39c4:	11 24       	eor	r1, r1
    39c6:	2f 93       	push	r18
    39c8:	3f 93       	push	r19
    39ca:	4f 93       	push	r20
    39cc:	5f 93       	push	r21
    39ce:	6f 93       	push	r22
    39d0:	7f 93       	push	r23
    39d2:	8f 93       	push	r24
    39d4:	9f 93       	push	r25
    39d6:	af 93       	push	r26
    39d8:	bf 93       	push	r27
    39da:	ef 93       	push	r30
    39dc:	ff 93       	push	r31
    39de:	df 93       	push	r29
    39e0:	cf 93       	push	r28
    39e2:	cd b7       	in	r28, 0x3d	; 61
    39e4:	de b7       	in	r29, 0x3e	; 62
     TIMER0_PFUNC();
    39e6:	e0 91 72 01 	lds	r30, 0x0172
    39ea:	f0 91 73 01 	lds	r31, 0x0173
    39ee:	09 95       	icall
}//end ISR FUNC
    39f0:	cf 91       	pop	r28
    39f2:	df 91       	pop	r29
    39f4:	ff 91       	pop	r31
    39f6:	ef 91       	pop	r30
    39f8:	bf 91       	pop	r27
    39fa:	af 91       	pop	r26
    39fc:	9f 91       	pop	r25
    39fe:	8f 91       	pop	r24
    3a00:	7f 91       	pop	r23
    3a02:	6f 91       	pop	r22
    3a04:	5f 91       	pop	r21
    3a06:	4f 91       	pop	r20
    3a08:	3f 91       	pop	r19
    3a0a:	2f 91       	pop	r18
    3a0c:	0f 90       	pop	r0
    3a0e:	0f be       	out	0x3f, r0	; 63
    3a10:	0f 90       	pop	r0
    3a12:	1f 90       	pop	r1
    3a14:	18 95       	reti

00003a16 <__vector_5>:

/****************************************************************************/

void __vector_5(void){
    3a16:	1f 92       	push	r1
    3a18:	0f 92       	push	r0
    3a1a:	0f b6       	in	r0, 0x3f	; 63
    3a1c:	0f 92       	push	r0
    3a1e:	11 24       	eor	r1, r1
    3a20:	0f 93       	push	r16
    3a22:	1f 93       	push	r17
    3a24:	2f 93       	push	r18
    3a26:	3f 93       	push	r19
    3a28:	4f 93       	push	r20
    3a2a:	5f 93       	push	r21
    3a2c:	6f 93       	push	r22
    3a2e:	7f 93       	push	r23
    3a30:	8f 93       	push	r24
    3a32:	9f 93       	push	r25
    3a34:	af 93       	push	r26
    3a36:	bf 93       	push	r27
    3a38:	ef 93       	push	r30
    3a3a:	ff 93       	push	r31
    3a3c:	df 93       	push	r29
    3a3e:	cf 93       	push	r28
    3a40:	cd b7       	in	r28, 0x3d	; 61
    3a42:	de b7       	in	r29, 0x3e	; 62
	static u32 tick = 0 ;
	tick++ ;
    3a44:	80 91 78 01 	lds	r24, 0x0178
    3a48:	90 91 79 01 	lds	r25, 0x0179
    3a4c:	01 96       	adiw	r24, 0x01	; 1
    3a4e:	90 93 79 01 	sts	0x0179, r25
    3a52:	80 93 78 01 	sts	0x0178, r24

	if (tick == (u32)NUM_OV_TIMER2 ){
    3a56:	80 91 a2 01 	lds	r24, 0x01A2
    3a5a:	90 91 a3 01 	lds	r25, 0x01A3
    3a5e:	a0 91 a4 01 	lds	r26, 0x01A4
    3a62:	b0 91 a5 01 	lds	r27, 0x01A5
    3a66:	bc 01       	movw	r22, r24
    3a68:	cd 01       	movw	r24, r26
    3a6a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3a6e:	dc 01       	movw	r26, r24
    3a70:	cb 01       	movw	r24, r22
    3a72:	9c 01       	movw	r18, r24
    3a74:	80 91 78 01 	lds	r24, 0x0178
    3a78:	90 91 79 01 	lds	r25, 0x0179
    3a7c:	28 17       	cp	r18, r24
    3a7e:	39 07       	cpc	r19, r25
    3a80:	79 f5       	brne	.+94     	; 0x3ae0 <__vector_5+0xca>
		TIMER2_PFUNC();                                     //to toggle led
    3a82:	e0 91 76 01 	lds	r30, 0x0176
    3a86:	f0 91 77 01 	lds	r31, 0x0177
    3a8a:	09 95       	icall
		TCNT2 = 256-(256*PRE_LOAD_TIMER2);                         //to begin from specific value
    3a8c:	04 e4       	ldi	r16, 0x44	; 68
    3a8e:	10 e0       	ldi	r17, 0x00	; 0
    3a90:	80 91 a6 01 	lds	r24, 0x01A6
    3a94:	90 91 a7 01 	lds	r25, 0x01A7
    3a98:	a0 91 a8 01 	lds	r26, 0x01A8
    3a9c:	b0 91 a9 01 	lds	r27, 0x01A9
    3aa0:	bc 01       	movw	r22, r24
    3aa2:	cd 01       	movw	r24, r26
    3aa4:	20 e0       	ldi	r18, 0x00	; 0
    3aa6:	30 e0       	ldi	r19, 0x00	; 0
    3aa8:	40 e8       	ldi	r20, 0x80	; 128
    3aaa:	53 ec       	ldi	r21, 0xC3	; 195
    3aac:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    3ab0:	dc 01       	movw	r26, r24
    3ab2:	cb 01       	movw	r24, r22
    3ab4:	bc 01       	movw	r22, r24
    3ab6:	cd 01       	movw	r24, r26
    3ab8:	20 e0       	ldi	r18, 0x00	; 0
    3aba:	30 e0       	ldi	r19, 0x00	; 0
    3abc:	40 e8       	ldi	r20, 0x80	; 128
    3abe:	53 e4       	ldi	r21, 0x43	; 67
    3ac0:	0e 94 4d 03 	call	0x69a	; 0x69a <__addsf3>
    3ac4:	dc 01       	movw	r26, r24
    3ac6:	cb 01       	movw	r24, r22
    3ac8:	bc 01       	movw	r22, r24
    3aca:	cd 01       	movw	r24, r26
    3acc:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3ad0:	dc 01       	movw	r26, r24
    3ad2:	cb 01       	movw	r24, r22
    3ad4:	f8 01       	movw	r30, r16
    3ad6:	80 83       	st	Z, r24
		tick = 0 ;                                          //to start count from beginning again
    3ad8:	10 92 79 01 	sts	0x0179, r1
    3adc:	10 92 78 01 	sts	0x0178, r1
	}//end if
}//end ISR FUNC
    3ae0:	cf 91       	pop	r28
    3ae2:	df 91       	pop	r29
    3ae4:	ff 91       	pop	r31
    3ae6:	ef 91       	pop	r30
    3ae8:	bf 91       	pop	r27
    3aea:	af 91       	pop	r26
    3aec:	9f 91       	pop	r25
    3aee:	8f 91       	pop	r24
    3af0:	7f 91       	pop	r23
    3af2:	6f 91       	pop	r22
    3af4:	5f 91       	pop	r21
    3af6:	4f 91       	pop	r20
    3af8:	3f 91       	pop	r19
    3afa:	2f 91       	pop	r18
    3afc:	1f 91       	pop	r17
    3afe:	0f 91       	pop	r16
    3b00:	0f 90       	pop	r0
    3b02:	0f be       	out	0x3f, r0	; 63
    3b04:	0f 90       	pop	r0
    3b06:	1f 90       	pop	r1
    3b08:	18 95       	reti

00003b0a <__vector_9>:

/********************************************************************************/

void __vector_9(void){
    3b0a:	1f 92       	push	r1
    3b0c:	0f 92       	push	r0
    3b0e:	0f b6       	in	r0, 0x3f	; 63
    3b10:	0f 92       	push	r0
    3b12:	11 24       	eor	r1, r1
    3b14:	df 93       	push	r29
    3b16:	cf 93       	push	r28
    3b18:	cd b7       	in	r28, 0x3d	; 61
    3b1a:	de b7       	in	r29, 0x3e	; 62
/*****************************************/
}//end ISR FUNC
    3b1c:	cf 91       	pop	r28
    3b1e:	df 91       	pop	r29
    3b20:	0f 90       	pop	r0
    3b22:	0f be       	out	0x3f, r0	; 63
    3b24:	0f 90       	pop	r0
    3b26:	1f 90       	pop	r1
    3b28:	18 95       	reti

00003b2a <__vector_6>:

void __vector_6(void){
    3b2a:	1f 92       	push	r1
    3b2c:	0f 92       	push	r0
    3b2e:	0f b6       	in	r0, 0x3f	; 63
    3b30:	0f 92       	push	r0
    3b32:	11 24       	eor	r1, r1
    3b34:	2f 93       	push	r18
    3b36:	3f 93       	push	r19
    3b38:	4f 93       	push	r20
    3b3a:	5f 93       	push	r21
    3b3c:	6f 93       	push	r22
    3b3e:	7f 93       	push	r23
    3b40:	8f 93       	push	r24
    3b42:	9f 93       	push	r25
    3b44:	af 93       	push	r26
    3b46:	bf 93       	push	r27
    3b48:	ef 93       	push	r30
    3b4a:	ff 93       	push	r31
    3b4c:	df 93       	push	r29
    3b4e:	cf 93       	push	r28
    3b50:	cd b7       	in	r28, 0x3d	; 61
    3b52:	de b7       	in	r29, 0x3e	; 62
	if (Timer1_IcuCallBack != 0 )
    3b54:	80 91 7a 01 	lds	r24, 0x017A
    3b58:	90 91 7b 01 	lds	r25, 0x017B
    3b5c:	00 97       	sbiw	r24, 0x00	; 0
    3b5e:	29 f0       	breq	.+10     	; 0x3b6a <__vector_6+0x40>
	{
		Timer1_IcuCallBack();
    3b60:	e0 91 7a 01 	lds	r30, 0x017A
    3b64:	f0 91 7b 01 	lds	r31, 0x017B
    3b68:	09 95       	icall
	}
}
    3b6a:	cf 91       	pop	r28
    3b6c:	df 91       	pop	r29
    3b6e:	ff 91       	pop	r31
    3b70:	ef 91       	pop	r30
    3b72:	bf 91       	pop	r27
    3b74:	af 91       	pop	r26
    3b76:	9f 91       	pop	r25
    3b78:	8f 91       	pop	r24
    3b7a:	7f 91       	pop	r23
    3b7c:	6f 91       	pop	r22
    3b7e:	5f 91       	pop	r21
    3b80:	4f 91       	pop	r20
    3b82:	3f 91       	pop	r19
    3b84:	2f 91       	pop	r18
    3b86:	0f 90       	pop	r0
    3b88:	0f be       	out	0x3f, r0	; 63
    3b8a:	0f 90       	pop	r0
    3b8c:	1f 90       	pop	r1
    3b8e:	18 95       	reti

00003b90 <UART_SetCallBack>:
/* Own Driver Files*/
#include "DIO_interface.h"

static void (*UART_Ptr)(void) = NULL ;

void UART_SetCallBack(  void (*ptr)(void) ){
    3b90:	df 93       	push	r29
    3b92:	cf 93       	push	r28
    3b94:	00 d0       	rcall	.+0      	; 0x3b96 <UART_SetCallBack+0x6>
    3b96:	cd b7       	in	r28, 0x3d	; 61
    3b98:	de b7       	in	r29, 0x3e	; 62
    3b9a:	9a 83       	std	Y+2, r25	; 0x02
    3b9c:	89 83       	std	Y+1, r24	; 0x01
	UART_Ptr = ptr ;
    3b9e:	89 81       	ldd	r24, Y+1	; 0x01
    3ba0:	9a 81       	ldd	r25, Y+2	; 0x02
    3ba2:	90 93 ab 01 	sts	0x01AB, r25
    3ba6:	80 93 aa 01 	sts	0x01AA, r24
}
    3baa:	0f 90       	pop	r0
    3bac:	0f 90       	pop	r0
    3bae:	cf 91       	pop	r28
    3bb0:	df 91       	pop	r29
    3bb2:	08 95       	ret

00003bb4 <UART_VidInit>:

void UART_VidInit (){
    3bb4:	df 93       	push	r29
    3bb6:	cf 93       	push	r28
    3bb8:	0f 92       	push	r0
    3bba:	cd b7       	in	r28, 0x3d	; 61
    3bbc:	de b7       	in	r29, 0x3e	; 62
	/* to define pins of TX RX */
	DIO_VidSetPinDirection(3,0,0);
    3bbe:	83 e0       	ldi	r24, 0x03	; 3
    3bc0:	60 e0       	ldi	r22, 0x00	; 0
    3bc2:	40 e0       	ldi	r20, 0x00	; 0
    3bc4:	0e 94 4f 09 	call	0x129e	; 0x129e <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(3,1,1);
    3bc8:	83 e0       	ldi	r24, 0x03	; 3
    3bca:	61 e0       	ldi	r22, 0x01	; 1
    3bcc:	41 e0       	ldi	r20, 0x01	; 1
    3bce:	0e 94 4f 09 	call	0x129e	; 0x129e <DIO_VidSetPinDirection>

	SET_BIT(UCSRB,RXEN);
    3bd2:	aa e2       	ldi	r26, 0x2A	; 42
    3bd4:	b0 e0       	ldi	r27, 0x00	; 0
    3bd6:	ea e2       	ldi	r30, 0x2A	; 42
    3bd8:	f0 e0       	ldi	r31, 0x00	; 0
    3bda:	80 81       	ld	r24, Z
    3bdc:	80 61       	ori	r24, 0x10	; 16
    3bde:	8c 93       	st	X, r24
	SET_BIT(UCSRB,TXEN);
    3be0:	aa e2       	ldi	r26, 0x2A	; 42
    3be2:	b0 e0       	ldi	r27, 0x00	; 0
    3be4:	ea e2       	ldi	r30, 0x2A	; 42
    3be6:	f0 e0       	ldi	r31, 0x00	; 0
    3be8:	80 81       	ld	r24, Z
    3bea:	88 60       	ori	r24, 0x08	; 8
    3bec:	8c 93       	st	X, r24
	CLR_BIT(UCSRB,UCSZ2);
    3bee:	aa e2       	ldi	r26, 0x2A	; 42
    3bf0:	b0 e0       	ldi	r27, 0x00	; 0
    3bf2:	ea e2       	ldi	r30, 0x2A	; 42
    3bf4:	f0 e0       	ldi	r31, 0x00	; 0
    3bf6:	80 81       	ld	r24, Z
    3bf8:	8b 7f       	andi	r24, 0xFB	; 251
    3bfa:	8c 93       	st	X, r24

	u8 UCSRC_help = 0b10000000 ;
    3bfc:	80 e8       	ldi	r24, 0x80	; 128
    3bfe:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRC_help,UMSEL);
    3c00:	89 81       	ldd	r24, Y+1	; 0x01
    3c02:	8f 7b       	andi	r24, 0xBF	; 191
    3c04:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRC_help,UPM1);
    3c06:	89 81       	ldd	r24, Y+1	; 0x01
    3c08:	8f 7d       	andi	r24, 0xDF	; 223
    3c0a:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRC_help,UPM0);
    3c0c:	89 81       	ldd	r24, Y+1	; 0x01
    3c0e:	8f 7e       	andi	r24, 0xEF	; 239
    3c10:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRC_help,USBS);
    3c12:	89 81       	ldd	r24, Y+1	; 0x01
    3c14:	87 7f       	andi	r24, 0xF7	; 247
    3c16:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(UCSRC_help,UCSZ1);
    3c18:	89 81       	ldd	r24, Y+1	; 0x01
    3c1a:	84 60       	ori	r24, 0x04	; 4
    3c1c:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(UCSRC_help,UCSZ0);
    3c1e:	89 81       	ldd	r24, Y+1	; 0x01
    3c20:	82 60       	ori	r24, 0x02	; 2
    3c22:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRC_help,UCPOL);
    3c24:	89 81       	ldd	r24, Y+1	; 0x01
    3c26:	8e 7f       	andi	r24, 0xFE	; 254
    3c28:	89 83       	std	Y+1, r24	; 0x01
	UCSRC = UCSRC_help ;
    3c2a:	e0 e4       	ldi	r30, 0x40	; 64
    3c2c:	f0 e0       	ldi	r31, 0x00	; 0
    3c2e:	89 81       	ldd	r24, Y+1	; 0x01
    3c30:	80 83       	st	Z, r24

	UBRRH = 0 ;
    3c32:	e0 e4       	ldi	r30, 0x40	; 64
    3c34:	f0 e0       	ldi	r31, 0x00	; 0
    3c36:	10 82       	st	Z, r1
	UBRRL = 51 ;
    3c38:	e9 e2       	ldi	r30, 0x29	; 41
    3c3a:	f0 e0       	ldi	r31, 0x00	; 0
    3c3c:	83 e3       	ldi	r24, 0x33	; 51
    3c3e:	80 83       	st	Z, r24
}
    3c40:	0f 90       	pop	r0
    3c42:	cf 91       	pop	r28
    3c44:	df 91       	pop	r29
    3c46:	08 95       	ret

00003c48 <UART_VidInitUsingInterrupt>:

void UART_VidInitUsingInterrupt () {
    3c48:	df 93       	push	r29
    3c4a:	cf 93       	push	r28
    3c4c:	0f 92       	push	r0
    3c4e:	cd b7       	in	r28, 0x3d	; 61
    3c50:	de b7       	in	r29, 0x3e	; 62
	/* to define pins of TX RX */
	DIO_VidSetPinDirection(3,0,0);
    3c52:	83 e0       	ldi	r24, 0x03	; 3
    3c54:	60 e0       	ldi	r22, 0x00	; 0
    3c56:	40 e0       	ldi	r20, 0x00	; 0
    3c58:	0e 94 4f 09 	call	0x129e	; 0x129e <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(3,1,1);
    3c5c:	83 e0       	ldi	r24, 0x03	; 3
    3c5e:	61 e0       	ldi	r22, 0x01	; 1
    3c60:	41 e0       	ldi	r20, 0x01	; 1
    3c62:	0e 94 4f 09 	call	0x129e	; 0x129e <DIO_VidSetPinDirection>

	SET_BIT(UCSRB,RXCIE);
    3c66:	aa e2       	ldi	r26, 0x2A	; 42
    3c68:	b0 e0       	ldi	r27, 0x00	; 0
    3c6a:	ea e2       	ldi	r30, 0x2A	; 42
    3c6c:	f0 e0       	ldi	r31, 0x00	; 0
    3c6e:	80 81       	ld	r24, Z
    3c70:	80 68       	ori	r24, 0x80	; 128
    3c72:	8c 93       	st	X, r24
	SET_BIT(UCSRB,RXEN);
    3c74:	aa e2       	ldi	r26, 0x2A	; 42
    3c76:	b0 e0       	ldi	r27, 0x00	; 0
    3c78:	ea e2       	ldi	r30, 0x2A	; 42
    3c7a:	f0 e0       	ldi	r31, 0x00	; 0
    3c7c:	80 81       	ld	r24, Z
    3c7e:	80 61       	ori	r24, 0x10	; 16
    3c80:	8c 93       	st	X, r24
	SET_BIT(UCSRB,TXEN);
    3c82:	aa e2       	ldi	r26, 0x2A	; 42
    3c84:	b0 e0       	ldi	r27, 0x00	; 0
    3c86:	ea e2       	ldi	r30, 0x2A	; 42
    3c88:	f0 e0       	ldi	r31, 0x00	; 0
    3c8a:	80 81       	ld	r24, Z
    3c8c:	88 60       	ori	r24, 0x08	; 8
    3c8e:	8c 93       	st	X, r24
	CLR_BIT(UCSRB,UCSZ2);
    3c90:	aa e2       	ldi	r26, 0x2A	; 42
    3c92:	b0 e0       	ldi	r27, 0x00	; 0
    3c94:	ea e2       	ldi	r30, 0x2A	; 42
    3c96:	f0 e0       	ldi	r31, 0x00	; 0
    3c98:	80 81       	ld	r24, Z
    3c9a:	8b 7f       	andi	r24, 0xFB	; 251
    3c9c:	8c 93       	st	X, r24

	u8 UCSRC_help = 0b10000000 ;
    3c9e:	80 e8       	ldi	r24, 0x80	; 128
    3ca0:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRC_help,UMSEL);
    3ca2:	89 81       	ldd	r24, Y+1	; 0x01
    3ca4:	8f 7b       	andi	r24, 0xBF	; 191
    3ca6:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRC_help,UPM1);
    3ca8:	89 81       	ldd	r24, Y+1	; 0x01
    3caa:	8f 7d       	andi	r24, 0xDF	; 223
    3cac:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRC_help,UPM0);
    3cae:	89 81       	ldd	r24, Y+1	; 0x01
    3cb0:	8f 7e       	andi	r24, 0xEF	; 239
    3cb2:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRC_help,USBS);
    3cb4:	89 81       	ldd	r24, Y+1	; 0x01
    3cb6:	87 7f       	andi	r24, 0xF7	; 247
    3cb8:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(UCSRC_help,UCSZ1);
    3cba:	89 81       	ldd	r24, Y+1	; 0x01
    3cbc:	84 60       	ori	r24, 0x04	; 4
    3cbe:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(UCSRC_help,UCSZ0);
    3cc0:	89 81       	ldd	r24, Y+1	; 0x01
    3cc2:	82 60       	ori	r24, 0x02	; 2
    3cc4:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRC_help,UCPOL);
    3cc6:	89 81       	ldd	r24, Y+1	; 0x01
    3cc8:	8e 7f       	andi	r24, 0xFE	; 254
    3cca:	89 83       	std	Y+1, r24	; 0x01
	UCSRC = UCSRC_help ;
    3ccc:	e0 e4       	ldi	r30, 0x40	; 64
    3cce:	f0 e0       	ldi	r31, 0x00	; 0
    3cd0:	89 81       	ldd	r24, Y+1	; 0x01
    3cd2:	80 83       	st	Z, r24

	UBRRH = 0 ;
    3cd4:	e0 e4       	ldi	r30, 0x40	; 64
    3cd6:	f0 e0       	ldi	r31, 0x00	; 0
    3cd8:	10 82       	st	Z, r1
	UBRRL = 51 ;
    3cda:	e9 e2       	ldi	r30, 0x29	; 41
    3cdc:	f0 e0       	ldi	r31, 0x00	; 0
    3cde:	83 e3       	ldi	r24, 0x33	; 51
    3ce0:	80 83       	st	Z, r24
}
    3ce2:	0f 90       	pop	r0
    3ce4:	cf 91       	pop	r28
    3ce6:	df 91       	pop	r29
    3ce8:	08 95       	ret

00003cea <UART_VidSendData>:
void UART_VidSendData(u8 Copy_U8Data){
    3cea:	df 93       	push	r29
    3cec:	cf 93       	push	r28
    3cee:	0f 92       	push	r0
    3cf0:	cd b7       	in	r28, 0x3d	; 61
    3cf2:	de b7       	in	r29, 0x3e	; 62
    3cf4:	89 83       	std	Y+1, r24	; 0x01
	while ( !GET_BIT(UCSRA,UDRE) );
    3cf6:	eb e2       	ldi	r30, 0x2B	; 43
    3cf8:	f0 e0       	ldi	r31, 0x00	; 0
    3cfa:	80 81       	ld	r24, Z
    3cfc:	82 95       	swap	r24
    3cfe:	86 95       	lsr	r24
    3d00:	87 70       	andi	r24, 0x07	; 7
    3d02:	88 2f       	mov	r24, r24
    3d04:	90 e0       	ldi	r25, 0x00	; 0
    3d06:	81 70       	andi	r24, 0x01	; 1
    3d08:	90 70       	andi	r25, 0x00	; 0
    3d0a:	00 97       	sbiw	r24, 0x00	; 0
    3d0c:	a1 f3       	breq	.-24     	; 0x3cf6 <UART_VidSendData+0xc>
	UDR = Copy_U8Data ;
    3d0e:	ec e2       	ldi	r30, 0x2C	; 44
    3d10:	f0 e0       	ldi	r31, 0x00	; 0
    3d12:	89 81       	ldd	r24, Y+1	; 0x01
    3d14:	80 83       	st	Z, r24
}
    3d16:	0f 90       	pop	r0
    3d18:	cf 91       	pop	r28
    3d1a:	df 91       	pop	r29
    3d1c:	08 95       	ret

00003d1e <UART_VidRecieveDataForInterruptPurpose>:

u8 UART_VidRecieveDataForInterruptPurpose(){
    3d1e:	df 93       	push	r29
    3d20:	cf 93       	push	r28
    3d22:	cd b7       	in	r28, 0x3d	; 61
    3d24:	de b7       	in	r29, 0x3e	; 62
	return UDR ;
    3d26:	ec e2       	ldi	r30, 0x2C	; 44
    3d28:	f0 e0       	ldi	r31, 0x00	; 0
    3d2a:	80 81       	ld	r24, Z
}
    3d2c:	cf 91       	pop	r28
    3d2e:	df 91       	pop	r29
    3d30:	08 95       	ret

00003d32 <UART_VidRecieveData>:

u8 UART_VidRecieveData(){
    3d32:	df 93       	push	r29
    3d34:	cf 93       	push	r28
    3d36:	cd b7       	in	r28, 0x3d	; 61
    3d38:	de b7       	in	r29, 0x3e	; 62
	while ( !GET_BIT(UCSRA,RXC) );
    3d3a:	eb e2       	ldi	r30, 0x2B	; 43
    3d3c:	f0 e0       	ldi	r31, 0x00	; 0
    3d3e:	80 81       	ld	r24, Z
    3d40:	88 23       	and	r24, r24
    3d42:	dc f7       	brge	.-10     	; 0x3d3a <UART_VidRecieveData+0x8>
	return UDR ;
    3d44:	ec e2       	ldi	r30, 0x2C	; 44
    3d46:	f0 e0       	ldi	r31, 0x00	; 0
    3d48:	80 81       	ld	r24, Z
}
    3d4a:	cf 91       	pop	r28
    3d4c:	df 91       	pop	r29
    3d4e:	08 95       	ret

00003d50 <UART_VidSendString>:

void UART_VidSendString (u8 Copy_U8String[]){
    3d50:	df 93       	push	r29
    3d52:	cf 93       	push	r28
    3d54:	00 d0       	rcall	.+0      	; 0x3d56 <UART_VidSendString+0x6>
    3d56:	0f 92       	push	r0
    3d58:	cd b7       	in	r28, 0x3d	; 61
    3d5a:	de b7       	in	r29, 0x3e	; 62
    3d5c:	9b 83       	std	Y+3, r25	; 0x03
    3d5e:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0 ;
    3d60:	19 82       	std	Y+1, r1	; 0x01
    3d62:	0e c0       	rjmp	.+28     	; 0x3d80 <UART_VidSendString+0x30>
	while (Copy_U8String[i] != '\0'){
		UART_VidSendData(Copy_U8String[i]);
    3d64:	89 81       	ldd	r24, Y+1	; 0x01
    3d66:	28 2f       	mov	r18, r24
    3d68:	30 e0       	ldi	r19, 0x00	; 0
    3d6a:	8a 81       	ldd	r24, Y+2	; 0x02
    3d6c:	9b 81       	ldd	r25, Y+3	; 0x03
    3d6e:	fc 01       	movw	r30, r24
    3d70:	e2 0f       	add	r30, r18
    3d72:	f3 1f       	adc	r31, r19
    3d74:	80 81       	ld	r24, Z
    3d76:	0e 94 75 1e 	call	0x3cea	; 0x3cea <UART_VidSendData>
		i++ ;
    3d7a:	89 81       	ldd	r24, Y+1	; 0x01
    3d7c:	8f 5f       	subi	r24, 0xFF	; 255
    3d7e:	89 83       	std	Y+1, r24	; 0x01
	return UDR ;
}

void UART_VidSendString (u8 Copy_U8String[]){
	u8 i = 0 ;
	while (Copy_U8String[i] != '\0'){
    3d80:	89 81       	ldd	r24, Y+1	; 0x01
    3d82:	28 2f       	mov	r18, r24
    3d84:	30 e0       	ldi	r19, 0x00	; 0
    3d86:	8a 81       	ldd	r24, Y+2	; 0x02
    3d88:	9b 81       	ldd	r25, Y+3	; 0x03
    3d8a:	fc 01       	movw	r30, r24
    3d8c:	e2 0f       	add	r30, r18
    3d8e:	f3 1f       	adc	r31, r19
    3d90:	80 81       	ld	r24, Z
    3d92:	88 23       	and	r24, r24
    3d94:	39 f7       	brne	.-50     	; 0x3d64 <UART_VidSendString+0x14>
		UART_VidSendData(Copy_U8String[i]);
		i++ ;
	}
}
    3d96:	0f 90       	pop	r0
    3d98:	0f 90       	pop	r0
    3d9a:	0f 90       	pop	r0
    3d9c:	cf 91       	pop	r28
    3d9e:	df 91       	pop	r29
    3da0:	08 95       	ret

00003da2 <__vector_13>:

void __vector_13(void){
    3da2:	1f 92       	push	r1
    3da4:	0f 92       	push	r0
    3da6:	0f b6       	in	r0, 0x3f	; 63
    3da8:	0f 92       	push	r0
    3daa:	11 24       	eor	r1, r1
    3dac:	2f 93       	push	r18
    3dae:	3f 93       	push	r19
    3db0:	4f 93       	push	r20
    3db2:	5f 93       	push	r21
    3db4:	6f 93       	push	r22
    3db6:	7f 93       	push	r23
    3db8:	8f 93       	push	r24
    3dba:	9f 93       	push	r25
    3dbc:	af 93       	push	r26
    3dbe:	bf 93       	push	r27
    3dc0:	ef 93       	push	r30
    3dc2:	ff 93       	push	r31
    3dc4:	df 93       	push	r29
    3dc6:	cf 93       	push	r28
    3dc8:	cd b7       	in	r28, 0x3d	; 61
    3dca:	de b7       	in	r29, 0x3e	; 62
	UART_Ptr();
    3dcc:	e0 91 aa 01 	lds	r30, 0x01AA
    3dd0:	f0 91 ab 01 	lds	r31, 0x01AB
    3dd4:	09 95       	icall
}//end ISR FUNC
    3dd6:	cf 91       	pop	r28
    3dd8:	df 91       	pop	r29
    3dda:	ff 91       	pop	r31
    3ddc:	ef 91       	pop	r30
    3dde:	bf 91       	pop	r27
    3de0:	af 91       	pop	r26
    3de2:	9f 91       	pop	r25
    3de4:	8f 91       	pop	r24
    3de6:	7f 91       	pop	r23
    3de8:	6f 91       	pop	r22
    3dea:	5f 91       	pop	r21
    3dec:	4f 91       	pop	r20
    3dee:	3f 91       	pop	r19
    3df0:	2f 91       	pop	r18
    3df2:	0f 90       	pop	r0
    3df4:	0f be       	out	0x3f, r0	; 63
    3df6:	0f 90       	pop	r0
    3df8:	1f 90       	pop	r1
    3dfa:	18 95       	reti

00003dfc <BluetoothInit>:

#include "../MCAL_DRIVERS/UART_Interface.h"
#include "../Serivecs_driver/STD_TYPES.h"
#include "../Serivecs_driver/BIT_MATH.h"

void BluetoothInit(){
    3dfc:	df 93       	push	r29
    3dfe:	cf 93       	push	r28
    3e00:	cd b7       	in	r28, 0x3d	; 61
    3e02:	de b7       	in	r29, 0x3e	; 62
	UART_VidInit () ;
    3e04:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <UART_VidInit>
}
    3e08:	cf 91       	pop	r28
    3e0a:	df 91       	pop	r29
    3e0c:	08 95       	ret

00003e0e <Bluetooth_U32Getnumber>:

u32 Bluetooth_U32Getnumber(){
    3e0e:	df 93       	push	r29
    3e10:	cf 93       	push	r28
    3e12:	cd b7       	in	r28, 0x3d	; 61
    3e14:	de b7       	in	r29, 0x3e	; 62
	return UART_VidRecieveData();
    3e16:	0e 94 99 1e 	call	0x3d32	; 0x3d32 <UART_VidRecieveData>
    3e1a:	88 2f       	mov	r24, r24
    3e1c:	90 e0       	ldi	r25, 0x00	; 0
}
    3e1e:	cf 91       	pop	r28
    3e20:	df 91       	pop	r29
    3e22:	08 95       	ret

00003e24 <BluetoothInitInterrupt>:

/**********************/
void BluetoothInitInterrupt(){
    3e24:	df 93       	push	r29
    3e26:	cf 93       	push	r28
    3e28:	cd b7       	in	r28, 0x3d	; 61
    3e2a:	de b7       	in	r29, 0x3e	; 62
	UART_VidInitUsingInterrupt () ;
    3e2c:	0e 94 24 1e 	call	0x3c48	; 0x3c48 <UART_VidInitUsingInterrupt>
}
    3e30:	cf 91       	pop	r28
    3e32:	df 91       	pop	r29
    3e34:	08 95       	ret

00003e36 <Bluetooth_U32GetnumberInterrupt>:
u32 Bluetooth_U32GetnumberInterrupt(){
    3e36:	df 93       	push	r29
    3e38:	cf 93       	push	r28
    3e3a:	cd b7       	in	r28, 0x3d	; 61
    3e3c:	de b7       	in	r29, 0x3e	; 62
	return UART_VidRecieveDataForInterruptPurpose();
    3e3e:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <UART_VidRecieveDataForInterruptPurpose>
    3e42:	88 2f       	mov	r24, r24
    3e44:	90 e0       	ldi	r25, 0x00	; 0
}
    3e46:	cf 91       	pop	r28
    3e48:	df 91       	pop	r29
    3e4a:	08 95       	ret

00003e4c <Bluetooth_VidSendData>:
/************************/

void Bluetooth_VidSendData(u8 Copy_U8Data){
    3e4c:	df 93       	push	r29
    3e4e:	cf 93       	push	r28
    3e50:	0f 92       	push	r0
    3e52:	cd b7       	in	r28, 0x3d	; 61
    3e54:	de b7       	in	r29, 0x3e	; 62
    3e56:	89 83       	std	Y+1, r24	; 0x01
	 UART_VidSendData(Copy_U8Data);
    3e58:	89 81       	ldd	r24, Y+1	; 0x01
    3e5a:	0e 94 75 1e 	call	0x3cea	; 0x3cea <UART_VidSendData>
}
    3e5e:	0f 90       	pop	r0
    3e60:	cf 91       	pop	r28
    3e62:	df 91       	pop	r29
    3e64:	08 95       	ret

00003e66 <BluetoothVidSendString>:
void BluetoothVidSendString (u8 Copy_U8String[]){
    3e66:	df 93       	push	r29
    3e68:	cf 93       	push	r28
    3e6a:	00 d0       	rcall	.+0      	; 0x3e6c <BluetoothVidSendString+0x6>
    3e6c:	cd b7       	in	r28, 0x3d	; 61
    3e6e:	de b7       	in	r29, 0x3e	; 62
    3e70:	9a 83       	std	Y+2, r25	; 0x02
    3e72:	89 83       	std	Y+1, r24	; 0x01
	UART_VidSendString(Copy_U8String);
    3e74:	89 81       	ldd	r24, Y+1	; 0x01
    3e76:	9a 81       	ldd	r25, Y+2	; 0x02
    3e78:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <UART_VidSendString>
}
    3e7c:	0f 90       	pop	r0
    3e7e:	0f 90       	pop	r0
    3e80:	cf 91       	pop	r28
    3e82:	df 91       	pop	r29
    3e84:	08 95       	ret

00003e86 <Bluetooth_SetCallBack>:

void Bluetooth_SetCallBack(  void (*ptr)(void) ){
    3e86:	df 93       	push	r29
    3e88:	cf 93       	push	r28
    3e8a:	00 d0       	rcall	.+0      	; 0x3e8c <Bluetooth_SetCallBack+0x6>
    3e8c:	cd b7       	in	r28, 0x3d	; 61
    3e8e:	de b7       	in	r29, 0x3e	; 62
    3e90:	9a 83       	std	Y+2, r25	; 0x02
    3e92:	89 83       	std	Y+1, r24	; 0x01
	UART_SetCallBack(ptr);
    3e94:	89 81       	ldd	r24, Y+1	; 0x01
    3e96:	9a 81       	ldd	r25, Y+2	; 0x02
    3e98:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <UART_SetCallBack>
}
    3e9c:	0f 90       	pop	r0
    3e9e:	0f 90       	pop	r0
    3ea0:	cf 91       	pop	r28
    3ea2:	df 91       	pop	r29
    3ea4:	08 95       	ret

00003ea6 <DcMotor_VidInit>:
#include "../MCAL_DRIVERS/DIO_interface.h"
#include "../MCAL_DRIVERS/TIMER_Interface.h"
#include "DCMOTOR_Private.h"
#include "DCMOTOR_CFG.h"

void DcMotor_VidInit(void){
    3ea6:	df 93       	push	r29
    3ea8:	cf 93       	push	r28
    3eaa:	cd b7       	in	r28, 0x3d	; 61
    3eac:	de b7       	in	r29, 0x3e	; 62
	/*set the direction of the two input pins of the dc motor to be output pins */
	DIO_VidSetPinDirection(DC_MOTOR_PORT , DC_MOTOR_PIN1 , HIGH);
    3eae:	80 e0       	ldi	r24, 0x00	; 0
    3eb0:	60 e0       	ldi	r22, 0x00	; 0
    3eb2:	41 e0       	ldi	r20, 0x01	; 1
    3eb4:	0e 94 4f 09 	call	0x129e	; 0x129e <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(DC_MOTOR_PORT , DC_MOTOR_PIN2 , HIGH);
    3eb8:	80 e0       	ldi	r24, 0x00	; 0
    3eba:	61 e0       	ldi	r22, 0x01	; 1
    3ebc:	41 e0       	ldi	r20, 0x01	; 1
    3ebe:	0e 94 4f 09 	call	0x129e	; 0x129e <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(DC_MOTOR_PORT , DC_MOTOR_PIN3 , HIGH);
    3ec2:	80 e0       	ldi	r24, 0x00	; 0
    3ec4:	62 e0       	ldi	r22, 0x02	; 2
    3ec6:	41 e0       	ldi	r20, 0x01	; 1
    3ec8:	0e 94 4f 09 	call	0x129e	; 0x129e <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(DC_MOTOR_PORT , DC_MOTOR_PIN4 , HIGH);
    3ecc:	80 e0       	ldi	r24, 0x00	; 0
    3ece:	63 e0       	ldi	r22, 0x03	; 3
    3ed0:	41 e0       	ldi	r20, 0x01	; 1
    3ed2:	0e 94 4f 09 	call	0x129e	; 0x129e <DIO_VidSetPinDirection>

	/*initialize the dc motor to be stop at the beginning*/
	DIO_VidSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN1 , LOW);
    3ed6:	80 e0       	ldi	r24, 0x00	; 0
    3ed8:	60 e0       	ldi	r22, 0x00	; 0
    3eda:	40 e0       	ldi	r20, 0x00	; 0
    3edc:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN2 , LOW);
    3ee0:	80 e0       	ldi	r24, 0x00	; 0
    3ee2:	61 e0       	ldi	r22, 0x01	; 1
    3ee4:	40 e0       	ldi	r20, 0x00	; 0
    3ee6:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN3 , LOW);
    3eea:	80 e0       	ldi	r24, 0x00	; 0
    3eec:	62 e0       	ldi	r22, 0x02	; 2
    3eee:	40 e0       	ldi	r20, 0x00	; 0
    3ef0:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN4 , LOW);
    3ef4:	80 e0       	ldi	r24, 0x00	; 0
    3ef6:	63 e0       	ldi	r22, 0x03	; 3
    3ef8:	40 e0       	ldi	r20, 0x00	; 0
    3efa:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_VidSetPinValue>

	/**/
	TIMER2_VidInitialize();
    3efe:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <TIMER2_VidInitialize>
}
    3f02:	cf 91       	pop	r28
    3f04:	df 91       	pop	r29
    3f06:	08 95       	ret

00003f08 <DcMotor_VidRotate_Wheels1>:

void DcMotor_VidRotate_Wheels1(u8 state){
    3f08:	df 93       	push	r29
    3f0a:	cf 93       	push	r28
    3f0c:	00 d0       	rcall	.+0      	; 0x3f0e <DcMotor_VidRotate_Wheels1+0x6>
    3f0e:	0f 92       	push	r0
    3f10:	cd b7       	in	r28, 0x3d	; 61
    3f12:	de b7       	in	r29, 0x3e	; 62
    3f14:	89 83       	std	Y+1, r24	; 0x01
	switch(state){
    3f16:	89 81       	ldd	r24, Y+1	; 0x01
    3f18:	28 2f       	mov	r18, r24
    3f1a:	30 e0       	ldi	r19, 0x00	; 0
    3f1c:	3b 83       	std	Y+3, r19	; 0x03
    3f1e:	2a 83       	std	Y+2, r18	; 0x02
    3f20:	8a 81       	ldd	r24, Y+2	; 0x02
    3f22:	9b 81       	ldd	r25, Y+3	; 0x03
    3f24:	81 30       	cpi	r24, 0x01	; 1
    3f26:	91 05       	cpc	r25, r1
    3f28:	a1 f0       	breq	.+40     	; 0x3f52 <DcMotor_VidRotate_Wheels1+0x4a>
    3f2a:	2a 81       	ldd	r18, Y+2	; 0x02
    3f2c:	3b 81       	ldd	r19, Y+3	; 0x03
    3f2e:	22 30       	cpi	r18, 0x02	; 2
    3f30:	31 05       	cpc	r19, r1
    3f32:	d1 f0       	breq	.+52     	; 0x3f68 <DcMotor_VidRotate_Wheels1+0x60>
    3f34:	8a 81       	ldd	r24, Y+2	; 0x02
    3f36:	9b 81       	ldd	r25, Y+3	; 0x03
    3f38:	00 97       	sbiw	r24, 0x00	; 0
    3f3a:	01 f5       	brne	.+64     	; 0x3f7c <DcMotor_VidRotate_Wheels1+0x74>
	case STOP:
		/*make the dc motor stop*/
		DIO_VidSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN1 , LOW);
    3f3c:	80 e0       	ldi	r24, 0x00	; 0
    3f3e:	60 e0       	ldi	r22, 0x00	; 0
    3f40:	40 e0       	ldi	r20, 0x00	; 0
    3f42:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN2 , LOW);
    3f46:	80 e0       	ldi	r24, 0x00	; 0
    3f48:	61 e0       	ldi	r22, 0x01	; 1
    3f4a:	40 e0       	ldi	r20, 0x00	; 0
    3f4c:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_VidSetPinValue>
    3f50:	15 c0       	rjmp	.+42     	; 0x3f7c <DcMotor_VidRotate_Wheels1+0x74>
		break;
	case CLK_WISE:
		/*make the dc motor start in CLOCK_WISE direction*/
		DIO_VidSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN1 , LOW);
    3f52:	80 e0       	ldi	r24, 0x00	; 0
    3f54:	60 e0       	ldi	r22, 0x00	; 0
    3f56:	40 e0       	ldi	r20, 0x00	; 0
    3f58:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN2 , HIGH);
    3f5c:	80 e0       	ldi	r24, 0x00	; 0
    3f5e:	61 e0       	ldi	r22, 0x01	; 1
    3f60:	41 e0       	ldi	r20, 0x01	; 1
    3f62:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_VidSetPinValue>
    3f66:	0a c0       	rjmp	.+20     	; 0x3f7c <DcMotor_VidRotate_Wheels1+0x74>
		break;
	case ANTI_CLK_WISE:
		/*make the dc motor start in ANTI_CLOCK_WISE  direction*/
		DIO_VidSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN1 , HIGH);
    3f68:	80 e0       	ldi	r24, 0x00	; 0
    3f6a:	60 e0       	ldi	r22, 0x00	; 0
    3f6c:	41 e0       	ldi	r20, 0x01	; 1
    3f6e:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN2 , LOW);
    3f72:	80 e0       	ldi	r24, 0x00	; 0
    3f74:	61 e0       	ldi	r22, 0x01	; 1
    3f76:	40 e0       	ldi	r20, 0x00	; 0
    3f78:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_VidSetPinValue>
		break;
	}
}
    3f7c:	0f 90       	pop	r0
    3f7e:	0f 90       	pop	r0
    3f80:	0f 90       	pop	r0
    3f82:	cf 91       	pop	r28
    3f84:	df 91       	pop	r29
    3f86:	08 95       	ret

00003f88 <DcMotor_VidRotate_Wheels2>:

void DcMotor_VidRotate_Wheels2(u8 state){
    3f88:	df 93       	push	r29
    3f8a:	cf 93       	push	r28
    3f8c:	00 d0       	rcall	.+0      	; 0x3f8e <DcMotor_VidRotate_Wheels2+0x6>
    3f8e:	0f 92       	push	r0
    3f90:	cd b7       	in	r28, 0x3d	; 61
    3f92:	de b7       	in	r29, 0x3e	; 62
    3f94:	89 83       	std	Y+1, r24	; 0x01
	switch(state){
    3f96:	89 81       	ldd	r24, Y+1	; 0x01
    3f98:	28 2f       	mov	r18, r24
    3f9a:	30 e0       	ldi	r19, 0x00	; 0
    3f9c:	3b 83       	std	Y+3, r19	; 0x03
    3f9e:	2a 83       	std	Y+2, r18	; 0x02
    3fa0:	8a 81       	ldd	r24, Y+2	; 0x02
    3fa2:	9b 81       	ldd	r25, Y+3	; 0x03
    3fa4:	81 30       	cpi	r24, 0x01	; 1
    3fa6:	91 05       	cpc	r25, r1
    3fa8:	a1 f0       	breq	.+40     	; 0x3fd2 <DcMotor_VidRotate_Wheels2+0x4a>
    3faa:	2a 81       	ldd	r18, Y+2	; 0x02
    3fac:	3b 81       	ldd	r19, Y+3	; 0x03
    3fae:	22 30       	cpi	r18, 0x02	; 2
    3fb0:	31 05       	cpc	r19, r1
    3fb2:	d1 f0       	breq	.+52     	; 0x3fe8 <DcMotor_VidRotate_Wheels2+0x60>
    3fb4:	8a 81       	ldd	r24, Y+2	; 0x02
    3fb6:	9b 81       	ldd	r25, Y+3	; 0x03
    3fb8:	00 97       	sbiw	r24, 0x00	; 0
    3fba:	01 f5       	brne	.+64     	; 0x3ffc <DcMotor_VidRotate_Wheels2+0x74>
	case STOP:
		/*make the dc motor stop*/
		DIO_VidSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN3 , LOW);
    3fbc:	80 e0       	ldi	r24, 0x00	; 0
    3fbe:	62 e0       	ldi	r22, 0x02	; 2
    3fc0:	40 e0       	ldi	r20, 0x00	; 0
    3fc2:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN4 , LOW);
    3fc6:	80 e0       	ldi	r24, 0x00	; 0
    3fc8:	63 e0       	ldi	r22, 0x03	; 3
    3fca:	40 e0       	ldi	r20, 0x00	; 0
    3fcc:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_VidSetPinValue>
    3fd0:	15 c0       	rjmp	.+42     	; 0x3ffc <DcMotor_VidRotate_Wheels2+0x74>
		break;
	case CLK_WISE:
		/*make the dc motor start in CLOCK_WISE direction*/
		DIO_VidSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN3 , LOW);
    3fd2:	80 e0       	ldi	r24, 0x00	; 0
    3fd4:	62 e0       	ldi	r22, 0x02	; 2
    3fd6:	40 e0       	ldi	r20, 0x00	; 0
    3fd8:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN4 , HIGH);
    3fdc:	80 e0       	ldi	r24, 0x00	; 0
    3fde:	63 e0       	ldi	r22, 0x03	; 3
    3fe0:	41 e0       	ldi	r20, 0x01	; 1
    3fe2:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_VidSetPinValue>
    3fe6:	0a c0       	rjmp	.+20     	; 0x3ffc <DcMotor_VidRotate_Wheels2+0x74>
		break;
	case ANTI_CLK_WISE:
		/*make the dc motor start in ANTI_CLOCK_WISE  direction*/
		DIO_VidSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN3 , HIGH);
    3fe8:	80 e0       	ldi	r24, 0x00	; 0
    3fea:	62 e0       	ldi	r22, 0x02	; 2
    3fec:	41 e0       	ldi	r20, 0x01	; 1
    3fee:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN4 , LOW);
    3ff2:	80 e0       	ldi	r24, 0x00	; 0
    3ff4:	63 e0       	ldi	r22, 0x03	; 3
    3ff6:	40 e0       	ldi	r20, 0x00	; 0
    3ff8:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_VidSetPinValue>
		break;
	}
}
    3ffc:	0f 90       	pop	r0
    3ffe:	0f 90       	pop	r0
    4000:	0f 90       	pop	r0
    4002:	cf 91       	pop	r28
    4004:	df 91       	pop	r29
    4006:	08 95       	ret

00004008 <IR_Init>:

/* Own Driver Files*/
#include "../MCAL_DRIVERS/DIO_interface.h"
#include "IR_Interface.h"

void IR_Init(){
    4008:	df 93       	push	r29
    400a:	cf 93       	push	r28
    400c:	cd b7       	in	r28, 0x3d	; 61
    400e:	de b7       	in	r29, 0x3e	; 62
	DIO_VidSetPinDirection(IR_PORT,IR_PIN_LEFT,LOW);
    4010:	81 e0       	ldi	r24, 0x01	; 1
    4012:	60 e0       	ldi	r22, 0x00	; 0
    4014:	40 e0       	ldi	r20, 0x00	; 0
    4016:	0e 94 4f 09 	call	0x129e	; 0x129e <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(IR_PORT,IR_PIN_RIGHT,LOW);
    401a:	81 e0       	ldi	r24, 0x01	; 1
    401c:	61 e0       	ldi	r22, 0x01	; 1
    401e:	40 e0       	ldi	r20, 0x00	; 0
    4020:	0e 94 4f 09 	call	0x129e	; 0x129e <DIO_VidSetPinDirection>
}
    4024:	cf 91       	pop	r28
    4026:	df 91       	pop	r29
    4028:	08 95       	ret

0000402a <SERVO_VidInitOCR1A>:
#include "Servo_Inteface.h"
#include "Servo_Private.h"


void SERVO_VidInitOCR1A(void)
{
    402a:	df 93       	push	r29
    402c:	cf 93       	push	r28
    402e:	cd b7       	in	r28, 0x3d	; 61
    4030:	de b7       	in	r29, 0x3e	; 62
	DIO_VidSetPinDirection(3,5,1);
    4032:	83 e0       	ldi	r24, 0x03	; 3
    4034:	65 e0       	ldi	r22, 0x05	; 5
    4036:	41 e0       	ldi	r20, 0x01	; 1
    4038:	0e 94 4f 09 	call	0x129e	; 0x129e <DIO_VidSetPinDirection>
	TIMER1_VidInitializeMode15(FAST_PWM_ICR1,CLEAR,Normal);
    403c:	8e e0       	ldi	r24, 0x0E	; 14
    403e:	62 e0       	ldi	r22, 0x02	; 2
    4040:	40 e0       	ldi	r20, 0x00	; 0
    4042:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <TIMER1_VidInitializeMode15>
}
    4046:	cf 91       	pop	r28
    4048:	df 91       	pop	r29
    404a:	08 95       	ret

0000404c <SERVO_VidInitOCR1B>:


void SERVO_VidInitOCR1B(void)
{
    404c:	df 93       	push	r29
    404e:	cf 93       	push	r28
    4050:	cd b7       	in	r28, 0x3d	; 61
    4052:	de b7       	in	r29, 0x3e	; 62
	DIO_VidSetPinDirection(3,4,1);
    4054:	83 e0       	ldi	r24, 0x03	; 3
    4056:	64 e0       	ldi	r22, 0x04	; 4
    4058:	41 e0       	ldi	r20, 0x01	; 1
    405a:	0e 94 4f 09 	call	0x129e	; 0x129e <DIO_VidSetPinDirection>
	TIMER1_VidInitializeMode15(FAST_PWM_OCR1A,Normal,CLEAR);
    405e:	8f e0       	ldi	r24, 0x0F	; 15
    4060:	60 e0       	ldi	r22, 0x00	; 0
    4062:	42 e0       	ldi	r20, 0x02	; 2
    4064:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <TIMER1_VidInitializeMode15>
}
    4068:	cf 91       	pop	r28
    406a:	df 91       	pop	r29
    406c:	08 95       	ret

0000406e <ServoSetAngleOCR1A>:

void ServoSetAngleOCR1A(u32 Angle)
{
    406e:	df 93       	push	r29
    4070:	cf 93       	push	r28
    4072:	00 d0       	rcall	.+0      	; 0x4074 <ServoSetAngleOCR1A+0x6>
    4074:	cd b7       	in	r28, 0x3d	; 61
    4076:	de b7       	in	r29, 0x3e	; 62
    4078:	9a 83       	std	Y+2, r25	; 0x02
    407a:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_VidSetICR1(Startup);
    407c:	8f e1       	ldi	r24, 0x1F	; 31
    407e:	9e e4       	ldi	r25, 0x4E	; 78
    4080:	0e 94 d7 16 	call	0x2dae	; 0x2dae <TIMER1_VidSetICR1>
	TIMER1_VidSetOCR1A(Angle);
    4084:	89 81       	ldd	r24, Y+1	; 0x01
    4086:	9a 81       	ldd	r25, Y+2	; 0x02
    4088:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <TIMER1_VidSetOCR1A>
}
    408c:	0f 90       	pop	r0
    408e:	0f 90       	pop	r0
    4090:	cf 91       	pop	r28
    4092:	df 91       	pop	r29
    4094:	08 95       	ret

00004096 <ServoSetAngleOCR1B>:



void ServoSetAngleOCR1B(u32 Angle)
{
    4096:	df 93       	push	r29
    4098:	cf 93       	push	r28
    409a:	00 d0       	rcall	.+0      	; 0x409c <ServoSetAngleOCR1B+0x6>
    409c:	cd b7       	in	r28, 0x3d	; 61
    409e:	de b7       	in	r29, 0x3e	; 62
    40a0:	9a 83       	std	Y+2, r25	; 0x02
    40a2:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_VidSetOCR1A(Startup);
    40a4:	8f e1       	ldi	r24, 0x1F	; 31
    40a6:	9e e4       	ldi	r25, 0x4E	; 78
    40a8:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <TIMER1_VidSetOCR1A>
	TIMER1_VidSetOCR1B(Angle);
    40ac:	89 81       	ldd	r24, Y+1	; 0x01
    40ae:	9a 81       	ldd	r25, Y+2	; 0x02
    40b0:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <TIMER1_VidSetOCR1B>
}
    40b4:	0f 90       	pop	r0
    40b6:	0f 90       	pop	r0
    40b8:	cf 91       	pop	r28
    40ba:	df 91       	pop	r29
    40bc:	08 95       	ret

000040be <SetAngleOfServo>:

void SetAngleOfServo(u16 InitialAngle , u16 LastAngle ) {
    40be:	df 93       	push	r29
    40c0:	cf 93       	push	r28
    40c2:	cd b7       	in	r28, 0x3d	; 61
    40c4:	de b7       	in	r29, 0x3e	; 62
    40c6:	a4 97       	sbiw	r28, 0x24	; 36
    40c8:	0f b6       	in	r0, 0x3f	; 63
    40ca:	f8 94       	cli
    40cc:	de bf       	out	0x3e, r29	; 62
    40ce:	0f be       	out	0x3f, r0	; 63
    40d0:	cd bf       	out	0x3d, r28	; 61
    40d2:	9a a3       	std	Y+34, r25	; 0x22
    40d4:	89 a3       	std	Y+33, r24	; 0x21
    40d6:	7c a3       	std	Y+36, r23	; 0x24
    40d8:	6b a3       	std	Y+35, r22	; 0x23

	/* min duty : 400
	   max duty : 2400
	 */

	if (InitialAngle <= LastAngle){
    40da:	29 a1       	ldd	r18, Y+33	; 0x21
    40dc:	3a a1       	ldd	r19, Y+34	; 0x22
    40de:	8b a1       	ldd	r24, Y+35	; 0x23
    40e0:	9c a1       	ldd	r25, Y+36	; 0x24
    40e2:	82 17       	cp	r24, r18
    40e4:	93 07       	cpc	r25, r19
    40e6:	08 f4       	brcc	.+2      	; 0x40ea <SetAngleOfServo+0x2c>
    40e8:	89 c0       	rjmp	.+274    	; 0x41fc <SetAngleOfServo+0x13e>

		for (u16 i = InitialAngle ; i < LastAngle ; i+=5 ){
    40ea:	89 a1       	ldd	r24, Y+33	; 0x21
    40ec:	9a a1       	ldd	r25, Y+34	; 0x22
    40ee:	98 a3       	std	Y+32, r25	; 0x20
    40f0:	8f 8f       	std	Y+31, r24	; 0x1f
    40f2:	7b c0       	rjmp	.+246    	; 0x41ea <SetAngleOfServo+0x12c>
			ServoSetAngleOCR1B(i);
    40f4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    40f6:	98 a1       	ldd	r25, Y+32	; 0x20
    40f8:	0e 94 4b 20 	call	0x4096	; 0x4096 <ServoSetAngleOCR1B>
    40fc:	80 e0       	ldi	r24, 0x00	; 0
    40fe:	90 e0       	ldi	r25, 0x00	; 0
    4100:	a0 e8       	ldi	r26, 0x80	; 128
    4102:	bf e3       	ldi	r27, 0x3F	; 63
    4104:	89 8f       	std	Y+25, r24	; 0x19
    4106:	9a 8f       	std	Y+26, r25	; 0x1a
    4108:	ab 8f       	std	Y+27, r26	; 0x1b
    410a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    410c:	69 8d       	ldd	r22, Y+25	; 0x19
    410e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4110:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4112:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4114:	20 e0       	ldi	r18, 0x00	; 0
    4116:	30 e0       	ldi	r19, 0x00	; 0
    4118:	4a ef       	ldi	r20, 0xFA	; 250
    411a:	54 e4       	ldi	r21, 0x44	; 68
    411c:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    4120:	dc 01       	movw	r26, r24
    4122:	cb 01       	movw	r24, r22
    4124:	8d 8b       	std	Y+21, r24	; 0x15
    4126:	9e 8b       	std	Y+22, r25	; 0x16
    4128:	af 8b       	std	Y+23, r26	; 0x17
    412a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    412c:	6d 89       	ldd	r22, Y+21	; 0x15
    412e:	7e 89       	ldd	r23, Y+22	; 0x16
    4130:	8f 89       	ldd	r24, Y+23	; 0x17
    4132:	98 8d       	ldd	r25, Y+24	; 0x18
    4134:	20 e0       	ldi	r18, 0x00	; 0
    4136:	30 e0       	ldi	r19, 0x00	; 0
    4138:	40 e8       	ldi	r20, 0x80	; 128
    413a:	5f e3       	ldi	r21, 0x3F	; 63
    413c:	0e 94 80 05 	call	0xb00	; 0xb00 <__ltsf2>
    4140:	88 23       	and	r24, r24
    4142:	2c f4       	brge	.+10     	; 0x414e <SetAngleOfServo+0x90>
		__ticks = 1;
    4144:	81 e0       	ldi	r24, 0x01	; 1
    4146:	90 e0       	ldi	r25, 0x00	; 0
    4148:	9c 8b       	std	Y+20, r25	; 0x14
    414a:	8b 8b       	std	Y+19, r24	; 0x13
    414c:	3f c0       	rjmp	.+126    	; 0x41cc <SetAngleOfServo+0x10e>
	else if (__tmp > 65535)
    414e:	6d 89       	ldd	r22, Y+21	; 0x15
    4150:	7e 89       	ldd	r23, Y+22	; 0x16
    4152:	8f 89       	ldd	r24, Y+23	; 0x17
    4154:	98 8d       	ldd	r25, Y+24	; 0x18
    4156:	20 e0       	ldi	r18, 0x00	; 0
    4158:	3f ef       	ldi	r19, 0xFF	; 255
    415a:	4f e7       	ldi	r20, 0x7F	; 127
    415c:	57 e4       	ldi	r21, 0x47	; 71
    415e:	0e 94 20 05 	call	0xa40	; 0xa40 <__gtsf2>
    4162:	18 16       	cp	r1, r24
    4164:	4c f5       	brge	.+82     	; 0x41b8 <SetAngleOfServo+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4166:	69 8d       	ldd	r22, Y+25	; 0x19
    4168:	7a 8d       	ldd	r23, Y+26	; 0x1a
    416a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    416c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    416e:	20 e0       	ldi	r18, 0x00	; 0
    4170:	30 e0       	ldi	r19, 0x00	; 0
    4172:	40 e2       	ldi	r20, 0x20	; 32
    4174:	51 e4       	ldi	r21, 0x41	; 65
    4176:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    417a:	dc 01       	movw	r26, r24
    417c:	cb 01       	movw	r24, r22
    417e:	bc 01       	movw	r22, r24
    4180:	cd 01       	movw	r24, r26
    4182:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4186:	dc 01       	movw	r26, r24
    4188:	cb 01       	movw	r24, r22
    418a:	9c 8b       	std	Y+20, r25	; 0x14
    418c:	8b 8b       	std	Y+19, r24	; 0x13
    418e:	0f c0       	rjmp	.+30     	; 0x41ae <SetAngleOfServo+0xf0>
    4190:	88 ec       	ldi	r24, 0xC8	; 200
    4192:	90 e0       	ldi	r25, 0x00	; 0
    4194:	9a 8b       	std	Y+18, r25	; 0x12
    4196:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4198:	89 89       	ldd	r24, Y+17	; 0x11
    419a:	9a 89       	ldd	r25, Y+18	; 0x12
    419c:	01 97       	sbiw	r24, 0x01	; 1
    419e:	f1 f7       	brne	.-4      	; 0x419c <SetAngleOfServo+0xde>
    41a0:	9a 8b       	std	Y+18, r25	; 0x12
    41a2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41a4:	8b 89       	ldd	r24, Y+19	; 0x13
    41a6:	9c 89       	ldd	r25, Y+20	; 0x14
    41a8:	01 97       	sbiw	r24, 0x01	; 1
    41aa:	9c 8b       	std	Y+20, r25	; 0x14
    41ac:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41ae:	8b 89       	ldd	r24, Y+19	; 0x13
    41b0:	9c 89       	ldd	r25, Y+20	; 0x14
    41b2:	00 97       	sbiw	r24, 0x00	; 0
    41b4:	69 f7       	brne	.-38     	; 0x4190 <SetAngleOfServo+0xd2>
    41b6:	14 c0       	rjmp	.+40     	; 0x41e0 <SetAngleOfServo+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41b8:	6d 89       	ldd	r22, Y+21	; 0x15
    41ba:	7e 89       	ldd	r23, Y+22	; 0x16
    41bc:	8f 89       	ldd	r24, Y+23	; 0x17
    41be:	98 8d       	ldd	r25, Y+24	; 0x18
    41c0:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    41c4:	dc 01       	movw	r26, r24
    41c6:	cb 01       	movw	r24, r22
    41c8:	9c 8b       	std	Y+20, r25	; 0x14
    41ca:	8b 8b       	std	Y+19, r24	; 0x13
    41cc:	8b 89       	ldd	r24, Y+19	; 0x13
    41ce:	9c 89       	ldd	r25, Y+20	; 0x14
    41d0:	98 8b       	std	Y+16, r25	; 0x10
    41d2:	8f 87       	std	Y+15, r24	; 0x0f
    41d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    41d6:	98 89       	ldd	r25, Y+16	; 0x10
    41d8:	01 97       	sbiw	r24, 0x01	; 1
    41da:	f1 f7       	brne	.-4      	; 0x41d8 <SetAngleOfServo+0x11a>
    41dc:	98 8b       	std	Y+16, r25	; 0x10
    41de:	8f 87       	std	Y+15, r24	; 0x0f
	   max duty : 2400
	 */

	if (InitialAngle <= LastAngle){

		for (u16 i = InitialAngle ; i < LastAngle ; i+=5 ){
    41e0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    41e2:	98 a1       	ldd	r25, Y+32	; 0x20
    41e4:	05 96       	adiw	r24, 0x05	; 5
    41e6:	98 a3       	std	Y+32, r25	; 0x20
    41e8:	8f 8f       	std	Y+31, r24	; 0x1f
    41ea:	2f 8d       	ldd	r18, Y+31	; 0x1f
    41ec:	38 a1       	ldd	r19, Y+32	; 0x20
    41ee:	8b a1       	ldd	r24, Y+35	; 0x23
    41f0:	9c a1       	ldd	r25, Y+36	; 0x24
    41f2:	28 17       	cp	r18, r24
    41f4:	39 07       	cpc	r19, r25
    41f6:	08 f4       	brcc	.+2      	; 0x41fa <SetAngleOfServo+0x13c>
    41f8:	7d cf       	rjmp	.-262    	; 0x40f4 <SetAngleOfServo+0x36>
    41fa:	88 c0       	rjmp	.+272    	; 0x430c <SetAngleOfServo+0x24e>

	}//end if InitialAngle <= LastAngle

	else {

		for (u16 i = InitialAngle ; i > LastAngle ; i-=5 ){
    41fc:	89 a1       	ldd	r24, Y+33	; 0x21
    41fe:	9a a1       	ldd	r25, Y+34	; 0x22
    4200:	9e 8f       	std	Y+30, r25	; 0x1e
    4202:	8d 8f       	std	Y+29, r24	; 0x1d
    4204:	7b c0       	rjmp	.+246    	; 0x42fc <SetAngleOfServo+0x23e>
			ServoSetAngleOCR1B(i);
    4206:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4208:	9e 8d       	ldd	r25, Y+30	; 0x1e
    420a:	0e 94 4b 20 	call	0x4096	; 0x4096 <ServoSetAngleOCR1B>
    420e:	80 e0       	ldi	r24, 0x00	; 0
    4210:	90 e0       	ldi	r25, 0x00	; 0
    4212:	a0 e8       	ldi	r26, 0x80	; 128
    4214:	bf e3       	ldi	r27, 0x3F	; 63
    4216:	8b 87       	std	Y+11, r24	; 0x0b
    4218:	9c 87       	std	Y+12, r25	; 0x0c
    421a:	ad 87       	std	Y+13, r26	; 0x0d
    421c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    421e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4220:	7c 85       	ldd	r23, Y+12	; 0x0c
    4222:	8d 85       	ldd	r24, Y+13	; 0x0d
    4224:	9e 85       	ldd	r25, Y+14	; 0x0e
    4226:	20 e0       	ldi	r18, 0x00	; 0
    4228:	30 e0       	ldi	r19, 0x00	; 0
    422a:	4a ef       	ldi	r20, 0xFA	; 250
    422c:	54 e4       	ldi	r21, 0x44	; 68
    422e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    4232:	dc 01       	movw	r26, r24
    4234:	cb 01       	movw	r24, r22
    4236:	8f 83       	std	Y+7, r24	; 0x07
    4238:	98 87       	std	Y+8, r25	; 0x08
    423a:	a9 87       	std	Y+9, r26	; 0x09
    423c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    423e:	6f 81       	ldd	r22, Y+7	; 0x07
    4240:	78 85       	ldd	r23, Y+8	; 0x08
    4242:	89 85       	ldd	r24, Y+9	; 0x09
    4244:	9a 85       	ldd	r25, Y+10	; 0x0a
    4246:	20 e0       	ldi	r18, 0x00	; 0
    4248:	30 e0       	ldi	r19, 0x00	; 0
    424a:	40 e8       	ldi	r20, 0x80	; 128
    424c:	5f e3       	ldi	r21, 0x3F	; 63
    424e:	0e 94 80 05 	call	0xb00	; 0xb00 <__ltsf2>
    4252:	88 23       	and	r24, r24
    4254:	2c f4       	brge	.+10     	; 0x4260 <SetAngleOfServo+0x1a2>
		__ticks = 1;
    4256:	81 e0       	ldi	r24, 0x01	; 1
    4258:	90 e0       	ldi	r25, 0x00	; 0
    425a:	9e 83       	std	Y+6, r25	; 0x06
    425c:	8d 83       	std	Y+5, r24	; 0x05
    425e:	3f c0       	rjmp	.+126    	; 0x42de <SetAngleOfServo+0x220>
	else if (__tmp > 65535)
    4260:	6f 81       	ldd	r22, Y+7	; 0x07
    4262:	78 85       	ldd	r23, Y+8	; 0x08
    4264:	89 85       	ldd	r24, Y+9	; 0x09
    4266:	9a 85       	ldd	r25, Y+10	; 0x0a
    4268:	20 e0       	ldi	r18, 0x00	; 0
    426a:	3f ef       	ldi	r19, 0xFF	; 255
    426c:	4f e7       	ldi	r20, 0x7F	; 127
    426e:	57 e4       	ldi	r21, 0x47	; 71
    4270:	0e 94 20 05 	call	0xa40	; 0xa40 <__gtsf2>
    4274:	18 16       	cp	r1, r24
    4276:	4c f5       	brge	.+82     	; 0x42ca <SetAngleOfServo+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4278:	6b 85       	ldd	r22, Y+11	; 0x0b
    427a:	7c 85       	ldd	r23, Y+12	; 0x0c
    427c:	8d 85       	ldd	r24, Y+13	; 0x0d
    427e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4280:	20 e0       	ldi	r18, 0x00	; 0
    4282:	30 e0       	ldi	r19, 0x00	; 0
    4284:	40 e2       	ldi	r20, 0x20	; 32
    4286:	51 e4       	ldi	r21, 0x41	; 65
    4288:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    428c:	dc 01       	movw	r26, r24
    428e:	cb 01       	movw	r24, r22
    4290:	bc 01       	movw	r22, r24
    4292:	cd 01       	movw	r24, r26
    4294:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4298:	dc 01       	movw	r26, r24
    429a:	cb 01       	movw	r24, r22
    429c:	9e 83       	std	Y+6, r25	; 0x06
    429e:	8d 83       	std	Y+5, r24	; 0x05
    42a0:	0f c0       	rjmp	.+30     	; 0x42c0 <SetAngleOfServo+0x202>
    42a2:	88 ec       	ldi	r24, 0xC8	; 200
    42a4:	90 e0       	ldi	r25, 0x00	; 0
    42a6:	9c 83       	std	Y+4, r25	; 0x04
    42a8:	8b 83       	std	Y+3, r24	; 0x03
    42aa:	8b 81       	ldd	r24, Y+3	; 0x03
    42ac:	9c 81       	ldd	r25, Y+4	; 0x04
    42ae:	01 97       	sbiw	r24, 0x01	; 1
    42b0:	f1 f7       	brne	.-4      	; 0x42ae <SetAngleOfServo+0x1f0>
    42b2:	9c 83       	std	Y+4, r25	; 0x04
    42b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42b6:	8d 81       	ldd	r24, Y+5	; 0x05
    42b8:	9e 81       	ldd	r25, Y+6	; 0x06
    42ba:	01 97       	sbiw	r24, 0x01	; 1
    42bc:	9e 83       	std	Y+6, r25	; 0x06
    42be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42c0:	8d 81       	ldd	r24, Y+5	; 0x05
    42c2:	9e 81       	ldd	r25, Y+6	; 0x06
    42c4:	00 97       	sbiw	r24, 0x00	; 0
    42c6:	69 f7       	brne	.-38     	; 0x42a2 <SetAngleOfServo+0x1e4>
    42c8:	14 c0       	rjmp	.+40     	; 0x42f2 <SetAngleOfServo+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42ca:	6f 81       	ldd	r22, Y+7	; 0x07
    42cc:	78 85       	ldd	r23, Y+8	; 0x08
    42ce:	89 85       	ldd	r24, Y+9	; 0x09
    42d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    42d2:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    42d6:	dc 01       	movw	r26, r24
    42d8:	cb 01       	movw	r24, r22
    42da:	9e 83       	std	Y+6, r25	; 0x06
    42dc:	8d 83       	std	Y+5, r24	; 0x05
    42de:	8d 81       	ldd	r24, Y+5	; 0x05
    42e0:	9e 81       	ldd	r25, Y+6	; 0x06
    42e2:	9a 83       	std	Y+2, r25	; 0x02
    42e4:	89 83       	std	Y+1, r24	; 0x01
    42e6:	89 81       	ldd	r24, Y+1	; 0x01
    42e8:	9a 81       	ldd	r25, Y+2	; 0x02
    42ea:	01 97       	sbiw	r24, 0x01	; 1
    42ec:	f1 f7       	brne	.-4      	; 0x42ea <SetAngleOfServo+0x22c>
    42ee:	9a 83       	std	Y+2, r25	; 0x02
    42f0:	89 83       	std	Y+1, r24	; 0x01

	}//end if InitialAngle <= LastAngle

	else {

		for (u16 i = InitialAngle ; i > LastAngle ; i-=5 ){
    42f2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    42f4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    42f6:	05 97       	sbiw	r24, 0x05	; 5
    42f8:	9e 8f       	std	Y+30, r25	; 0x1e
    42fa:	8d 8f       	std	Y+29, r24	; 0x1d
    42fc:	2d 8d       	ldd	r18, Y+29	; 0x1d
    42fe:	3e 8d       	ldd	r19, Y+30	; 0x1e
    4300:	8b a1       	ldd	r24, Y+35	; 0x23
    4302:	9c a1       	ldd	r25, Y+36	; 0x24
    4304:	82 17       	cp	r24, r18
    4306:	93 07       	cpc	r25, r19
    4308:	08 f4       	brcc	.+2      	; 0x430c <SetAngleOfServo+0x24e>
    430a:	7d cf       	rjmp	.-262    	; 0x4206 <SetAngleOfServo+0x148>
			ServoSetAngleOCR1B(i);
			_delay_ms(1);
		}//end for loop

	}//end else
}
    430c:	a4 96       	adiw	r28, 0x24	; 36
    430e:	0f b6       	in	r0, 0x3f	; 63
    4310:	f8 94       	cli
    4312:	de bf       	out	0x3e, r29	; 62
    4314:	0f be       	out	0x3f, r0	; 63
    4316:	cd bf       	out	0x3d, r28	; 61
    4318:	cf 91       	pop	r28
    431a:	df 91       	pop	r29
    431c:	08 95       	ret

0000431e <Ultrasonic_edgeProcessing>:
/*
 * Description :
 * Call-Back Function used to calculate g_timeHigh for the Ultrasonic pulse
 */
static void Ultrasonic_edgeProcessing(void)
{
    431e:	df 93       	push	r29
    4320:	cf 93       	push	r28
    4322:	cd b7       	in	r28, 0x3d	; 61
    4324:	de b7       	in	r29, 0x3e	; 62
	g_edgeCount++;
    4326:	80 91 ac 01 	lds	r24, 0x01AC
    432a:	8f 5f       	subi	r24, 0xFF	; 255
    432c:	80 93 ac 01 	sts	0x01AC, r24

	if(g_edgeCount == 1)
    4330:	80 91 ac 01 	lds	r24, 0x01AC
    4334:	81 30       	cpi	r24, 0x01	; 1
    4336:	31 f4       	brne	.+12     	; 0x4344 <Ultrasonic_edgeProcessing+0x26>
	{
		/*
		 * Clear the timer counter register to start measurements from the
		 * first detected rising edge
		 */
		Timer1Icu_clearTimerValue();
    4338:	0e 94 65 17 	call	0x2eca	; 0x2eca <Timer1Icu_clearTimerValue>

		/* Detect falling edge */
		Timer1Icu_setEdgeDetectionType(FALLING);
    433c:	80 e0       	ldi	r24, 0x00	; 0
    433e:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <Timer1Icu_setEdgeDetectionType>
    4342:	0d c0       	rjmp	.+26     	; 0x435e <Ultrasonic_edgeProcessing+0x40>
	}
	else if(g_edgeCount == 2)
    4344:	80 91 ac 01 	lds	r24, 0x01AC
    4348:	82 30       	cpi	r24, 0x02	; 2
    434a:	49 f4       	brne	.+18     	; 0x435e <Ultrasonic_edgeProcessing+0x40>
	{
		/* Store the High time value */
		g_timeHigh = Timer1Icu_getInputCaptureValue();
    434c:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <Timer1Icu_getInputCaptureValue>
    4350:	90 93 ae 01 	sts	0x01AE, r25
    4354:	80 93 ad 01 	sts	0x01AD, r24

		/* Detect rising edge */
		Timer1Icu_setEdgeDetectionType(RISING);
    4358:	81 e0       	ldi	r24, 0x01	; 1
    435a:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <Timer1Icu_setEdgeDetectionType>
	}
}
    435e:	cf 91       	pop	r28
    4360:	df 91       	pop	r29
    4362:	08 95       	ret

00004364 <Ultrasonic_Trigger>:
/*
 * Description :
 * Function send trigger pulse for Ultrasonic sensor to start measurements
 */
static void Ultrasonic_Trigger(void)
{
    4364:	df 93       	push	r29
    4366:	cf 93       	push	r28
    4368:	cd b7       	in	r28, 0x3d	; 61
    436a:	de b7       	in	r29, 0x3e	; 62
    436c:	68 97       	sbiw	r28, 0x18	; 24
    436e:	0f b6       	in	r0, 0x3f	; 63
    4370:	f8 94       	cli
    4372:	de bf       	out	0x3e, r29	; 62
    4374:	0f be       	out	0x3f, r0	; 63
    4376:	cd bf       	out	0x3d, r28	; 61
	/* Send the Trigger pulse */
	DIO_VidSetPinValue(ULTRASONIC_TRIGGER_PORT,ULTRASONIC_TRIGGER_PIN,1);
    4378:	81 e0       	ldi	r24, 0x01	; 1
    437a:	65 e0       	ldi	r22, 0x05	; 5
    437c:	41 e0       	ldi	r20, 0x01	; 1
    437e:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_VidSetPinValue>
    4382:	80 e0       	ldi	r24, 0x00	; 0
    4384:	90 e0       	ldi	r25, 0x00	; 0
    4386:	a0 e2       	ldi	r26, 0x20	; 32
    4388:	b1 e4       	ldi	r27, 0x41	; 65
    438a:	8d 8b       	std	Y+21, r24	; 0x15
    438c:	9e 8b       	std	Y+22, r25	; 0x16
    438e:	af 8b       	std	Y+23, r26	; 0x17
    4390:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4392:	6d 89       	ldd	r22, Y+21	; 0x15
    4394:	7e 89       	ldd	r23, Y+22	; 0x16
    4396:	8f 89       	ldd	r24, Y+23	; 0x17
    4398:	98 8d       	ldd	r25, Y+24	; 0x18
    439a:	2b ea       	ldi	r18, 0xAB	; 171
    439c:	3a ea       	ldi	r19, 0xAA	; 170
    439e:	4a e2       	ldi	r20, 0x2A	; 42
    43a0:	50 e4       	ldi	r21, 0x40	; 64
    43a2:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    43a6:	dc 01       	movw	r26, r24
    43a8:	cb 01       	movw	r24, r22
    43aa:	89 8b       	std	Y+17, r24	; 0x11
    43ac:	9a 8b       	std	Y+18, r25	; 0x12
    43ae:	ab 8b       	std	Y+19, r26	; 0x13
    43b0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    43b2:	69 89       	ldd	r22, Y+17	; 0x11
    43b4:	7a 89       	ldd	r23, Y+18	; 0x12
    43b6:	8b 89       	ldd	r24, Y+19	; 0x13
    43b8:	9c 89       	ldd	r25, Y+20	; 0x14
    43ba:	20 e0       	ldi	r18, 0x00	; 0
    43bc:	30 e0       	ldi	r19, 0x00	; 0
    43be:	40 e8       	ldi	r20, 0x80	; 128
    43c0:	5f e3       	ldi	r21, 0x3F	; 63
    43c2:	0e 94 80 05 	call	0xb00	; 0xb00 <__ltsf2>
    43c6:	88 23       	and	r24, r24
    43c8:	1c f4       	brge	.+6      	; 0x43d0 <Ultrasonic_Trigger+0x6c>
		__ticks = 1;
    43ca:	81 e0       	ldi	r24, 0x01	; 1
    43cc:	88 8b       	std	Y+16, r24	; 0x10
    43ce:	91 c0       	rjmp	.+290    	; 0x44f2 <Ultrasonic_Trigger+0x18e>
	else if (__tmp > 255)
    43d0:	69 89       	ldd	r22, Y+17	; 0x11
    43d2:	7a 89       	ldd	r23, Y+18	; 0x12
    43d4:	8b 89       	ldd	r24, Y+19	; 0x13
    43d6:	9c 89       	ldd	r25, Y+20	; 0x14
    43d8:	20 e0       	ldi	r18, 0x00	; 0
    43da:	30 e0       	ldi	r19, 0x00	; 0
    43dc:	4f e7       	ldi	r20, 0x7F	; 127
    43de:	53 e4       	ldi	r21, 0x43	; 67
    43e0:	0e 94 20 05 	call	0xa40	; 0xa40 <__gtsf2>
    43e4:	18 16       	cp	r1, r24
    43e6:	0c f0       	brlt	.+2      	; 0x43ea <Ultrasonic_Trigger+0x86>
    43e8:	7b c0       	rjmp	.+246    	; 0x44e0 <Ultrasonic_Trigger+0x17c>
	{
		_delay_ms(__us / 1000.0);
    43ea:	6d 89       	ldd	r22, Y+21	; 0x15
    43ec:	7e 89       	ldd	r23, Y+22	; 0x16
    43ee:	8f 89       	ldd	r24, Y+23	; 0x17
    43f0:	98 8d       	ldd	r25, Y+24	; 0x18
    43f2:	20 e0       	ldi	r18, 0x00	; 0
    43f4:	30 e0       	ldi	r19, 0x00	; 0
    43f6:	4a e7       	ldi	r20, 0x7A	; 122
    43f8:	54 e4       	ldi	r21, 0x44	; 68
    43fa:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__divsf3>
    43fe:	dc 01       	movw	r26, r24
    4400:	cb 01       	movw	r24, r22
    4402:	8c 87       	std	Y+12, r24	; 0x0c
    4404:	9d 87       	std	Y+13, r25	; 0x0d
    4406:	ae 87       	std	Y+14, r26	; 0x0e
    4408:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    440a:	6c 85       	ldd	r22, Y+12	; 0x0c
    440c:	7d 85       	ldd	r23, Y+13	; 0x0d
    440e:	8e 85       	ldd	r24, Y+14	; 0x0e
    4410:	9f 85       	ldd	r25, Y+15	; 0x0f
    4412:	20 e0       	ldi	r18, 0x00	; 0
    4414:	30 e0       	ldi	r19, 0x00	; 0
    4416:	4a ef       	ldi	r20, 0xFA	; 250
    4418:	54 e4       	ldi	r21, 0x44	; 68
    441a:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    441e:	dc 01       	movw	r26, r24
    4420:	cb 01       	movw	r24, r22
    4422:	88 87       	std	Y+8, r24	; 0x08
    4424:	99 87       	std	Y+9, r25	; 0x09
    4426:	aa 87       	std	Y+10, r26	; 0x0a
    4428:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    442a:	68 85       	ldd	r22, Y+8	; 0x08
    442c:	79 85       	ldd	r23, Y+9	; 0x09
    442e:	8a 85       	ldd	r24, Y+10	; 0x0a
    4430:	9b 85       	ldd	r25, Y+11	; 0x0b
    4432:	20 e0       	ldi	r18, 0x00	; 0
    4434:	30 e0       	ldi	r19, 0x00	; 0
    4436:	40 e8       	ldi	r20, 0x80	; 128
    4438:	5f e3       	ldi	r21, 0x3F	; 63
    443a:	0e 94 80 05 	call	0xb00	; 0xb00 <__ltsf2>
    443e:	88 23       	and	r24, r24
    4440:	2c f4       	brge	.+10     	; 0x444c <Ultrasonic_Trigger+0xe8>
		__ticks = 1;
    4442:	81 e0       	ldi	r24, 0x01	; 1
    4444:	90 e0       	ldi	r25, 0x00	; 0
    4446:	9f 83       	std	Y+7, r25	; 0x07
    4448:	8e 83       	std	Y+6, r24	; 0x06
    444a:	3f c0       	rjmp	.+126    	; 0x44ca <Ultrasonic_Trigger+0x166>
	else if (__tmp > 65535)
    444c:	68 85       	ldd	r22, Y+8	; 0x08
    444e:	79 85       	ldd	r23, Y+9	; 0x09
    4450:	8a 85       	ldd	r24, Y+10	; 0x0a
    4452:	9b 85       	ldd	r25, Y+11	; 0x0b
    4454:	20 e0       	ldi	r18, 0x00	; 0
    4456:	3f ef       	ldi	r19, 0xFF	; 255
    4458:	4f e7       	ldi	r20, 0x7F	; 127
    445a:	57 e4       	ldi	r21, 0x47	; 71
    445c:	0e 94 20 05 	call	0xa40	; 0xa40 <__gtsf2>
    4460:	18 16       	cp	r1, r24
    4462:	4c f5       	brge	.+82     	; 0x44b6 <Ultrasonic_Trigger+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4464:	6c 85       	ldd	r22, Y+12	; 0x0c
    4466:	7d 85       	ldd	r23, Y+13	; 0x0d
    4468:	8e 85       	ldd	r24, Y+14	; 0x0e
    446a:	9f 85       	ldd	r25, Y+15	; 0x0f
    446c:	20 e0       	ldi	r18, 0x00	; 0
    446e:	30 e0       	ldi	r19, 0x00	; 0
    4470:	40 e2       	ldi	r20, 0x20	; 32
    4472:	51 e4       	ldi	r21, 0x41	; 65
    4474:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    4478:	dc 01       	movw	r26, r24
    447a:	cb 01       	movw	r24, r22
    447c:	bc 01       	movw	r22, r24
    447e:	cd 01       	movw	r24, r26
    4480:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4484:	dc 01       	movw	r26, r24
    4486:	cb 01       	movw	r24, r22
    4488:	9f 83       	std	Y+7, r25	; 0x07
    448a:	8e 83       	std	Y+6, r24	; 0x06
    448c:	0f c0       	rjmp	.+30     	; 0x44ac <Ultrasonic_Trigger+0x148>
    448e:	88 ec       	ldi	r24, 0xC8	; 200
    4490:	90 e0       	ldi	r25, 0x00	; 0
    4492:	9d 83       	std	Y+5, r25	; 0x05
    4494:	8c 83       	std	Y+4, r24	; 0x04
    4496:	8c 81       	ldd	r24, Y+4	; 0x04
    4498:	9d 81       	ldd	r25, Y+5	; 0x05
    449a:	01 97       	sbiw	r24, 0x01	; 1
    449c:	f1 f7       	brne	.-4      	; 0x449a <Ultrasonic_Trigger+0x136>
    449e:	9d 83       	std	Y+5, r25	; 0x05
    44a0:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44a2:	8e 81       	ldd	r24, Y+6	; 0x06
    44a4:	9f 81       	ldd	r25, Y+7	; 0x07
    44a6:	01 97       	sbiw	r24, 0x01	; 1
    44a8:	9f 83       	std	Y+7, r25	; 0x07
    44aa:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44ac:	8e 81       	ldd	r24, Y+6	; 0x06
    44ae:	9f 81       	ldd	r25, Y+7	; 0x07
    44b0:	00 97       	sbiw	r24, 0x00	; 0
    44b2:	69 f7       	brne	.-38     	; 0x448e <Ultrasonic_Trigger+0x12a>
    44b4:	24 c0       	rjmp	.+72     	; 0x44fe <Ultrasonic_Trigger+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44b6:	68 85       	ldd	r22, Y+8	; 0x08
    44b8:	79 85       	ldd	r23, Y+9	; 0x09
    44ba:	8a 85       	ldd	r24, Y+10	; 0x0a
    44bc:	9b 85       	ldd	r25, Y+11	; 0x0b
    44be:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    44c2:	dc 01       	movw	r26, r24
    44c4:	cb 01       	movw	r24, r22
    44c6:	9f 83       	std	Y+7, r25	; 0x07
    44c8:	8e 83       	std	Y+6, r24	; 0x06
    44ca:	8e 81       	ldd	r24, Y+6	; 0x06
    44cc:	9f 81       	ldd	r25, Y+7	; 0x07
    44ce:	9b 83       	std	Y+3, r25	; 0x03
    44d0:	8a 83       	std	Y+2, r24	; 0x02
    44d2:	8a 81       	ldd	r24, Y+2	; 0x02
    44d4:	9b 81       	ldd	r25, Y+3	; 0x03
    44d6:	01 97       	sbiw	r24, 0x01	; 1
    44d8:	f1 f7       	brne	.-4      	; 0x44d6 <Ultrasonic_Trigger+0x172>
    44da:	9b 83       	std	Y+3, r25	; 0x03
    44dc:	8a 83       	std	Y+2, r24	; 0x02
    44de:	0f c0       	rjmp	.+30     	; 0x44fe <Ultrasonic_Trigger+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    44e0:	69 89       	ldd	r22, Y+17	; 0x11
    44e2:	7a 89       	ldd	r23, Y+18	; 0x12
    44e4:	8b 89       	ldd	r24, Y+19	; 0x13
    44e6:	9c 89       	ldd	r25, Y+20	; 0x14
    44e8:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    44ec:	dc 01       	movw	r26, r24
    44ee:	cb 01       	movw	r24, r22
    44f0:	88 8b       	std	Y+16, r24	; 0x10
    44f2:	88 89       	ldd	r24, Y+16	; 0x10
    44f4:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    44f6:	89 81       	ldd	r24, Y+1	; 0x01
    44f8:	8a 95       	dec	r24
    44fa:	f1 f7       	brne	.-4      	; 0x44f8 <Ultrasonic_Trigger+0x194>
    44fc:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	DIO_VidSetPinValue(ULTRASONIC_TRIGGER_PORT,ULTRASONIC_TRIGGER_PIN,0);
    44fe:	81 e0       	ldi	r24, 0x01	; 1
    4500:	65 e0       	ldi	r22, 0x05	; 5
    4502:	40 e0       	ldi	r20, 0x00	; 0
    4504:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_VidSetPinValue>
}
    4508:	68 96       	adiw	r28, 0x18	; 24
    450a:	0f b6       	in	r0, 0x3f	; 63
    450c:	f8 94       	cli
    450e:	de bf       	out	0x3e, r29	; 62
    4510:	0f be       	out	0x3f, r0	; 63
    4512:	cd bf       	out	0x3d, r28	; 61
    4514:	cf 91       	pop	r28
    4516:	df 91       	pop	r29
    4518:	08 95       	ret

0000451a <Ultrasonic_init>:
 * Initialize the Ultrasonic driver by:
 * 1. Initialize the Trigger pin direction
 * 2. Initialize the ICU driver and Its Call back function.
 */
void Ultrasonic_init(void)
{
    451a:	df 93       	push	r29
    451c:	cf 93       	push	r28
    451e:	cd b7       	in	r28, 0x3d	; 61
    4520:	de b7       	in	r29, 0x3e	; 62
	GIE_VidEnable();
    4522:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <GIE_VidEnable>
	Timer1Icu_init();
    4526:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <Timer1Icu_init>
	DIO_VidSetPinDirection(ULTRASONIC_TRIGGER_PORT,ULTRASONIC_TRIGGER_PIN,1);
    452a:	81 e0       	ldi	r24, 0x01	; 1
    452c:	65 e0       	ldi	r22, 0x05	; 5
    452e:	41 e0       	ldi	r20, 0x01	; 1
    4530:	0e 94 4f 09 	call	0x129e	; 0x129e <DIO_VidSetPinDirection>
	Timer1Icu_setCallBack( &Ultrasonic_edgeProcessing );
    4534:	8f e8       	ldi	r24, 0x8F	; 143
    4536:	91 e2       	ldi	r25, 0x21	; 33
    4538:	0e 94 29 17 	call	0x2e52	; 0x2e52 <Timer1Icu_setCallBack>
}
    453c:	cf 91       	pop	r28
    453e:	df 91       	pop	r29
    4540:	08 95       	ret

00004542 <Ultrasonic_readDistance>:
 * 3. Send the Trigger to the Ultrasonic by call Ultrasonic_Trigger function
 * 4. Wait for the measurements to be done by the ICU. We need two edges raising and falling.
 * 5. Calculate the distance in Centimeter value.
 */
u16 Ultrasonic_readDistance(void)
{
    4542:	df 93       	push	r29
    4544:	cf 93       	push	r28
    4546:	cd b7       	in	r28, 0x3d	; 61
    4548:	de b7       	in	r29, 0x3e	; 62
	/* Clear all variables as they may have values from previous read operation */
	g_distance  = 0;
    454a:	10 92 af 01 	sts	0x01AF, r1
	g_edgeCount = 0;
    454e:	10 92 ac 01 	sts	0x01AC, r1
	g_timeHigh  = 0;
    4552:	10 92 ae 01 	sts	0x01AE, r1
    4556:	10 92 ad 01 	sts	0x01AD, r1

	/* Clear the timer counter register to start measurements once trigger is sent */
	Timer1Icu_clearTimerValue();
    455a:	0e 94 65 17 	call	0x2eca	; 0x2eca <Timer1Icu_clearTimerValue>

	/* Send the trigger to activate the Ultra-sonic sensor (Start measurements) */
	Ultrasonic_Trigger();
    455e:	0e 94 b2 21 	call	0x4364	; 0x4364 <Ultrasonic_Trigger>

	/* Wait until the ICU measures the pulse in the ECHO pin */
	while(g_edgeCount != ULTRASONIC_NUM_OF_DETECTED_EDGES);
    4562:	80 91 ac 01 	lds	r24, 0x01AC
    4566:	82 30       	cpi	r24, 0x02	; 2
    4568:	e1 f7       	brne	.-8      	; 0x4562 <Ultrasonic_readDistance+0x20>

	/* Calculate the distance in Centimeter value */
	g_distance = g_timeHigh / 58;
    456a:	80 91 ad 01 	lds	r24, 0x01AD
    456e:	90 91 ae 01 	lds	r25, 0x01AE
    4572:	2a e3       	ldi	r18, 0x3A	; 58
    4574:	30 e0       	ldi	r19, 0x00	; 0
    4576:	b9 01       	movw	r22, r18
    4578:	0e 94 78 2e 	call	0x5cf0	; 0x5cf0 <__udivmodhi4>
    457c:	cb 01       	movw	r24, r22
    457e:	80 93 af 01 	sts	0x01AF, r24

	return g_distance;
    4582:	80 91 af 01 	lds	r24, 0x01AF
    4586:	88 2f       	mov	r24, r24
    4588:	90 e0       	ldi	r25, 0x00	; 0
}
    458a:	cf 91       	pop	r28
    458c:	df 91       	pop	r29
    458e:	08 95       	ret

00004590 <MultipleTasksCar_VidInit>:
 Name        : MultipleTasksCar_VidInit
 Input       : void
 Output      : void
 Description : to initialize the states of the car
*/
void MultipleTasksCar_VidInit(){
    4590:	df 93       	push	r29
    4592:	cf 93       	push	r28
    4594:	cd b7       	in	r28, 0x3d	; 61
    4596:	de b7       	in	r29, 0x3e	; 62
	/*****************************************/
	BluetoothInit();
    4598:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <BluetoothInit>
	DcMotor_VidInit();
    459c:	0e 94 53 1f 	call	0x3ea6	; 0x3ea6 <DcMotor_VidInit>
	IR_Init();
    45a0:	0e 94 04 20 	call	0x4008	; 0x4008 <IR_Init>
	SERVO_VidInitOCR1B();
    45a4:	0e 94 26 20 	call	0x404c	; 0x404c <SERVO_VidInitOCR1B>
	Ultrasonic_init();
    45a8:	0e 94 8d 22 	call	0x451a	; 0x451a <Ultrasonic_init>

	/* Global Interrupt Enable */
	GIE_VidEnable();
    45ac:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <GIE_VidEnable>
}
    45b0:	cf 91       	pop	r28
    45b2:	df 91       	pop	r29
    45b4:	08 95       	ret

000045b6 <MultipleTasksCar_SetCarVelocity>:
 Name        : MultipleTasksCar_SetCarVelocity
 Input       : u8
 Output      : void
 Description : to set the number velocity of car
*/
void MultipleTasksCar_SetCarVelocity (u8 VelocityPercentage){
    45b6:	df 93       	push	r29
    45b8:	cf 93       	push	r28
    45ba:	00 d0       	rcall	.+0      	; 0x45bc <MultipleTasksCar_SetCarVelocity+0x6>
    45bc:	0f 92       	push	r0
    45be:	cd b7       	in	r28, 0x3d	; 61
    45c0:	de b7       	in	r29, 0x3e	; 62
    45c2:	89 83       	std	Y+1, r24	; 0x01
	switch (VelocityPercentage){
    45c4:	89 81       	ldd	r24, Y+1	; 0x01
    45c6:	28 2f       	mov	r18, r24
    45c8:	30 e0       	ldi	r19, 0x00	; 0
    45ca:	3b 83       	std	Y+3, r19	; 0x03
    45cc:	2a 83       	std	Y+2, r18	; 0x02
    45ce:	8a 81       	ldd	r24, Y+2	; 0x02
    45d0:	9b 81       	ldd	r25, Y+3	; 0x03
    45d2:	82 33       	cpi	r24, 0x32	; 50
    45d4:	91 05       	cpc	r25, r1
    45d6:	d1 f0       	breq	.+52     	; 0x460c <MultipleTasksCar_SetCarVelocity+0x56>
    45d8:	2a 81       	ldd	r18, Y+2	; 0x02
    45da:	3b 81       	ldd	r19, Y+3	; 0x03
    45dc:	23 33       	cpi	r18, 0x33	; 51
    45de:	31 05       	cpc	r19, r1
    45e0:	34 f4       	brge	.+12     	; 0x45ee <MultipleTasksCar_SetCarVelocity+0x38>
    45e2:	8a 81       	ldd	r24, Y+2	; 0x02
    45e4:	9b 81       	ldd	r25, Y+3	; 0x03
    45e6:	81 33       	cpi	r24, 0x31	; 49
    45e8:	91 05       	cpc	r25, r1
    45ea:	61 f0       	breq	.+24     	; 0x4604 <MultipleTasksCar_SetCarVelocity+0x4e>
    45ec:	1a c0       	rjmp	.+52     	; 0x4622 <MultipleTasksCar_SetCarVelocity+0x6c>
    45ee:	2a 81       	ldd	r18, Y+2	; 0x02
    45f0:	3b 81       	ldd	r19, Y+3	; 0x03
    45f2:	23 33       	cpi	r18, 0x33	; 51
    45f4:	31 05       	cpc	r19, r1
    45f6:	71 f0       	breq	.+28     	; 0x4614 <MultipleTasksCar_SetCarVelocity+0x5e>
    45f8:	8a 81       	ldd	r24, Y+2	; 0x02
    45fa:	9b 81       	ldd	r25, Y+3	; 0x03
    45fc:	84 33       	cpi	r24, 0x34	; 52
    45fe:	91 05       	cpc	r25, r1
    4600:	69 f0       	breq	.+26     	; 0x461c <MultipleTasksCar_SetCarVelocity+0x66>
    4602:	0f c0       	rjmp	.+30     	; 0x4622 <MultipleTasksCar_SetCarVelocity+0x6c>
	case '1' :	MultipleTasksCar_DCMotorVelocity(QUARTER_PERCENTAGE);         break ;
    4604:	89 e1       	ldi	r24, 0x19	; 25
    4606:	0e 94 6d 23 	call	0x46da	; 0x46da <MultipleTasksCar_DCMotorVelocity>
    460a:	0b c0       	rjmp	.+22     	; 0x4622 <MultipleTasksCar_SetCarVelocity+0x6c>
	case '2' : 	MultipleTasksCar_DCMotorVelocity(HALF_PERCENTAGE);            break ;
    460c:	82 e3       	ldi	r24, 0x32	; 50
    460e:	0e 94 6d 23 	call	0x46da	; 0x46da <MultipleTasksCar_DCMotorVelocity>
    4612:	07 c0       	rjmp	.+14     	; 0x4622 <MultipleTasksCar_SetCarVelocity+0x6c>
	case '3' :  MultipleTasksCar_DCMotorVelocity(THREE_QUARTER_PERCENTAGE);   break ;
    4614:	8b e4       	ldi	r24, 0x4B	; 75
    4616:	0e 94 6d 23 	call	0x46da	; 0x46da <MultipleTasksCar_DCMotorVelocity>
    461a:	03 c0       	rjmp	.+6      	; 0x4622 <MultipleTasksCar_SetCarVelocity+0x6c>
	case '4' :  MultipleTasksCar_DCMotorVelocity(FULL_PERCENTAGE);            break ;
    461c:	84 e6       	ldi	r24, 0x64	; 100
    461e:	0e 94 6d 23 	call	0x46da	; 0x46da <MultipleTasksCar_DCMotorVelocity>
	}
}
    4622:	0f 90       	pop	r0
    4624:	0f 90       	pop	r0
    4626:	0f 90       	pop	r0
    4628:	cf 91       	pop	r28
    462a:	df 91       	pop	r29
    462c:	08 95       	ret

0000462e <MultipleTasksCar_GetDirections>:
 Description : to set the directions of the car
 steps       : determine derctions by press numbers that u wanted
               up ^    down ^'   right >    left <    stop 'select'

*/
void MultipleTasksCar_GetDirections(){
    462e:	df 93       	push	r29
    4630:	cf 93       	push	r28
    4632:	00 d0       	rcall	.+0      	; 0x4634 <MultipleTasksCar_GetDirections+0x6>
    4634:	0f 92       	push	r0
    4636:	cd b7       	in	r28, 0x3d	; 61
    4638:	de b7       	in	r29, 0x3e	; 62
	/*Take direction*/
	 u8 direction = Bluetooth_U32Getnumber() ;
    463a:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <Bluetooth_U32Getnumber>
    463e:	89 83       	std	Y+1, r24	; 0x01

	 /*Act accroding to direction*/
	 switch (direction){
    4640:	89 81       	ldd	r24, Y+1	; 0x01
    4642:	28 2f       	mov	r18, r24
    4644:	30 e0       	ldi	r19, 0x00	; 0
    4646:	3b 83       	std	Y+3, r19	; 0x03
    4648:	2a 83       	std	Y+2, r18	; 0x02
    464a:	8a 81       	ldd	r24, Y+2	; 0x02
    464c:	9b 81       	ldd	r25, Y+3	; 0x03
    464e:	83 36       	cpi	r24, 0x63	; 99
    4650:	91 05       	cpc	r25, r1
    4652:	49 f1       	breq	.+82     	; 0x46a6 <MultipleTasksCar_GetDirections+0x78>
    4654:	2a 81       	ldd	r18, Y+2	; 0x02
    4656:	3b 81       	ldd	r19, Y+3	; 0x03
    4658:	24 36       	cpi	r18, 0x64	; 100
    465a:	31 05       	cpc	r19, r1
    465c:	5c f4       	brge	.+22     	; 0x4674 <MultipleTasksCar_GetDirections+0x46>
    465e:	8a 81       	ldd	r24, Y+2	; 0x02
    4660:	9b 81       	ldd	r25, Y+3	; 0x03
    4662:	81 36       	cpi	r24, 0x61	; 97
    4664:	91 05       	cpc	r25, r1
    4666:	89 f0       	breq	.+34     	; 0x468a <MultipleTasksCar_GetDirections+0x5c>
    4668:	2a 81       	ldd	r18, Y+2	; 0x02
    466a:	3b 81       	ldd	r19, Y+3	; 0x03
    466c:	22 36       	cpi	r18, 0x62	; 98
    466e:	31 05       	cpc	r19, r1
    4670:	99 f0       	breq	.+38     	; 0x4698 <MultipleTasksCar_GetDirections+0x6a>
    4672:	2d c0       	rjmp	.+90     	; 0x46ce <MultipleTasksCar_GetDirections+0xa0>
    4674:	8a 81       	ldd	r24, Y+2	; 0x02
    4676:	9b 81       	ldd	r25, Y+3	; 0x03
    4678:	84 36       	cpi	r24, 0x64	; 100
    467a:	91 05       	cpc	r25, r1
    467c:	d9 f0       	breq	.+54     	; 0x46b4 <MultipleTasksCar_GetDirections+0x86>
    467e:	2a 81       	ldd	r18, Y+2	; 0x02
    4680:	3b 81       	ldd	r19, Y+3	; 0x03
    4682:	25 36       	cpi	r18, 0x65	; 101
    4684:	31 05       	cpc	r19, r1
    4686:	e9 f0       	breq	.+58     	; 0x46c2 <MultipleTasksCar_GetDirections+0x94>
    4688:	22 c0       	rjmp	.+68     	; 0x46ce <MultipleTasksCar_GetDirections+0xa0>
		 case UP :
				DcMotor_VidRotate_Wheels1(ANTI_CLK_WISE);
    468a:	82 e0       	ldi	r24, 0x02	; 2
    468c:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <DcMotor_VidRotate_Wheels1>
				DcMotor_VidRotate_Wheels2(ANTI_CLK_WISE);
    4690:	82 e0       	ldi	r24, 0x02	; 2
    4692:	0e 94 c4 1f 	call	0x3f88	; 0x3f88 <DcMotor_VidRotate_Wheels2>
    4696:	1b c0       	rjmp	.+54     	; 0x46ce <MultipleTasksCar_GetDirections+0xa0>
				break ;
		 case DOWN :
				DcMotor_VidRotate_Wheels1(CLK_WISE);
    4698:	81 e0       	ldi	r24, 0x01	; 1
    469a:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <DcMotor_VidRotate_Wheels1>
				DcMotor_VidRotate_Wheels2(CLK_WISE);
    469e:	81 e0       	ldi	r24, 0x01	; 1
    46a0:	0e 94 c4 1f 	call	0x3f88	; 0x3f88 <DcMotor_VidRotate_Wheels2>
    46a4:	14 c0       	rjmp	.+40     	; 0x46ce <MultipleTasksCar_GetDirections+0xa0>
				break ;
		 case RIGHT :
				DcMotor_VidRotate_Wheels1(STOP);
    46a6:	80 e0       	ldi	r24, 0x00	; 0
    46a8:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <DcMotor_VidRotate_Wheels1>
				DcMotor_VidRotate_Wheels2(CLK_WISE);
    46ac:	81 e0       	ldi	r24, 0x01	; 1
    46ae:	0e 94 c4 1f 	call	0x3f88	; 0x3f88 <DcMotor_VidRotate_Wheels2>
    46b2:	0d c0       	rjmp	.+26     	; 0x46ce <MultipleTasksCar_GetDirections+0xa0>
				break ;
		 case LEFT :
				DcMotor_VidRotate_Wheels1(CLK_WISE);
    46b4:	81 e0       	ldi	r24, 0x01	; 1
    46b6:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <DcMotor_VidRotate_Wheels1>
				DcMotor_VidRotate_Wheels2(STOP);
    46ba:	80 e0       	ldi	r24, 0x00	; 0
    46bc:	0e 94 c4 1f 	call	0x3f88	; 0x3f88 <DcMotor_VidRotate_Wheels2>
    46c0:	06 c0       	rjmp	.+12     	; 0x46ce <MultipleTasksCar_GetDirections+0xa0>
				break ;
		 case NO_THING :
				DcMotor_VidRotate_Wheels1(STOP);
    46c2:	80 e0       	ldi	r24, 0x00	; 0
    46c4:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <DcMotor_VidRotate_Wheels1>
				DcMotor_VidRotate_Wheels2(STOP);
    46c8:	80 e0       	ldi	r24, 0x00	; 0
    46ca:	0e 94 c4 1f 	call	0x3f88	; 0x3f88 <DcMotor_VidRotate_Wheels2>
				break ;
     }//end switch
}
    46ce:	0f 90       	pop	r0
    46d0:	0f 90       	pop	r0
    46d2:	0f 90       	pop	r0
    46d4:	cf 91       	pop	r28
    46d6:	df 91       	pop	r29
    46d8:	08 95       	ret

000046da <MultipleTasksCar_DCMotorVelocity>:
 Name        : MultipleTasksCar_DCMotorVelocity
 Input       : void
 Output      : void
 Description : to set the percentage of the velocity of car
*/
void MultipleTasksCar_DCMotorVelocity(u8 CopyVelocityPercentage){
    46da:	df 93       	push	r29
    46dc:	cf 93       	push	r28
    46de:	0f 92       	push	r0
    46e0:	cd b7       	in	r28, 0x3d	; 61
    46e2:	de b7       	in	r29, 0x3e	; 62
    46e4:	89 83       	std	Y+1, r24	; 0x01
	Timer2_VidSETDUTY(CopyVelocityPercentage);
    46e6:	89 81       	ldd	r24, Y+1	; 0x01
    46e8:	0e 94 b8 1c 	call	0x3970	; 0x3970 <Timer2_VidSETDUTY>
}
    46ec:	0f 90       	pop	r0
    46ee:	cf 91       	pop	r28
    46f0:	df 91       	pop	r29
    46f2:	08 95       	ret

000046f4 <MultipleTasksCar_GetMode>:
 Name        : MultipleTasksCar_GetMode
 Input       : void
 Output      : u8
 Description : to return the type of mode
*/
u8   MultipleTasksCar_GetMode(){
    46f4:	df 93       	push	r29
    46f6:	cf 93       	push	r28
    46f8:	cd b7       	in	r28, 0x3d	; 61
    46fa:	de b7       	in	r29, 0x3e	; 62
	return Bluetooth_U32Getnumber() ;
    46fc:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <Bluetooth_U32Getnumber>
}
    4700:	cf 91       	pop	r28
    4702:	df 91       	pop	r29
    4704:	08 95       	ret

00004706 <MultipleTasksCar_LineFollower>:
 Name        : MultipleTasksCar_LineFollower
 Input       : void
 Output      : void
 Description : to Follow the black line
*/
void MultipleTasksCar_LineFollower(){
    4706:	df 93       	push	r29
    4708:	cf 93       	push	r28
    470a:	00 d0       	rcall	.+0      	; 0x470c <MultipleTasksCar_LineFollower+0x6>
    470c:	cd b7       	in	r28, 0x3d	; 61
    470e:	de b7       	in	r29, 0x3e	; 62
	/* To detect black line */
    u8 IRRight   = DIO_U8GetPinValue(IR_PORT,IR_PIN_RIGHT);
    4710:	81 e0       	ldi	r24, 0x01	; 1
    4712:	61 e0       	ldi	r22, 0x01	; 1
    4714:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_U8GetPinValue>
    4718:	8a 83       	std	Y+2, r24	; 0x02
    u8 IRLeft    = DIO_U8GetPinValue(IR_PORT,IR_PIN_LEFT);
    471a:	81 e0       	ldi	r24, 0x01	; 1
    471c:	60 e0       	ldi	r22, 0x00	; 0
    471e:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_U8GetPinValue>
    4722:	89 83       	std	Y+1, r24	; 0x01

	 if (! IRRight && ! IRLeft){
    4724:	8a 81       	ldd	r24, Y+2	; 0x02
    4726:	88 23       	and	r24, r24
    4728:	51 f4       	brne	.+20     	; 0x473e <MultipleTasksCar_LineFollower+0x38>
    472a:	89 81       	ldd	r24, Y+1	; 0x01
    472c:	88 23       	and	r24, r24
    472e:	39 f4       	brne	.+14     	; 0x473e <MultipleTasksCar_LineFollower+0x38>
		DcMotor_VidRotate_Wheels1(ANTI_CLK_WISE);
    4730:	82 e0       	ldi	r24, 0x02	; 2
    4732:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <DcMotor_VidRotate_Wheels1>
		DcMotor_VidRotate_Wheels2(ANTI_CLK_WISE);
    4736:	82 e0       	ldi	r24, 0x02	; 2
    4738:	0e 94 c4 1f 	call	0x3f88	; 0x3f88 <DcMotor_VidRotate_Wheels2>
    473c:	20 c0       	rjmp	.+64     	; 0x477e <MultipleTasksCar_LineFollower+0x78>
	 }
	 else if ( IRRight && ! IRLeft ){
    473e:	8a 81       	ldd	r24, Y+2	; 0x02
    4740:	88 23       	and	r24, r24
    4742:	51 f0       	breq	.+20     	; 0x4758 <MultipleTasksCar_LineFollower+0x52>
    4744:	89 81       	ldd	r24, Y+1	; 0x01
    4746:	88 23       	and	r24, r24
    4748:	39 f4       	brne	.+14     	; 0x4758 <MultipleTasksCar_LineFollower+0x52>
		DcMotor_VidRotate_Wheels1(ANTI_CLK_WISE);
    474a:	82 e0       	ldi	r24, 0x02	; 2
    474c:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <DcMotor_VidRotate_Wheels1>
		DcMotor_VidRotate_Wheels2(CLK_WISE);
    4750:	81 e0       	ldi	r24, 0x01	; 1
    4752:	0e 94 c4 1f 	call	0x3f88	; 0x3f88 <DcMotor_VidRotate_Wheels2>
    4756:	13 c0       	rjmp	.+38     	; 0x477e <MultipleTasksCar_LineFollower+0x78>
	 }
	 else if (! IRRight && IRLeft) {
    4758:	8a 81       	ldd	r24, Y+2	; 0x02
    475a:	88 23       	and	r24, r24
    475c:	51 f4       	brne	.+20     	; 0x4772 <MultipleTasksCar_LineFollower+0x6c>
    475e:	89 81       	ldd	r24, Y+1	; 0x01
    4760:	88 23       	and	r24, r24
    4762:	39 f0       	breq	.+14     	; 0x4772 <MultipleTasksCar_LineFollower+0x6c>
		DcMotor_VidRotate_Wheels1(CLK_WISE);
    4764:	81 e0       	ldi	r24, 0x01	; 1
    4766:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <DcMotor_VidRotate_Wheels1>
		DcMotor_VidRotate_Wheels2(ANTI_CLK_WISE);
    476a:	82 e0       	ldi	r24, 0x02	; 2
    476c:	0e 94 c4 1f 	call	0x3f88	; 0x3f88 <DcMotor_VidRotate_Wheels2>
    4770:	06 c0       	rjmp	.+12     	; 0x477e <MultipleTasksCar_LineFollower+0x78>
	 }
	 else {
		DcMotor_VidRotate_Wheels1(STOP);
    4772:	80 e0       	ldi	r24, 0x00	; 0
    4774:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <DcMotor_VidRotate_Wheels1>
		DcMotor_VidRotate_Wheels2(STOP);
    4778:	80 e0       	ldi	r24, 0x00	; 0
    477a:	0e 94 c4 1f 	call	0x3f88	; 0x3f88 <DcMotor_VidRotate_Wheels2>
	 }
}
    477e:	0f 90       	pop	r0
    4780:	0f 90       	pop	r0
    4782:	cf 91       	pop	r28
    4784:	df 91       	pop	r29
    4786:	08 95       	ret

00004788 <MultipleTasksCar_UltraSonic>:
                                   ------an obtacle---->state 3
 state 3 : stop - check on obtacle ------no obtacle---->right , delay , up
                                   ------an obtacle---->stop for 10 seconds then state 1
 state 4 : all directions are blocked ----> stop for 4 seconds
*/
void MultipleTasksCar_UltraSonic(){
    4788:	0f 93       	push	r16
    478a:	1f 93       	push	r17
    478c:	df 93       	push	r29
    478e:	cf 93       	push	r28
    4790:	cd b7       	in	r28, 0x3d	; 61
    4792:	de b7       	in	r29, 0x3e	; 62
    4794:	c6 54       	subi	r28, 0x46	; 70
    4796:	d0 40       	sbci	r29, 0x00	; 0
    4798:	0f b6       	in	r0, 0x3f	; 63
    479a:	f8 94       	cli
    479c:	de bf       	out	0x3e, r29	; 62
    479e:	0f be       	out	0x3f, r0	; 63
    47a0:	cd bf       	out	0x3d, r28	; 61
	/* variable for directions */
    static u16 distance ;

    /* to move in suitable velocity */
    MultipleTasksCar_DCMotorVelocity(HALF_PERCENTAGE);
    47a2:	82 e3       	ldi	r24, 0x32	; 50
    47a4:	0e 94 6d 23 	call	0x46da	; 0x46da <MultipleTasksCar_DCMotorVelocity>

	/* to make servo forward */
    ServoSetAngleOCR1B(ANGLE_ZERO);
    47a8:	8c ed       	ldi	r24, 0xDC	; 220
    47aa:	95 e0       	ldi	r25, 0x05	; 5
    47ac:	0e 94 4b 20 	call	0x4096	; 0x4096 <ServoSetAngleOCR1B>

	/* to go forward */
    DcMotor_VidRotate_Wheels1(ANTI_CLK_WISE);
    47b0:	82 e0       	ldi	r24, 0x02	; 2
    47b2:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <DcMotor_VidRotate_Wheels1>
	DcMotor_VidRotate_Wheels2(ANTI_CLK_WISE);
    47b6:	82 e0       	ldi	r24, 0x02	; 2
    47b8:	0e 94 c4 1f 	call	0x3f88	; 0x3f88 <DcMotor_VidRotate_Wheels2>

	/* to trig ultrasonic pin and get new distance*/
    distance = Ultrasonic_readDistance();
    47bc:	0e 94 a1 22 	call	0x4542	; 0x4542 <Ultrasonic_readDistance>
    47c0:	90 93 b1 01 	sts	0x01B1, r25
    47c4:	80 93 b0 01 	sts	0x01B0, r24

	if (distance < MIN_DISTANCE){
    47c8:	80 91 b0 01 	lds	r24, 0x01B0
    47cc:	90 91 b1 01 	lds	r25, 0x01B1
    47d0:	84 31       	cpi	r24, 0x14	; 20
    47d2:	91 05       	cpc	r25, r1
    47d4:	08 f0       	brcs	.+2      	; 0x47d8 <MultipleTasksCar_UltraSonic+0x50>
    47d6:	8a c2       	rjmp	.+1300   	; 0x4cec <MultipleTasksCar_UltraSonic+0x564>
		DcMotor_VidRotate_Wheels1(STOP);
    47d8:	80 e0       	ldi	r24, 0x00	; 0
    47da:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <DcMotor_VidRotate_Wheels1>
		DcMotor_VidRotate_Wheels2(STOP);
    47de:	80 e0       	ldi	r24, 0x00	; 0
    47e0:	0e 94 c4 1f 	call	0x3f88	; 0x3f88 <DcMotor_VidRotate_Wheels2>
    47e4:	fe 01       	movw	r30, r28
    47e6:	ed 5b       	subi	r30, 0xBD	; 189
    47e8:	ff 4f       	sbci	r31, 0xFF	; 255
    47ea:	80 e0       	ldi	r24, 0x00	; 0
    47ec:	90 e0       	ldi	r25, 0x00	; 0
    47ee:	aa ef       	ldi	r26, 0xFA	; 250
    47f0:	b3 e4       	ldi	r27, 0x43	; 67
    47f2:	80 83       	st	Z, r24
    47f4:	91 83       	std	Z+1, r25	; 0x01
    47f6:	a2 83       	std	Z+2, r26	; 0x02
    47f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47fa:	8e 01       	movw	r16, r28
    47fc:	01 5c       	subi	r16, 0xC1	; 193
    47fe:	1f 4f       	sbci	r17, 0xFF	; 255
    4800:	fe 01       	movw	r30, r28
    4802:	ed 5b       	subi	r30, 0xBD	; 189
    4804:	ff 4f       	sbci	r31, 0xFF	; 255
    4806:	60 81       	ld	r22, Z
    4808:	71 81       	ldd	r23, Z+1	; 0x01
    480a:	82 81       	ldd	r24, Z+2	; 0x02
    480c:	93 81       	ldd	r25, Z+3	; 0x03
    480e:	20 e0       	ldi	r18, 0x00	; 0
    4810:	30 e0       	ldi	r19, 0x00	; 0
    4812:	4a ef       	ldi	r20, 0xFA	; 250
    4814:	54 e4       	ldi	r21, 0x44	; 68
    4816:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    481a:	dc 01       	movw	r26, r24
    481c:	cb 01       	movw	r24, r22
    481e:	f8 01       	movw	r30, r16
    4820:	80 83       	st	Z, r24
    4822:	91 83       	std	Z+1, r25	; 0x01
    4824:	a2 83       	std	Z+2, r26	; 0x02
    4826:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4828:	fe 01       	movw	r30, r28
    482a:	ff 96       	adiw	r30, 0x3f	; 63
    482c:	60 81       	ld	r22, Z
    482e:	71 81       	ldd	r23, Z+1	; 0x01
    4830:	82 81       	ldd	r24, Z+2	; 0x02
    4832:	93 81       	ldd	r25, Z+3	; 0x03
    4834:	20 e0       	ldi	r18, 0x00	; 0
    4836:	30 e0       	ldi	r19, 0x00	; 0
    4838:	40 e8       	ldi	r20, 0x80	; 128
    483a:	5f e3       	ldi	r21, 0x3F	; 63
    483c:	0e 94 80 05 	call	0xb00	; 0xb00 <__ltsf2>
    4840:	88 23       	and	r24, r24
    4842:	2c f4       	brge	.+10     	; 0x484e <MultipleTasksCar_UltraSonic+0xc6>
		__ticks = 1;
    4844:	81 e0       	ldi	r24, 0x01	; 1
    4846:	90 e0       	ldi	r25, 0x00	; 0
    4848:	9e af       	std	Y+62, r25	; 0x3e
    484a:	8d af       	std	Y+61, r24	; 0x3d
    484c:	46 c0       	rjmp	.+140    	; 0x48da <MultipleTasksCar_UltraSonic+0x152>
	else if (__tmp > 65535)
    484e:	fe 01       	movw	r30, r28
    4850:	ff 96       	adiw	r30, 0x3f	; 63
    4852:	60 81       	ld	r22, Z
    4854:	71 81       	ldd	r23, Z+1	; 0x01
    4856:	82 81       	ldd	r24, Z+2	; 0x02
    4858:	93 81       	ldd	r25, Z+3	; 0x03
    485a:	20 e0       	ldi	r18, 0x00	; 0
    485c:	3f ef       	ldi	r19, 0xFF	; 255
    485e:	4f e7       	ldi	r20, 0x7F	; 127
    4860:	57 e4       	ldi	r21, 0x47	; 71
    4862:	0e 94 20 05 	call	0xa40	; 0xa40 <__gtsf2>
    4866:	18 16       	cp	r1, r24
    4868:	64 f5       	brge	.+88     	; 0x48c2 <MultipleTasksCar_UltraSonic+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    486a:	fe 01       	movw	r30, r28
    486c:	ed 5b       	subi	r30, 0xBD	; 189
    486e:	ff 4f       	sbci	r31, 0xFF	; 255
    4870:	60 81       	ld	r22, Z
    4872:	71 81       	ldd	r23, Z+1	; 0x01
    4874:	82 81       	ldd	r24, Z+2	; 0x02
    4876:	93 81       	ldd	r25, Z+3	; 0x03
    4878:	20 e0       	ldi	r18, 0x00	; 0
    487a:	30 e0       	ldi	r19, 0x00	; 0
    487c:	40 e2       	ldi	r20, 0x20	; 32
    487e:	51 e4       	ldi	r21, 0x41	; 65
    4880:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    4884:	dc 01       	movw	r26, r24
    4886:	cb 01       	movw	r24, r22
    4888:	bc 01       	movw	r22, r24
    488a:	cd 01       	movw	r24, r26
    488c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4890:	dc 01       	movw	r26, r24
    4892:	cb 01       	movw	r24, r22
    4894:	9e af       	std	Y+62, r25	; 0x3e
    4896:	8d af       	std	Y+61, r24	; 0x3d
    4898:	0f c0       	rjmp	.+30     	; 0x48b8 <MultipleTasksCar_UltraSonic+0x130>
    489a:	88 ec       	ldi	r24, 0xC8	; 200
    489c:	90 e0       	ldi	r25, 0x00	; 0
    489e:	9c af       	std	Y+60, r25	; 0x3c
    48a0:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    48a2:	8b ad       	ldd	r24, Y+59	; 0x3b
    48a4:	9c ad       	ldd	r25, Y+60	; 0x3c
    48a6:	01 97       	sbiw	r24, 0x01	; 1
    48a8:	f1 f7       	brne	.-4      	; 0x48a6 <MultipleTasksCar_UltraSonic+0x11e>
    48aa:	9c af       	std	Y+60, r25	; 0x3c
    48ac:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48ae:	8d ad       	ldd	r24, Y+61	; 0x3d
    48b0:	9e ad       	ldd	r25, Y+62	; 0x3e
    48b2:	01 97       	sbiw	r24, 0x01	; 1
    48b4:	9e af       	std	Y+62, r25	; 0x3e
    48b6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48b8:	8d ad       	ldd	r24, Y+61	; 0x3d
    48ba:	9e ad       	ldd	r25, Y+62	; 0x3e
    48bc:	00 97       	sbiw	r24, 0x00	; 0
    48be:	69 f7       	brne	.-38     	; 0x489a <MultipleTasksCar_UltraSonic+0x112>
    48c0:	16 c0       	rjmp	.+44     	; 0x48ee <MultipleTasksCar_UltraSonic+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48c2:	fe 01       	movw	r30, r28
    48c4:	ff 96       	adiw	r30, 0x3f	; 63
    48c6:	60 81       	ld	r22, Z
    48c8:	71 81       	ldd	r23, Z+1	; 0x01
    48ca:	82 81       	ldd	r24, Z+2	; 0x02
    48cc:	93 81       	ldd	r25, Z+3	; 0x03
    48ce:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    48d2:	dc 01       	movw	r26, r24
    48d4:	cb 01       	movw	r24, r22
    48d6:	9e af       	std	Y+62, r25	; 0x3e
    48d8:	8d af       	std	Y+61, r24	; 0x3d
    48da:	8d ad       	ldd	r24, Y+61	; 0x3d
    48dc:	9e ad       	ldd	r25, Y+62	; 0x3e
    48de:	9a af       	std	Y+58, r25	; 0x3a
    48e0:	89 af       	std	Y+57, r24	; 0x39
    48e2:	89 ad       	ldd	r24, Y+57	; 0x39
    48e4:	9a ad       	ldd	r25, Y+58	; 0x3a
    48e6:	01 97       	sbiw	r24, 0x01	; 1
    48e8:	f1 f7       	brne	.-4      	; 0x48e6 <MultipleTasksCar_UltraSonic+0x15e>
    48ea:	9a af       	std	Y+58, r25	; 0x3a
    48ec:	89 af       	std	Y+57, r24	; 0x39

		/* 0 : -90 */
		_delay_ms(500); /* to notice car is stop */
		SetAngleOfServo(ANGLE_ZERO,ANGLE_NEGTIVE90);
    48ee:	8c ed       	ldi	r24, 0xDC	; 220
    48f0:	95 e0       	ldi	r25, 0x05	; 5
    48f2:	60 e9       	ldi	r22, 0x90	; 144
    48f4:	71 e0       	ldi	r23, 0x01	; 1
    48f6:	0e 94 5f 20 	call	0x40be	; 0x40be <SetAngleOfServo>
    48fa:	80 e0       	ldi	r24, 0x00	; 0
    48fc:	90 e0       	ldi	r25, 0x00	; 0
    48fe:	aa ef       	ldi	r26, 0xFA	; 250
    4900:	b3 e4       	ldi	r27, 0x43	; 67
    4902:	8d ab       	std	Y+53, r24	; 0x35
    4904:	9e ab       	std	Y+54, r25	; 0x36
    4906:	af ab       	std	Y+55, r26	; 0x37
    4908:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    490a:	6d a9       	ldd	r22, Y+53	; 0x35
    490c:	7e a9       	ldd	r23, Y+54	; 0x36
    490e:	8f a9       	ldd	r24, Y+55	; 0x37
    4910:	98 ad       	ldd	r25, Y+56	; 0x38
    4912:	20 e0       	ldi	r18, 0x00	; 0
    4914:	30 e0       	ldi	r19, 0x00	; 0
    4916:	4a ef       	ldi	r20, 0xFA	; 250
    4918:	54 e4       	ldi	r21, 0x44	; 68
    491a:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    491e:	dc 01       	movw	r26, r24
    4920:	cb 01       	movw	r24, r22
    4922:	89 ab       	std	Y+49, r24	; 0x31
    4924:	9a ab       	std	Y+50, r25	; 0x32
    4926:	ab ab       	std	Y+51, r26	; 0x33
    4928:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    492a:	69 a9       	ldd	r22, Y+49	; 0x31
    492c:	7a a9       	ldd	r23, Y+50	; 0x32
    492e:	8b a9       	ldd	r24, Y+51	; 0x33
    4930:	9c a9       	ldd	r25, Y+52	; 0x34
    4932:	20 e0       	ldi	r18, 0x00	; 0
    4934:	30 e0       	ldi	r19, 0x00	; 0
    4936:	40 e8       	ldi	r20, 0x80	; 128
    4938:	5f e3       	ldi	r21, 0x3F	; 63
    493a:	0e 94 80 05 	call	0xb00	; 0xb00 <__ltsf2>
    493e:	88 23       	and	r24, r24
    4940:	2c f4       	brge	.+10     	; 0x494c <MultipleTasksCar_UltraSonic+0x1c4>
		__ticks = 1;
    4942:	81 e0       	ldi	r24, 0x01	; 1
    4944:	90 e0       	ldi	r25, 0x00	; 0
    4946:	98 ab       	std	Y+48, r25	; 0x30
    4948:	8f a7       	std	Y+47, r24	; 0x2f
    494a:	3f c0       	rjmp	.+126    	; 0x49ca <MultipleTasksCar_UltraSonic+0x242>
	else if (__tmp > 65535)
    494c:	69 a9       	ldd	r22, Y+49	; 0x31
    494e:	7a a9       	ldd	r23, Y+50	; 0x32
    4950:	8b a9       	ldd	r24, Y+51	; 0x33
    4952:	9c a9       	ldd	r25, Y+52	; 0x34
    4954:	20 e0       	ldi	r18, 0x00	; 0
    4956:	3f ef       	ldi	r19, 0xFF	; 255
    4958:	4f e7       	ldi	r20, 0x7F	; 127
    495a:	57 e4       	ldi	r21, 0x47	; 71
    495c:	0e 94 20 05 	call	0xa40	; 0xa40 <__gtsf2>
    4960:	18 16       	cp	r1, r24
    4962:	4c f5       	brge	.+82     	; 0x49b6 <MultipleTasksCar_UltraSonic+0x22e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4964:	6d a9       	ldd	r22, Y+53	; 0x35
    4966:	7e a9       	ldd	r23, Y+54	; 0x36
    4968:	8f a9       	ldd	r24, Y+55	; 0x37
    496a:	98 ad       	ldd	r25, Y+56	; 0x38
    496c:	20 e0       	ldi	r18, 0x00	; 0
    496e:	30 e0       	ldi	r19, 0x00	; 0
    4970:	40 e2       	ldi	r20, 0x20	; 32
    4972:	51 e4       	ldi	r21, 0x41	; 65
    4974:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    4978:	dc 01       	movw	r26, r24
    497a:	cb 01       	movw	r24, r22
    497c:	bc 01       	movw	r22, r24
    497e:	cd 01       	movw	r24, r26
    4980:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4984:	dc 01       	movw	r26, r24
    4986:	cb 01       	movw	r24, r22
    4988:	98 ab       	std	Y+48, r25	; 0x30
    498a:	8f a7       	std	Y+47, r24	; 0x2f
    498c:	0f c0       	rjmp	.+30     	; 0x49ac <MultipleTasksCar_UltraSonic+0x224>
    498e:	88 ec       	ldi	r24, 0xC8	; 200
    4990:	90 e0       	ldi	r25, 0x00	; 0
    4992:	9e a7       	std	Y+46, r25	; 0x2e
    4994:	8d a7       	std	Y+45, r24	; 0x2d
    4996:	8d a5       	ldd	r24, Y+45	; 0x2d
    4998:	9e a5       	ldd	r25, Y+46	; 0x2e
    499a:	01 97       	sbiw	r24, 0x01	; 1
    499c:	f1 f7       	brne	.-4      	; 0x499a <MultipleTasksCar_UltraSonic+0x212>
    499e:	9e a7       	std	Y+46, r25	; 0x2e
    49a0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    49a4:	98 a9       	ldd	r25, Y+48	; 0x30
    49a6:	01 97       	sbiw	r24, 0x01	; 1
    49a8:	98 ab       	std	Y+48, r25	; 0x30
    49aa:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    49ae:	98 a9       	ldd	r25, Y+48	; 0x30
    49b0:	00 97       	sbiw	r24, 0x00	; 0
    49b2:	69 f7       	brne	.-38     	; 0x498e <MultipleTasksCar_UltraSonic+0x206>
    49b4:	14 c0       	rjmp	.+40     	; 0x49de <MultipleTasksCar_UltraSonic+0x256>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49b6:	69 a9       	ldd	r22, Y+49	; 0x31
    49b8:	7a a9       	ldd	r23, Y+50	; 0x32
    49ba:	8b a9       	ldd	r24, Y+51	; 0x33
    49bc:	9c a9       	ldd	r25, Y+52	; 0x34
    49be:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    49c2:	dc 01       	movw	r26, r24
    49c4:	cb 01       	movw	r24, r22
    49c6:	98 ab       	std	Y+48, r25	; 0x30
    49c8:	8f a7       	std	Y+47, r24	; 0x2f
    49ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    49cc:	98 a9       	ldd	r25, Y+48	; 0x30
    49ce:	9c a7       	std	Y+44, r25	; 0x2c
    49d0:	8b a7       	std	Y+43, r24	; 0x2b
    49d2:	8b a5       	ldd	r24, Y+43	; 0x2b
    49d4:	9c a5       	ldd	r25, Y+44	; 0x2c
    49d6:	01 97       	sbiw	r24, 0x01	; 1
    49d8:	f1 f7       	brne	.-4      	; 0x49d6 <MultipleTasksCar_UltraSonic+0x24e>
    49da:	9c a7       	std	Y+44, r25	; 0x2c
    49dc:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(500);
		ServoSetAngleOCR1B(ANGLE_NEGTIVE90);
    49de:	80 e9       	ldi	r24, 0x90	; 144
    49e0:	91 e0       	ldi	r25, 0x01	; 1
    49e2:	0e 94 4b 20 	call	0x4096	; 0x4096 <ServoSetAngleOCR1B>
    49e6:	80 e0       	ldi	r24, 0x00	; 0
    49e8:	90 e0       	ldi	r25, 0x00	; 0
    49ea:	aa ef       	ldi	r26, 0xFA	; 250
    49ec:	b3 e4       	ldi	r27, 0x43	; 67
    49ee:	8f a3       	std	Y+39, r24	; 0x27
    49f0:	98 a7       	std	Y+40, r25	; 0x28
    49f2:	a9 a7       	std	Y+41, r26	; 0x29
    49f4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    49f6:	6f a1       	ldd	r22, Y+39	; 0x27
    49f8:	78 a5       	ldd	r23, Y+40	; 0x28
    49fa:	89 a5       	ldd	r24, Y+41	; 0x29
    49fc:	9a a5       	ldd	r25, Y+42	; 0x2a
    49fe:	20 e0       	ldi	r18, 0x00	; 0
    4a00:	30 e0       	ldi	r19, 0x00	; 0
    4a02:	4a ef       	ldi	r20, 0xFA	; 250
    4a04:	54 e4       	ldi	r21, 0x44	; 68
    4a06:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    4a0a:	dc 01       	movw	r26, r24
    4a0c:	cb 01       	movw	r24, r22
    4a0e:	8b a3       	std	Y+35, r24	; 0x23
    4a10:	9c a3       	std	Y+36, r25	; 0x24
    4a12:	ad a3       	std	Y+37, r26	; 0x25
    4a14:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4a16:	6b a1       	ldd	r22, Y+35	; 0x23
    4a18:	7c a1       	ldd	r23, Y+36	; 0x24
    4a1a:	8d a1       	ldd	r24, Y+37	; 0x25
    4a1c:	9e a1       	ldd	r25, Y+38	; 0x26
    4a1e:	20 e0       	ldi	r18, 0x00	; 0
    4a20:	30 e0       	ldi	r19, 0x00	; 0
    4a22:	40 e8       	ldi	r20, 0x80	; 128
    4a24:	5f e3       	ldi	r21, 0x3F	; 63
    4a26:	0e 94 80 05 	call	0xb00	; 0xb00 <__ltsf2>
    4a2a:	88 23       	and	r24, r24
    4a2c:	2c f4       	brge	.+10     	; 0x4a38 <MultipleTasksCar_UltraSonic+0x2b0>
		__ticks = 1;
    4a2e:	81 e0       	ldi	r24, 0x01	; 1
    4a30:	90 e0       	ldi	r25, 0x00	; 0
    4a32:	9a a3       	std	Y+34, r25	; 0x22
    4a34:	89 a3       	std	Y+33, r24	; 0x21
    4a36:	3f c0       	rjmp	.+126    	; 0x4ab6 <MultipleTasksCar_UltraSonic+0x32e>
	else if (__tmp > 65535)
    4a38:	6b a1       	ldd	r22, Y+35	; 0x23
    4a3a:	7c a1       	ldd	r23, Y+36	; 0x24
    4a3c:	8d a1       	ldd	r24, Y+37	; 0x25
    4a3e:	9e a1       	ldd	r25, Y+38	; 0x26
    4a40:	20 e0       	ldi	r18, 0x00	; 0
    4a42:	3f ef       	ldi	r19, 0xFF	; 255
    4a44:	4f e7       	ldi	r20, 0x7F	; 127
    4a46:	57 e4       	ldi	r21, 0x47	; 71
    4a48:	0e 94 20 05 	call	0xa40	; 0xa40 <__gtsf2>
    4a4c:	18 16       	cp	r1, r24
    4a4e:	4c f5       	brge	.+82     	; 0x4aa2 <MultipleTasksCar_UltraSonic+0x31a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a50:	6f a1       	ldd	r22, Y+39	; 0x27
    4a52:	78 a5       	ldd	r23, Y+40	; 0x28
    4a54:	89 a5       	ldd	r24, Y+41	; 0x29
    4a56:	9a a5       	ldd	r25, Y+42	; 0x2a
    4a58:	20 e0       	ldi	r18, 0x00	; 0
    4a5a:	30 e0       	ldi	r19, 0x00	; 0
    4a5c:	40 e2       	ldi	r20, 0x20	; 32
    4a5e:	51 e4       	ldi	r21, 0x41	; 65
    4a60:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    4a64:	dc 01       	movw	r26, r24
    4a66:	cb 01       	movw	r24, r22
    4a68:	bc 01       	movw	r22, r24
    4a6a:	cd 01       	movw	r24, r26
    4a6c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4a70:	dc 01       	movw	r26, r24
    4a72:	cb 01       	movw	r24, r22
    4a74:	9a a3       	std	Y+34, r25	; 0x22
    4a76:	89 a3       	std	Y+33, r24	; 0x21
    4a78:	0f c0       	rjmp	.+30     	; 0x4a98 <MultipleTasksCar_UltraSonic+0x310>
    4a7a:	88 ec       	ldi	r24, 0xC8	; 200
    4a7c:	90 e0       	ldi	r25, 0x00	; 0
    4a7e:	98 a3       	std	Y+32, r25	; 0x20
    4a80:	8f 8f       	std	Y+31, r24	; 0x1f
    4a82:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4a84:	98 a1       	ldd	r25, Y+32	; 0x20
    4a86:	01 97       	sbiw	r24, 0x01	; 1
    4a88:	f1 f7       	brne	.-4      	; 0x4a86 <MultipleTasksCar_UltraSonic+0x2fe>
    4a8a:	98 a3       	std	Y+32, r25	; 0x20
    4a8c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a8e:	89 a1       	ldd	r24, Y+33	; 0x21
    4a90:	9a a1       	ldd	r25, Y+34	; 0x22
    4a92:	01 97       	sbiw	r24, 0x01	; 1
    4a94:	9a a3       	std	Y+34, r25	; 0x22
    4a96:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a98:	89 a1       	ldd	r24, Y+33	; 0x21
    4a9a:	9a a1       	ldd	r25, Y+34	; 0x22
    4a9c:	00 97       	sbiw	r24, 0x00	; 0
    4a9e:	69 f7       	brne	.-38     	; 0x4a7a <MultipleTasksCar_UltraSonic+0x2f2>
    4aa0:	14 c0       	rjmp	.+40     	; 0x4aca <MultipleTasksCar_UltraSonic+0x342>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4aa2:	6b a1       	ldd	r22, Y+35	; 0x23
    4aa4:	7c a1       	ldd	r23, Y+36	; 0x24
    4aa6:	8d a1       	ldd	r24, Y+37	; 0x25
    4aa8:	9e a1       	ldd	r25, Y+38	; 0x26
    4aaa:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4aae:	dc 01       	movw	r26, r24
    4ab0:	cb 01       	movw	r24, r22
    4ab2:	9a a3       	std	Y+34, r25	; 0x22
    4ab4:	89 a3       	std	Y+33, r24	; 0x21
    4ab6:	89 a1       	ldd	r24, Y+33	; 0x21
    4ab8:	9a a1       	ldd	r25, Y+34	; 0x22
    4aba:	9e 8f       	std	Y+30, r25	; 0x1e
    4abc:	8d 8f       	std	Y+29, r24	; 0x1d
    4abe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4ac0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4ac2:	01 97       	sbiw	r24, 0x01	; 1
    4ac4:	f1 f7       	brne	.-4      	; 0x4ac2 <MultipleTasksCar_UltraSonic+0x33a>
    4ac6:	9e 8f       	std	Y+30, r25	; 0x1e
    4ac8:	8d 8f       	std	Y+29, r24	; 0x1d

		/* update on distance */
		_delay_ms(500); /* to saturate */
		distance = Ultrasonic_readDistance();
    4aca:	0e 94 a1 22 	call	0x4542	; 0x4542 <Ultrasonic_readDistance>
    4ace:	90 93 b1 01 	sts	0x01B1, r25
    4ad2:	80 93 b0 01 	sts	0x01B0, r24

		if (distance < MIN_DISTANCE ){
    4ad6:	80 91 b0 01 	lds	r24, 0x01B0
    4ada:	90 91 b1 01 	lds	r25, 0x01B1
    4ade:	84 31       	cpi	r24, 0x14	; 20
    4ae0:	91 05       	cpc	r25, r1
    4ae2:	08 f0       	brcs	.+2      	; 0x4ae6 <MultipleTasksCar_UltraSonic+0x35e>
    4ae4:	01 c1       	rjmp	.+514    	; 0x4ce8 <MultipleTasksCar_UltraSonic+0x560>
			/* -90 : +90 */
			SetAngleOfServo(ANGLE_NEGTIVE90,ANGLE_POSITIVE90);
    4ae6:	80 e9       	ldi	r24, 0x90	; 144
    4ae8:	91 e0       	ldi	r25, 0x01	; 1
    4aea:	60 e6       	ldi	r22, 0x60	; 96
    4aec:	79 e0       	ldi	r23, 0x09	; 9
    4aee:	0e 94 5f 20 	call	0x40be	; 0x40be <SetAngleOfServo>
    4af2:	80 e0       	ldi	r24, 0x00	; 0
    4af4:	90 e0       	ldi	r25, 0x00	; 0
    4af6:	aa ef       	ldi	r26, 0xFA	; 250
    4af8:	b3 e4       	ldi	r27, 0x43	; 67
    4afa:	89 8f       	std	Y+25, r24	; 0x19
    4afc:	9a 8f       	std	Y+26, r25	; 0x1a
    4afe:	ab 8f       	std	Y+27, r26	; 0x1b
    4b00:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b02:	69 8d       	ldd	r22, Y+25	; 0x19
    4b04:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4b06:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4b08:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4b0a:	20 e0       	ldi	r18, 0x00	; 0
    4b0c:	30 e0       	ldi	r19, 0x00	; 0
    4b0e:	4a ef       	ldi	r20, 0xFA	; 250
    4b10:	54 e4       	ldi	r21, 0x44	; 68
    4b12:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    4b16:	dc 01       	movw	r26, r24
    4b18:	cb 01       	movw	r24, r22
    4b1a:	8d 8b       	std	Y+21, r24	; 0x15
    4b1c:	9e 8b       	std	Y+22, r25	; 0x16
    4b1e:	af 8b       	std	Y+23, r26	; 0x17
    4b20:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4b22:	6d 89       	ldd	r22, Y+21	; 0x15
    4b24:	7e 89       	ldd	r23, Y+22	; 0x16
    4b26:	8f 89       	ldd	r24, Y+23	; 0x17
    4b28:	98 8d       	ldd	r25, Y+24	; 0x18
    4b2a:	20 e0       	ldi	r18, 0x00	; 0
    4b2c:	30 e0       	ldi	r19, 0x00	; 0
    4b2e:	40 e8       	ldi	r20, 0x80	; 128
    4b30:	5f e3       	ldi	r21, 0x3F	; 63
    4b32:	0e 94 80 05 	call	0xb00	; 0xb00 <__ltsf2>
    4b36:	88 23       	and	r24, r24
    4b38:	2c f4       	brge	.+10     	; 0x4b44 <MultipleTasksCar_UltraSonic+0x3bc>
		__ticks = 1;
    4b3a:	81 e0       	ldi	r24, 0x01	; 1
    4b3c:	90 e0       	ldi	r25, 0x00	; 0
    4b3e:	9c 8b       	std	Y+20, r25	; 0x14
    4b40:	8b 8b       	std	Y+19, r24	; 0x13
    4b42:	3f c0       	rjmp	.+126    	; 0x4bc2 <MultipleTasksCar_UltraSonic+0x43a>
	else if (__tmp > 65535)
    4b44:	6d 89       	ldd	r22, Y+21	; 0x15
    4b46:	7e 89       	ldd	r23, Y+22	; 0x16
    4b48:	8f 89       	ldd	r24, Y+23	; 0x17
    4b4a:	98 8d       	ldd	r25, Y+24	; 0x18
    4b4c:	20 e0       	ldi	r18, 0x00	; 0
    4b4e:	3f ef       	ldi	r19, 0xFF	; 255
    4b50:	4f e7       	ldi	r20, 0x7F	; 127
    4b52:	57 e4       	ldi	r21, 0x47	; 71
    4b54:	0e 94 20 05 	call	0xa40	; 0xa40 <__gtsf2>
    4b58:	18 16       	cp	r1, r24
    4b5a:	4c f5       	brge	.+82     	; 0x4bae <MultipleTasksCar_UltraSonic+0x426>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b5c:	69 8d       	ldd	r22, Y+25	; 0x19
    4b5e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4b60:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4b62:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4b64:	20 e0       	ldi	r18, 0x00	; 0
    4b66:	30 e0       	ldi	r19, 0x00	; 0
    4b68:	40 e2       	ldi	r20, 0x20	; 32
    4b6a:	51 e4       	ldi	r21, 0x41	; 65
    4b6c:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    4b70:	dc 01       	movw	r26, r24
    4b72:	cb 01       	movw	r24, r22
    4b74:	bc 01       	movw	r22, r24
    4b76:	cd 01       	movw	r24, r26
    4b78:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4b7c:	dc 01       	movw	r26, r24
    4b7e:	cb 01       	movw	r24, r22
    4b80:	9c 8b       	std	Y+20, r25	; 0x14
    4b82:	8b 8b       	std	Y+19, r24	; 0x13
    4b84:	0f c0       	rjmp	.+30     	; 0x4ba4 <MultipleTasksCar_UltraSonic+0x41c>
    4b86:	88 ec       	ldi	r24, 0xC8	; 200
    4b88:	90 e0       	ldi	r25, 0x00	; 0
    4b8a:	9a 8b       	std	Y+18, r25	; 0x12
    4b8c:	89 8b       	std	Y+17, r24	; 0x11
    4b8e:	89 89       	ldd	r24, Y+17	; 0x11
    4b90:	9a 89       	ldd	r25, Y+18	; 0x12
    4b92:	01 97       	sbiw	r24, 0x01	; 1
    4b94:	f1 f7       	brne	.-4      	; 0x4b92 <MultipleTasksCar_UltraSonic+0x40a>
    4b96:	9a 8b       	std	Y+18, r25	; 0x12
    4b98:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b9a:	8b 89       	ldd	r24, Y+19	; 0x13
    4b9c:	9c 89       	ldd	r25, Y+20	; 0x14
    4b9e:	01 97       	sbiw	r24, 0x01	; 1
    4ba0:	9c 8b       	std	Y+20, r25	; 0x14
    4ba2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ba4:	8b 89       	ldd	r24, Y+19	; 0x13
    4ba6:	9c 89       	ldd	r25, Y+20	; 0x14
    4ba8:	00 97       	sbiw	r24, 0x00	; 0
    4baa:	69 f7       	brne	.-38     	; 0x4b86 <MultipleTasksCar_UltraSonic+0x3fe>
    4bac:	14 c0       	rjmp	.+40     	; 0x4bd6 <MultipleTasksCar_UltraSonic+0x44e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4bae:	6d 89       	ldd	r22, Y+21	; 0x15
    4bb0:	7e 89       	ldd	r23, Y+22	; 0x16
    4bb2:	8f 89       	ldd	r24, Y+23	; 0x17
    4bb4:	98 8d       	ldd	r25, Y+24	; 0x18
    4bb6:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4bba:	dc 01       	movw	r26, r24
    4bbc:	cb 01       	movw	r24, r22
    4bbe:	9c 8b       	std	Y+20, r25	; 0x14
    4bc0:	8b 8b       	std	Y+19, r24	; 0x13
    4bc2:	8b 89       	ldd	r24, Y+19	; 0x13
    4bc4:	9c 89       	ldd	r25, Y+20	; 0x14
    4bc6:	98 8b       	std	Y+16, r25	; 0x10
    4bc8:	8f 87       	std	Y+15, r24	; 0x0f
    4bca:	8f 85       	ldd	r24, Y+15	; 0x0f
    4bcc:	98 89       	ldd	r25, Y+16	; 0x10
    4bce:	01 97       	sbiw	r24, 0x01	; 1
    4bd0:	f1 f7       	brne	.-4      	; 0x4bce <MultipleTasksCar_UltraSonic+0x446>
    4bd2:	98 8b       	std	Y+16, r25	; 0x10
    4bd4:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(500);
			ServoSetAngleOCR1B(ANGLE_POSITIVE90);
    4bd6:	80 e6       	ldi	r24, 0x60	; 96
    4bd8:	99 e0       	ldi	r25, 0x09	; 9
    4bda:	0e 94 4b 20 	call	0x4096	; 0x4096 <ServoSetAngleOCR1B>
    4bde:	80 e0       	ldi	r24, 0x00	; 0
    4be0:	90 e0       	ldi	r25, 0x00	; 0
    4be2:	aa ef       	ldi	r26, 0xFA	; 250
    4be4:	b3 e4       	ldi	r27, 0x43	; 67
    4be6:	8b 87       	std	Y+11, r24	; 0x0b
    4be8:	9c 87       	std	Y+12, r25	; 0x0c
    4bea:	ad 87       	std	Y+13, r26	; 0x0d
    4bec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4bee:	6b 85       	ldd	r22, Y+11	; 0x0b
    4bf0:	7c 85       	ldd	r23, Y+12	; 0x0c
    4bf2:	8d 85       	ldd	r24, Y+13	; 0x0d
    4bf4:	9e 85       	ldd	r25, Y+14	; 0x0e
    4bf6:	20 e0       	ldi	r18, 0x00	; 0
    4bf8:	30 e0       	ldi	r19, 0x00	; 0
    4bfa:	4a ef       	ldi	r20, 0xFA	; 250
    4bfc:	54 e4       	ldi	r21, 0x44	; 68
    4bfe:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    4c02:	dc 01       	movw	r26, r24
    4c04:	cb 01       	movw	r24, r22
    4c06:	8f 83       	std	Y+7, r24	; 0x07
    4c08:	98 87       	std	Y+8, r25	; 0x08
    4c0a:	a9 87       	std	Y+9, r26	; 0x09
    4c0c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4c0e:	6f 81       	ldd	r22, Y+7	; 0x07
    4c10:	78 85       	ldd	r23, Y+8	; 0x08
    4c12:	89 85       	ldd	r24, Y+9	; 0x09
    4c14:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c16:	20 e0       	ldi	r18, 0x00	; 0
    4c18:	30 e0       	ldi	r19, 0x00	; 0
    4c1a:	40 e8       	ldi	r20, 0x80	; 128
    4c1c:	5f e3       	ldi	r21, 0x3F	; 63
    4c1e:	0e 94 80 05 	call	0xb00	; 0xb00 <__ltsf2>
    4c22:	88 23       	and	r24, r24
    4c24:	2c f4       	brge	.+10     	; 0x4c30 <MultipleTasksCar_UltraSonic+0x4a8>
		__ticks = 1;
    4c26:	81 e0       	ldi	r24, 0x01	; 1
    4c28:	90 e0       	ldi	r25, 0x00	; 0
    4c2a:	9e 83       	std	Y+6, r25	; 0x06
    4c2c:	8d 83       	std	Y+5, r24	; 0x05
    4c2e:	3f c0       	rjmp	.+126    	; 0x4cae <MultipleTasksCar_UltraSonic+0x526>
	else if (__tmp > 65535)
    4c30:	6f 81       	ldd	r22, Y+7	; 0x07
    4c32:	78 85       	ldd	r23, Y+8	; 0x08
    4c34:	89 85       	ldd	r24, Y+9	; 0x09
    4c36:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c38:	20 e0       	ldi	r18, 0x00	; 0
    4c3a:	3f ef       	ldi	r19, 0xFF	; 255
    4c3c:	4f e7       	ldi	r20, 0x7F	; 127
    4c3e:	57 e4       	ldi	r21, 0x47	; 71
    4c40:	0e 94 20 05 	call	0xa40	; 0xa40 <__gtsf2>
    4c44:	18 16       	cp	r1, r24
    4c46:	4c f5       	brge	.+82     	; 0x4c9a <MultipleTasksCar_UltraSonic+0x512>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c48:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    4c4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c50:	20 e0       	ldi	r18, 0x00	; 0
    4c52:	30 e0       	ldi	r19, 0x00	; 0
    4c54:	40 e2       	ldi	r20, 0x20	; 32
    4c56:	51 e4       	ldi	r21, 0x41	; 65
    4c58:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    4c5c:	dc 01       	movw	r26, r24
    4c5e:	cb 01       	movw	r24, r22
    4c60:	bc 01       	movw	r22, r24
    4c62:	cd 01       	movw	r24, r26
    4c64:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4c68:	dc 01       	movw	r26, r24
    4c6a:	cb 01       	movw	r24, r22
    4c6c:	9e 83       	std	Y+6, r25	; 0x06
    4c6e:	8d 83       	std	Y+5, r24	; 0x05
    4c70:	0f c0       	rjmp	.+30     	; 0x4c90 <MultipleTasksCar_UltraSonic+0x508>
    4c72:	88 ec       	ldi	r24, 0xC8	; 200
    4c74:	90 e0       	ldi	r25, 0x00	; 0
    4c76:	9c 83       	std	Y+4, r25	; 0x04
    4c78:	8b 83       	std	Y+3, r24	; 0x03
    4c7a:	8b 81       	ldd	r24, Y+3	; 0x03
    4c7c:	9c 81       	ldd	r25, Y+4	; 0x04
    4c7e:	01 97       	sbiw	r24, 0x01	; 1
    4c80:	f1 f7       	brne	.-4      	; 0x4c7e <MultipleTasksCar_UltraSonic+0x4f6>
    4c82:	9c 83       	std	Y+4, r25	; 0x04
    4c84:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c86:	8d 81       	ldd	r24, Y+5	; 0x05
    4c88:	9e 81       	ldd	r25, Y+6	; 0x06
    4c8a:	01 97       	sbiw	r24, 0x01	; 1
    4c8c:	9e 83       	std	Y+6, r25	; 0x06
    4c8e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c90:	8d 81       	ldd	r24, Y+5	; 0x05
    4c92:	9e 81       	ldd	r25, Y+6	; 0x06
    4c94:	00 97       	sbiw	r24, 0x00	; 0
    4c96:	69 f7       	brne	.-38     	; 0x4c72 <MultipleTasksCar_UltraSonic+0x4ea>
    4c98:	14 c0       	rjmp	.+40     	; 0x4cc2 <MultipleTasksCar_UltraSonic+0x53a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c9a:	6f 81       	ldd	r22, Y+7	; 0x07
    4c9c:	78 85       	ldd	r23, Y+8	; 0x08
    4c9e:	89 85       	ldd	r24, Y+9	; 0x09
    4ca0:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ca2:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4ca6:	dc 01       	movw	r26, r24
    4ca8:	cb 01       	movw	r24, r22
    4caa:	9e 83       	std	Y+6, r25	; 0x06
    4cac:	8d 83       	std	Y+5, r24	; 0x05
    4cae:	8d 81       	ldd	r24, Y+5	; 0x05
    4cb0:	9e 81       	ldd	r25, Y+6	; 0x06
    4cb2:	9a 83       	std	Y+2, r25	; 0x02
    4cb4:	89 83       	std	Y+1, r24	; 0x01
    4cb6:	89 81       	ldd	r24, Y+1	; 0x01
    4cb8:	9a 81       	ldd	r25, Y+2	; 0x02
    4cba:	01 97       	sbiw	r24, 0x01	; 1
    4cbc:	f1 f7       	brne	.-4      	; 0x4cba <MultipleTasksCar_UltraSonic+0x532>
    4cbe:	9a 83       	std	Y+2, r25	; 0x02
    4cc0:	89 83       	std	Y+1, r24	; 0x01

			/* update on distance */
			_delay_ms(500); /* to saturate */
			distance = Ultrasonic_readDistance();
    4cc2:	0e 94 a1 22 	call	0x4542	; 0x4542 <Ultrasonic_readDistance>
    4cc6:	90 93 b1 01 	sts	0x01B1, r25
    4cca:	80 93 b0 01 	sts	0x01B0, r24

			if (distance < MIN_DISTANCE ){
    4cce:	80 91 b0 01 	lds	r24, 0x01B0
    4cd2:	90 91 b1 01 	lds	r25, 0x01B1
    4cd6:	84 31       	cpi	r24, 0x14	; 20
    4cd8:	91 05       	cpc	r25, r1
    4cda:	18 f4       	brcc	.+6      	; 0x4ce2 <MultipleTasksCar_UltraSonic+0x55a>
				UltraSonicStopAction();
    4cdc:	0e 94 8a 29 	call	0x5314	; 0x5314 <UltraSonicStopAction>
    4ce0:	05 c0       	rjmp	.+10     	; 0x4cec <MultipleTasksCar_UltraSonic+0x564>
			}//end if left blocked
			else {
				UltraSonicLeftAction();
    4ce2:	0e 94 06 28 	call	0x500c	; 0x500c <UltraSonicLeftAction>
    4ce6:	02 c0       	rjmp	.+4      	; 0x4cec <MultipleTasksCar_UltraSonic+0x564>
			}//end else left true
		}//end if right blocked
		else {
			UltraSonicRightAction();
    4ce8:	0e 94 82 26 	call	0x4d04	; 0x4d04 <UltraSonicRightAction>
		}//end else right true
	}
}
    4cec:	ca 5b       	subi	r28, 0xBA	; 186
    4cee:	df 4f       	sbci	r29, 0xFF	; 255
    4cf0:	0f b6       	in	r0, 0x3f	; 63
    4cf2:	f8 94       	cli
    4cf4:	de bf       	out	0x3e, r29	; 62
    4cf6:	0f be       	out	0x3f, r0	; 63
    4cf8:	cd bf       	out	0x3d, r28	; 61
    4cfa:	cf 91       	pop	r28
    4cfc:	df 91       	pop	r29
    4cfe:	1f 91       	pop	r17
    4d00:	0f 91       	pop	r16
    4d02:	08 95       	ret

00004d04 <UltraSonicRightAction>:
 Name        : UltraSonicRightAction
 Input       : void
 Output      : void
 Description : if the opposit is blocked go right at first option
*/
void UltraSonicRightAction () {
    4d04:	df 93       	push	r29
    4d06:	cf 93       	push	r28
    4d08:	cd b7       	in	r28, 0x3d	; 61
    4d0a:	de b7       	in	r29, 0x3e	; 62
    4d0c:	aa 97       	sbiw	r28, 0x2a	; 42
    4d0e:	0f b6       	in	r0, 0x3f	; 63
    4d10:	f8 94       	cli
    4d12:	de bf       	out	0x3e, r29	; 62
    4d14:	0f be       	out	0x3f, r0	; 63
    4d16:	cd bf       	out	0x3d, r28	; 61
	SetAngleOfServo(ANGLE_NEGTIVE90,ANGLE_ZERO);
    4d18:	80 e9       	ldi	r24, 0x90	; 144
    4d1a:	91 e0       	ldi	r25, 0x01	; 1
    4d1c:	6c ed       	ldi	r22, 0xDC	; 220
    4d1e:	75 e0       	ldi	r23, 0x05	; 5
    4d20:	0e 94 5f 20 	call	0x40be	; 0x40be <SetAngleOfServo>
    4d24:	80 e0       	ldi	r24, 0x00	; 0
    4d26:	90 e0       	ldi	r25, 0x00	; 0
    4d28:	aa ef       	ldi	r26, 0xFA	; 250
    4d2a:	b3 e4       	ldi	r27, 0x43	; 67
    4d2c:	8f a3       	std	Y+39, r24	; 0x27
    4d2e:	98 a7       	std	Y+40, r25	; 0x28
    4d30:	a9 a7       	std	Y+41, r26	; 0x29
    4d32:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d34:	6f a1       	ldd	r22, Y+39	; 0x27
    4d36:	78 a5       	ldd	r23, Y+40	; 0x28
    4d38:	89 a5       	ldd	r24, Y+41	; 0x29
    4d3a:	9a a5       	ldd	r25, Y+42	; 0x2a
    4d3c:	20 e0       	ldi	r18, 0x00	; 0
    4d3e:	30 e0       	ldi	r19, 0x00	; 0
    4d40:	4a ef       	ldi	r20, 0xFA	; 250
    4d42:	54 e4       	ldi	r21, 0x44	; 68
    4d44:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    4d48:	dc 01       	movw	r26, r24
    4d4a:	cb 01       	movw	r24, r22
    4d4c:	8b a3       	std	Y+35, r24	; 0x23
    4d4e:	9c a3       	std	Y+36, r25	; 0x24
    4d50:	ad a3       	std	Y+37, r26	; 0x25
    4d52:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4d54:	6b a1       	ldd	r22, Y+35	; 0x23
    4d56:	7c a1       	ldd	r23, Y+36	; 0x24
    4d58:	8d a1       	ldd	r24, Y+37	; 0x25
    4d5a:	9e a1       	ldd	r25, Y+38	; 0x26
    4d5c:	20 e0       	ldi	r18, 0x00	; 0
    4d5e:	30 e0       	ldi	r19, 0x00	; 0
    4d60:	40 e8       	ldi	r20, 0x80	; 128
    4d62:	5f e3       	ldi	r21, 0x3F	; 63
    4d64:	0e 94 80 05 	call	0xb00	; 0xb00 <__ltsf2>
    4d68:	88 23       	and	r24, r24
    4d6a:	2c f4       	brge	.+10     	; 0x4d76 <UltraSonicRightAction+0x72>
		__ticks = 1;
    4d6c:	81 e0       	ldi	r24, 0x01	; 1
    4d6e:	90 e0       	ldi	r25, 0x00	; 0
    4d70:	9a a3       	std	Y+34, r25	; 0x22
    4d72:	89 a3       	std	Y+33, r24	; 0x21
    4d74:	3f c0       	rjmp	.+126    	; 0x4df4 <UltraSonicRightAction+0xf0>
	else if (__tmp > 65535)
    4d76:	6b a1       	ldd	r22, Y+35	; 0x23
    4d78:	7c a1       	ldd	r23, Y+36	; 0x24
    4d7a:	8d a1       	ldd	r24, Y+37	; 0x25
    4d7c:	9e a1       	ldd	r25, Y+38	; 0x26
    4d7e:	20 e0       	ldi	r18, 0x00	; 0
    4d80:	3f ef       	ldi	r19, 0xFF	; 255
    4d82:	4f e7       	ldi	r20, 0x7F	; 127
    4d84:	57 e4       	ldi	r21, 0x47	; 71
    4d86:	0e 94 20 05 	call	0xa40	; 0xa40 <__gtsf2>
    4d8a:	18 16       	cp	r1, r24
    4d8c:	4c f5       	brge	.+82     	; 0x4de0 <UltraSonicRightAction+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d8e:	6f a1       	ldd	r22, Y+39	; 0x27
    4d90:	78 a5       	ldd	r23, Y+40	; 0x28
    4d92:	89 a5       	ldd	r24, Y+41	; 0x29
    4d94:	9a a5       	ldd	r25, Y+42	; 0x2a
    4d96:	20 e0       	ldi	r18, 0x00	; 0
    4d98:	30 e0       	ldi	r19, 0x00	; 0
    4d9a:	40 e2       	ldi	r20, 0x20	; 32
    4d9c:	51 e4       	ldi	r21, 0x41	; 65
    4d9e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    4da2:	dc 01       	movw	r26, r24
    4da4:	cb 01       	movw	r24, r22
    4da6:	bc 01       	movw	r22, r24
    4da8:	cd 01       	movw	r24, r26
    4daa:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4dae:	dc 01       	movw	r26, r24
    4db0:	cb 01       	movw	r24, r22
    4db2:	9a a3       	std	Y+34, r25	; 0x22
    4db4:	89 a3       	std	Y+33, r24	; 0x21
    4db6:	0f c0       	rjmp	.+30     	; 0x4dd6 <UltraSonicRightAction+0xd2>
    4db8:	88 ec       	ldi	r24, 0xC8	; 200
    4dba:	90 e0       	ldi	r25, 0x00	; 0
    4dbc:	98 a3       	std	Y+32, r25	; 0x20
    4dbe:	8f 8f       	std	Y+31, r24	; 0x1f
    4dc0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4dc2:	98 a1       	ldd	r25, Y+32	; 0x20
    4dc4:	01 97       	sbiw	r24, 0x01	; 1
    4dc6:	f1 f7       	brne	.-4      	; 0x4dc4 <UltraSonicRightAction+0xc0>
    4dc8:	98 a3       	std	Y+32, r25	; 0x20
    4dca:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4dcc:	89 a1       	ldd	r24, Y+33	; 0x21
    4dce:	9a a1       	ldd	r25, Y+34	; 0x22
    4dd0:	01 97       	sbiw	r24, 0x01	; 1
    4dd2:	9a a3       	std	Y+34, r25	; 0x22
    4dd4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4dd6:	89 a1       	ldd	r24, Y+33	; 0x21
    4dd8:	9a a1       	ldd	r25, Y+34	; 0x22
    4dda:	00 97       	sbiw	r24, 0x00	; 0
    4ddc:	69 f7       	brne	.-38     	; 0x4db8 <UltraSonicRightAction+0xb4>
    4dde:	14 c0       	rjmp	.+40     	; 0x4e08 <UltraSonicRightAction+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4de0:	6b a1       	ldd	r22, Y+35	; 0x23
    4de2:	7c a1       	ldd	r23, Y+36	; 0x24
    4de4:	8d a1       	ldd	r24, Y+37	; 0x25
    4de6:	9e a1       	ldd	r25, Y+38	; 0x26
    4de8:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4dec:	dc 01       	movw	r26, r24
    4dee:	cb 01       	movw	r24, r22
    4df0:	9a a3       	std	Y+34, r25	; 0x22
    4df2:	89 a3       	std	Y+33, r24	; 0x21
    4df4:	89 a1       	ldd	r24, Y+33	; 0x21
    4df6:	9a a1       	ldd	r25, Y+34	; 0x22
    4df8:	9e 8f       	std	Y+30, r25	; 0x1e
    4dfa:	8d 8f       	std	Y+29, r24	; 0x1d
    4dfc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4dfe:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4e00:	01 97       	sbiw	r24, 0x01	; 1
    4e02:	f1 f7       	brne	.-4      	; 0x4e00 <UltraSonicRightAction+0xfc>
    4e04:	9e 8f       	std	Y+30, r25	; 0x1e
    4e06:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(500); /* to notice the movement of servo */

	/* to go back and turn Right direction */
	DcMotor_VidRotate_Wheels1(CLK_WISE);
    4e08:	81 e0       	ldi	r24, 0x01	; 1
    4e0a:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <DcMotor_VidRotate_Wheels1>
	DcMotor_VidRotate_Wheels2(CLK_WISE);
    4e0e:	81 e0       	ldi	r24, 0x01	; 1
    4e10:	0e 94 c4 1f 	call	0x3f88	; 0x3f88 <DcMotor_VidRotate_Wheels2>
    4e14:	80 e0       	ldi	r24, 0x00	; 0
    4e16:	90 e0       	ldi	r25, 0x00	; 0
    4e18:	a8 e4       	ldi	r26, 0x48	; 72
    4e1a:	b3 e4       	ldi	r27, 0x43	; 67
    4e1c:	89 8f       	std	Y+25, r24	; 0x19
    4e1e:	9a 8f       	std	Y+26, r25	; 0x1a
    4e20:	ab 8f       	std	Y+27, r26	; 0x1b
    4e22:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e24:	69 8d       	ldd	r22, Y+25	; 0x19
    4e26:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4e28:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4e2a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4e2c:	20 e0       	ldi	r18, 0x00	; 0
    4e2e:	30 e0       	ldi	r19, 0x00	; 0
    4e30:	4a ef       	ldi	r20, 0xFA	; 250
    4e32:	54 e4       	ldi	r21, 0x44	; 68
    4e34:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    4e38:	dc 01       	movw	r26, r24
    4e3a:	cb 01       	movw	r24, r22
    4e3c:	8d 8b       	std	Y+21, r24	; 0x15
    4e3e:	9e 8b       	std	Y+22, r25	; 0x16
    4e40:	af 8b       	std	Y+23, r26	; 0x17
    4e42:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4e44:	6d 89       	ldd	r22, Y+21	; 0x15
    4e46:	7e 89       	ldd	r23, Y+22	; 0x16
    4e48:	8f 89       	ldd	r24, Y+23	; 0x17
    4e4a:	98 8d       	ldd	r25, Y+24	; 0x18
    4e4c:	20 e0       	ldi	r18, 0x00	; 0
    4e4e:	30 e0       	ldi	r19, 0x00	; 0
    4e50:	40 e8       	ldi	r20, 0x80	; 128
    4e52:	5f e3       	ldi	r21, 0x3F	; 63
    4e54:	0e 94 80 05 	call	0xb00	; 0xb00 <__ltsf2>
    4e58:	88 23       	and	r24, r24
    4e5a:	2c f4       	brge	.+10     	; 0x4e66 <UltraSonicRightAction+0x162>
		__ticks = 1;
    4e5c:	81 e0       	ldi	r24, 0x01	; 1
    4e5e:	90 e0       	ldi	r25, 0x00	; 0
    4e60:	9c 8b       	std	Y+20, r25	; 0x14
    4e62:	8b 8b       	std	Y+19, r24	; 0x13
    4e64:	3f c0       	rjmp	.+126    	; 0x4ee4 <UltraSonicRightAction+0x1e0>
	else if (__tmp > 65535)
    4e66:	6d 89       	ldd	r22, Y+21	; 0x15
    4e68:	7e 89       	ldd	r23, Y+22	; 0x16
    4e6a:	8f 89       	ldd	r24, Y+23	; 0x17
    4e6c:	98 8d       	ldd	r25, Y+24	; 0x18
    4e6e:	20 e0       	ldi	r18, 0x00	; 0
    4e70:	3f ef       	ldi	r19, 0xFF	; 255
    4e72:	4f e7       	ldi	r20, 0x7F	; 127
    4e74:	57 e4       	ldi	r21, 0x47	; 71
    4e76:	0e 94 20 05 	call	0xa40	; 0xa40 <__gtsf2>
    4e7a:	18 16       	cp	r1, r24
    4e7c:	4c f5       	brge	.+82     	; 0x4ed0 <UltraSonicRightAction+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e7e:	69 8d       	ldd	r22, Y+25	; 0x19
    4e80:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4e82:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4e84:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4e86:	20 e0       	ldi	r18, 0x00	; 0
    4e88:	30 e0       	ldi	r19, 0x00	; 0
    4e8a:	40 e2       	ldi	r20, 0x20	; 32
    4e8c:	51 e4       	ldi	r21, 0x41	; 65
    4e8e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    4e92:	dc 01       	movw	r26, r24
    4e94:	cb 01       	movw	r24, r22
    4e96:	bc 01       	movw	r22, r24
    4e98:	cd 01       	movw	r24, r26
    4e9a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4e9e:	dc 01       	movw	r26, r24
    4ea0:	cb 01       	movw	r24, r22
    4ea2:	9c 8b       	std	Y+20, r25	; 0x14
    4ea4:	8b 8b       	std	Y+19, r24	; 0x13
    4ea6:	0f c0       	rjmp	.+30     	; 0x4ec6 <UltraSonicRightAction+0x1c2>
    4ea8:	88 ec       	ldi	r24, 0xC8	; 200
    4eaa:	90 e0       	ldi	r25, 0x00	; 0
    4eac:	9a 8b       	std	Y+18, r25	; 0x12
    4eae:	89 8b       	std	Y+17, r24	; 0x11
    4eb0:	89 89       	ldd	r24, Y+17	; 0x11
    4eb2:	9a 89       	ldd	r25, Y+18	; 0x12
    4eb4:	01 97       	sbiw	r24, 0x01	; 1
    4eb6:	f1 f7       	brne	.-4      	; 0x4eb4 <UltraSonicRightAction+0x1b0>
    4eb8:	9a 8b       	std	Y+18, r25	; 0x12
    4eba:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ebc:	8b 89       	ldd	r24, Y+19	; 0x13
    4ebe:	9c 89       	ldd	r25, Y+20	; 0x14
    4ec0:	01 97       	sbiw	r24, 0x01	; 1
    4ec2:	9c 8b       	std	Y+20, r25	; 0x14
    4ec4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ec6:	8b 89       	ldd	r24, Y+19	; 0x13
    4ec8:	9c 89       	ldd	r25, Y+20	; 0x14
    4eca:	00 97       	sbiw	r24, 0x00	; 0
    4ecc:	69 f7       	brne	.-38     	; 0x4ea8 <UltraSonicRightAction+0x1a4>
    4ece:	14 c0       	rjmp	.+40     	; 0x4ef8 <UltraSonicRightAction+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ed0:	6d 89       	ldd	r22, Y+21	; 0x15
    4ed2:	7e 89       	ldd	r23, Y+22	; 0x16
    4ed4:	8f 89       	ldd	r24, Y+23	; 0x17
    4ed6:	98 8d       	ldd	r25, Y+24	; 0x18
    4ed8:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4edc:	dc 01       	movw	r26, r24
    4ede:	cb 01       	movw	r24, r22
    4ee0:	9c 8b       	std	Y+20, r25	; 0x14
    4ee2:	8b 8b       	std	Y+19, r24	; 0x13
    4ee4:	8b 89       	ldd	r24, Y+19	; 0x13
    4ee6:	9c 89       	ldd	r25, Y+20	; 0x14
    4ee8:	98 8b       	std	Y+16, r25	; 0x10
    4eea:	8f 87       	std	Y+15, r24	; 0x0f
    4eec:	8f 85       	ldd	r24, Y+15	; 0x0f
    4eee:	98 89       	ldd	r25, Y+16	; 0x10
    4ef0:	01 97       	sbiw	r24, 0x01	; 1
    4ef2:	f1 f7       	brne	.-4      	; 0x4ef0 <UltraSonicRightAction+0x1ec>
    4ef4:	98 8b       	std	Y+16, r25	; 0x10
    4ef6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(200);
	Timer2_VidSETDUTY(THREE_QUARTER_PERCENTAGE);
    4ef8:	8b e4       	ldi	r24, 0x4B	; 75
    4efa:	0e 94 b8 1c 	call	0x3970	; 0x3970 <Timer2_VidSETDUTY>
	DcMotor_VidRotate_Wheels1(STOP);
    4efe:	80 e0       	ldi	r24, 0x00	; 0
    4f00:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <DcMotor_VidRotate_Wheels1>
	DcMotor_VidRotate_Wheels2(CLK_WISE);
    4f04:	81 e0       	ldi	r24, 0x01	; 1
    4f06:	0e 94 c4 1f 	call	0x3f88	; 0x3f88 <DcMotor_VidRotate_Wheels2>
    4f0a:	80 e0       	ldi	r24, 0x00	; 0
    4f0c:	90 e0       	ldi	r25, 0x00	; 0
    4f0e:	a8 ec       	ldi	r26, 0xC8	; 200
    4f10:	b3 e4       	ldi	r27, 0x43	; 67
    4f12:	8b 87       	std	Y+11, r24	; 0x0b
    4f14:	9c 87       	std	Y+12, r25	; 0x0c
    4f16:	ad 87       	std	Y+13, r26	; 0x0d
    4f18:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    4f1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    4f1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f20:	9e 85       	ldd	r25, Y+14	; 0x0e
    4f22:	20 e0       	ldi	r18, 0x00	; 0
    4f24:	30 e0       	ldi	r19, 0x00	; 0
    4f26:	4a ef       	ldi	r20, 0xFA	; 250
    4f28:	54 e4       	ldi	r21, 0x44	; 68
    4f2a:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    4f2e:	dc 01       	movw	r26, r24
    4f30:	cb 01       	movw	r24, r22
    4f32:	8f 83       	std	Y+7, r24	; 0x07
    4f34:	98 87       	std	Y+8, r25	; 0x08
    4f36:	a9 87       	std	Y+9, r26	; 0x09
    4f38:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4f3a:	6f 81       	ldd	r22, Y+7	; 0x07
    4f3c:	78 85       	ldd	r23, Y+8	; 0x08
    4f3e:	89 85       	ldd	r24, Y+9	; 0x09
    4f40:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f42:	20 e0       	ldi	r18, 0x00	; 0
    4f44:	30 e0       	ldi	r19, 0x00	; 0
    4f46:	40 e8       	ldi	r20, 0x80	; 128
    4f48:	5f e3       	ldi	r21, 0x3F	; 63
    4f4a:	0e 94 80 05 	call	0xb00	; 0xb00 <__ltsf2>
    4f4e:	88 23       	and	r24, r24
    4f50:	2c f4       	brge	.+10     	; 0x4f5c <UltraSonicRightAction+0x258>
		__ticks = 1;
    4f52:	81 e0       	ldi	r24, 0x01	; 1
    4f54:	90 e0       	ldi	r25, 0x00	; 0
    4f56:	9e 83       	std	Y+6, r25	; 0x06
    4f58:	8d 83       	std	Y+5, r24	; 0x05
    4f5a:	3f c0       	rjmp	.+126    	; 0x4fda <UltraSonicRightAction+0x2d6>
	else if (__tmp > 65535)
    4f5c:	6f 81       	ldd	r22, Y+7	; 0x07
    4f5e:	78 85       	ldd	r23, Y+8	; 0x08
    4f60:	89 85       	ldd	r24, Y+9	; 0x09
    4f62:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f64:	20 e0       	ldi	r18, 0x00	; 0
    4f66:	3f ef       	ldi	r19, 0xFF	; 255
    4f68:	4f e7       	ldi	r20, 0x7F	; 127
    4f6a:	57 e4       	ldi	r21, 0x47	; 71
    4f6c:	0e 94 20 05 	call	0xa40	; 0xa40 <__gtsf2>
    4f70:	18 16       	cp	r1, r24
    4f72:	4c f5       	brge	.+82     	; 0x4fc6 <UltraSonicRightAction+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f74:	6b 85       	ldd	r22, Y+11	; 0x0b
    4f76:	7c 85       	ldd	r23, Y+12	; 0x0c
    4f78:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    4f7c:	20 e0       	ldi	r18, 0x00	; 0
    4f7e:	30 e0       	ldi	r19, 0x00	; 0
    4f80:	40 e2       	ldi	r20, 0x20	; 32
    4f82:	51 e4       	ldi	r21, 0x41	; 65
    4f84:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    4f88:	dc 01       	movw	r26, r24
    4f8a:	cb 01       	movw	r24, r22
    4f8c:	bc 01       	movw	r22, r24
    4f8e:	cd 01       	movw	r24, r26
    4f90:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4f94:	dc 01       	movw	r26, r24
    4f96:	cb 01       	movw	r24, r22
    4f98:	9e 83       	std	Y+6, r25	; 0x06
    4f9a:	8d 83       	std	Y+5, r24	; 0x05
    4f9c:	0f c0       	rjmp	.+30     	; 0x4fbc <UltraSonicRightAction+0x2b8>
    4f9e:	88 ec       	ldi	r24, 0xC8	; 200
    4fa0:	90 e0       	ldi	r25, 0x00	; 0
    4fa2:	9c 83       	std	Y+4, r25	; 0x04
    4fa4:	8b 83       	std	Y+3, r24	; 0x03
    4fa6:	8b 81       	ldd	r24, Y+3	; 0x03
    4fa8:	9c 81       	ldd	r25, Y+4	; 0x04
    4faa:	01 97       	sbiw	r24, 0x01	; 1
    4fac:	f1 f7       	brne	.-4      	; 0x4faa <UltraSonicRightAction+0x2a6>
    4fae:	9c 83       	std	Y+4, r25	; 0x04
    4fb0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4fb2:	8d 81       	ldd	r24, Y+5	; 0x05
    4fb4:	9e 81       	ldd	r25, Y+6	; 0x06
    4fb6:	01 97       	sbiw	r24, 0x01	; 1
    4fb8:	9e 83       	std	Y+6, r25	; 0x06
    4fba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4fbc:	8d 81       	ldd	r24, Y+5	; 0x05
    4fbe:	9e 81       	ldd	r25, Y+6	; 0x06
    4fc0:	00 97       	sbiw	r24, 0x00	; 0
    4fc2:	69 f7       	brne	.-38     	; 0x4f9e <UltraSonicRightAction+0x29a>
    4fc4:	14 c0       	rjmp	.+40     	; 0x4fee <UltraSonicRightAction+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4fc6:	6f 81       	ldd	r22, Y+7	; 0x07
    4fc8:	78 85       	ldd	r23, Y+8	; 0x08
    4fca:	89 85       	ldd	r24, Y+9	; 0x09
    4fcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    4fce:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4fd2:	dc 01       	movw	r26, r24
    4fd4:	cb 01       	movw	r24, r22
    4fd6:	9e 83       	std	Y+6, r25	; 0x06
    4fd8:	8d 83       	std	Y+5, r24	; 0x05
    4fda:	8d 81       	ldd	r24, Y+5	; 0x05
    4fdc:	9e 81       	ldd	r25, Y+6	; 0x06
    4fde:	9a 83       	std	Y+2, r25	; 0x02
    4fe0:	89 83       	std	Y+1, r24	; 0x01
    4fe2:	89 81       	ldd	r24, Y+1	; 0x01
    4fe4:	9a 81       	ldd	r25, Y+2	; 0x02
    4fe6:	01 97       	sbiw	r24, 0x01	; 1
    4fe8:	f1 f7       	brne	.-4      	; 0x4fe6 <UltraSonicRightAction+0x2e2>
    4fea:	9a 83       	std	Y+2, r25	; 0x02
    4fec:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(400);
	DcMotor_VidRotate_Wheels1(STOP);
    4fee:	80 e0       	ldi	r24, 0x00	; 0
    4ff0:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <DcMotor_VidRotate_Wheels1>
	DcMotor_VidRotate_Wheels2(STOP);
    4ff4:	80 e0       	ldi	r24, 0x00	; 0
    4ff6:	0e 94 c4 1f 	call	0x3f88	; 0x3f88 <DcMotor_VidRotate_Wheels2>
}
    4ffa:	aa 96       	adiw	r28, 0x2a	; 42
    4ffc:	0f b6       	in	r0, 0x3f	; 63
    4ffe:	f8 94       	cli
    5000:	de bf       	out	0x3e, r29	; 62
    5002:	0f be       	out	0x3f, r0	; 63
    5004:	cd bf       	out	0x3d, r28	; 61
    5006:	cf 91       	pop	r28
    5008:	df 91       	pop	r29
    500a:	08 95       	ret

0000500c <UltraSonicLeftAction>:
 Name        : UltraSonicLeftAction
 Input       : void
 Output      : void
 Description : if the opposit is blocked go right at second option
*/
void UltraSonicLeftAction () {
    500c:	df 93       	push	r29
    500e:	cf 93       	push	r28
    5010:	cd b7       	in	r28, 0x3d	; 61
    5012:	de b7       	in	r29, 0x3e	; 62
    5014:	aa 97       	sbiw	r28, 0x2a	; 42
    5016:	0f b6       	in	r0, 0x3f	; 63
    5018:	f8 94       	cli
    501a:	de bf       	out	0x3e, r29	; 62
    501c:	0f be       	out	0x3f, r0	; 63
    501e:	cd bf       	out	0x3d, r28	; 61
	SetAngleOfServo(ANGLE_POSITIVE90,ANGLE_ZERO);
    5020:	80 e6       	ldi	r24, 0x60	; 96
    5022:	99 e0       	ldi	r25, 0x09	; 9
    5024:	6c ed       	ldi	r22, 0xDC	; 220
    5026:	75 e0       	ldi	r23, 0x05	; 5
    5028:	0e 94 5f 20 	call	0x40be	; 0x40be <SetAngleOfServo>
    502c:	80 e0       	ldi	r24, 0x00	; 0
    502e:	90 e0       	ldi	r25, 0x00	; 0
    5030:	aa ef       	ldi	r26, 0xFA	; 250
    5032:	b3 e4       	ldi	r27, 0x43	; 67
    5034:	8f a3       	std	Y+39, r24	; 0x27
    5036:	98 a7       	std	Y+40, r25	; 0x28
    5038:	a9 a7       	std	Y+41, r26	; 0x29
    503a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    503c:	6f a1       	ldd	r22, Y+39	; 0x27
    503e:	78 a5       	ldd	r23, Y+40	; 0x28
    5040:	89 a5       	ldd	r24, Y+41	; 0x29
    5042:	9a a5       	ldd	r25, Y+42	; 0x2a
    5044:	20 e0       	ldi	r18, 0x00	; 0
    5046:	30 e0       	ldi	r19, 0x00	; 0
    5048:	4a ef       	ldi	r20, 0xFA	; 250
    504a:	54 e4       	ldi	r21, 0x44	; 68
    504c:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    5050:	dc 01       	movw	r26, r24
    5052:	cb 01       	movw	r24, r22
    5054:	8b a3       	std	Y+35, r24	; 0x23
    5056:	9c a3       	std	Y+36, r25	; 0x24
    5058:	ad a3       	std	Y+37, r26	; 0x25
    505a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    505c:	6b a1       	ldd	r22, Y+35	; 0x23
    505e:	7c a1       	ldd	r23, Y+36	; 0x24
    5060:	8d a1       	ldd	r24, Y+37	; 0x25
    5062:	9e a1       	ldd	r25, Y+38	; 0x26
    5064:	20 e0       	ldi	r18, 0x00	; 0
    5066:	30 e0       	ldi	r19, 0x00	; 0
    5068:	40 e8       	ldi	r20, 0x80	; 128
    506a:	5f e3       	ldi	r21, 0x3F	; 63
    506c:	0e 94 80 05 	call	0xb00	; 0xb00 <__ltsf2>
    5070:	88 23       	and	r24, r24
    5072:	2c f4       	brge	.+10     	; 0x507e <UltraSonicLeftAction+0x72>
		__ticks = 1;
    5074:	81 e0       	ldi	r24, 0x01	; 1
    5076:	90 e0       	ldi	r25, 0x00	; 0
    5078:	9a a3       	std	Y+34, r25	; 0x22
    507a:	89 a3       	std	Y+33, r24	; 0x21
    507c:	3f c0       	rjmp	.+126    	; 0x50fc <UltraSonicLeftAction+0xf0>
	else if (__tmp > 65535)
    507e:	6b a1       	ldd	r22, Y+35	; 0x23
    5080:	7c a1       	ldd	r23, Y+36	; 0x24
    5082:	8d a1       	ldd	r24, Y+37	; 0x25
    5084:	9e a1       	ldd	r25, Y+38	; 0x26
    5086:	20 e0       	ldi	r18, 0x00	; 0
    5088:	3f ef       	ldi	r19, 0xFF	; 255
    508a:	4f e7       	ldi	r20, 0x7F	; 127
    508c:	57 e4       	ldi	r21, 0x47	; 71
    508e:	0e 94 20 05 	call	0xa40	; 0xa40 <__gtsf2>
    5092:	18 16       	cp	r1, r24
    5094:	4c f5       	brge	.+82     	; 0x50e8 <UltraSonicLeftAction+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5096:	6f a1       	ldd	r22, Y+39	; 0x27
    5098:	78 a5       	ldd	r23, Y+40	; 0x28
    509a:	89 a5       	ldd	r24, Y+41	; 0x29
    509c:	9a a5       	ldd	r25, Y+42	; 0x2a
    509e:	20 e0       	ldi	r18, 0x00	; 0
    50a0:	30 e0       	ldi	r19, 0x00	; 0
    50a2:	40 e2       	ldi	r20, 0x20	; 32
    50a4:	51 e4       	ldi	r21, 0x41	; 65
    50a6:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    50aa:	dc 01       	movw	r26, r24
    50ac:	cb 01       	movw	r24, r22
    50ae:	bc 01       	movw	r22, r24
    50b0:	cd 01       	movw	r24, r26
    50b2:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    50b6:	dc 01       	movw	r26, r24
    50b8:	cb 01       	movw	r24, r22
    50ba:	9a a3       	std	Y+34, r25	; 0x22
    50bc:	89 a3       	std	Y+33, r24	; 0x21
    50be:	0f c0       	rjmp	.+30     	; 0x50de <UltraSonicLeftAction+0xd2>
    50c0:	88 ec       	ldi	r24, 0xC8	; 200
    50c2:	90 e0       	ldi	r25, 0x00	; 0
    50c4:	98 a3       	std	Y+32, r25	; 0x20
    50c6:	8f 8f       	std	Y+31, r24	; 0x1f
    50c8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    50ca:	98 a1       	ldd	r25, Y+32	; 0x20
    50cc:	01 97       	sbiw	r24, 0x01	; 1
    50ce:	f1 f7       	brne	.-4      	; 0x50cc <UltraSonicLeftAction+0xc0>
    50d0:	98 a3       	std	Y+32, r25	; 0x20
    50d2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    50d4:	89 a1       	ldd	r24, Y+33	; 0x21
    50d6:	9a a1       	ldd	r25, Y+34	; 0x22
    50d8:	01 97       	sbiw	r24, 0x01	; 1
    50da:	9a a3       	std	Y+34, r25	; 0x22
    50dc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    50de:	89 a1       	ldd	r24, Y+33	; 0x21
    50e0:	9a a1       	ldd	r25, Y+34	; 0x22
    50e2:	00 97       	sbiw	r24, 0x00	; 0
    50e4:	69 f7       	brne	.-38     	; 0x50c0 <UltraSonicLeftAction+0xb4>
    50e6:	14 c0       	rjmp	.+40     	; 0x5110 <UltraSonicLeftAction+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    50e8:	6b a1       	ldd	r22, Y+35	; 0x23
    50ea:	7c a1       	ldd	r23, Y+36	; 0x24
    50ec:	8d a1       	ldd	r24, Y+37	; 0x25
    50ee:	9e a1       	ldd	r25, Y+38	; 0x26
    50f0:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    50f4:	dc 01       	movw	r26, r24
    50f6:	cb 01       	movw	r24, r22
    50f8:	9a a3       	std	Y+34, r25	; 0x22
    50fa:	89 a3       	std	Y+33, r24	; 0x21
    50fc:	89 a1       	ldd	r24, Y+33	; 0x21
    50fe:	9a a1       	ldd	r25, Y+34	; 0x22
    5100:	9e 8f       	std	Y+30, r25	; 0x1e
    5102:	8d 8f       	std	Y+29, r24	; 0x1d
    5104:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5106:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5108:	01 97       	sbiw	r24, 0x01	; 1
    510a:	f1 f7       	brne	.-4      	; 0x5108 <UltraSonicLeftAction+0xfc>
    510c:	9e 8f       	std	Y+30, r25	; 0x1e
    510e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(500); /* to notice the movement of servo */

	/* to go back and turn left direction */
	DcMotor_VidRotate_Wheels1(CLK_WISE);
    5110:	81 e0       	ldi	r24, 0x01	; 1
    5112:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <DcMotor_VidRotate_Wheels1>
	DcMotor_VidRotate_Wheels2(CLK_WISE);
    5116:	81 e0       	ldi	r24, 0x01	; 1
    5118:	0e 94 c4 1f 	call	0x3f88	; 0x3f88 <DcMotor_VidRotate_Wheels2>
    511c:	80 e0       	ldi	r24, 0x00	; 0
    511e:	90 e0       	ldi	r25, 0x00	; 0
    5120:	a8 e4       	ldi	r26, 0x48	; 72
    5122:	b3 e4       	ldi	r27, 0x43	; 67
    5124:	89 8f       	std	Y+25, r24	; 0x19
    5126:	9a 8f       	std	Y+26, r25	; 0x1a
    5128:	ab 8f       	std	Y+27, r26	; 0x1b
    512a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    512c:	69 8d       	ldd	r22, Y+25	; 0x19
    512e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5130:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5132:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5134:	20 e0       	ldi	r18, 0x00	; 0
    5136:	30 e0       	ldi	r19, 0x00	; 0
    5138:	4a ef       	ldi	r20, 0xFA	; 250
    513a:	54 e4       	ldi	r21, 0x44	; 68
    513c:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    5140:	dc 01       	movw	r26, r24
    5142:	cb 01       	movw	r24, r22
    5144:	8d 8b       	std	Y+21, r24	; 0x15
    5146:	9e 8b       	std	Y+22, r25	; 0x16
    5148:	af 8b       	std	Y+23, r26	; 0x17
    514a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    514c:	6d 89       	ldd	r22, Y+21	; 0x15
    514e:	7e 89       	ldd	r23, Y+22	; 0x16
    5150:	8f 89       	ldd	r24, Y+23	; 0x17
    5152:	98 8d       	ldd	r25, Y+24	; 0x18
    5154:	20 e0       	ldi	r18, 0x00	; 0
    5156:	30 e0       	ldi	r19, 0x00	; 0
    5158:	40 e8       	ldi	r20, 0x80	; 128
    515a:	5f e3       	ldi	r21, 0x3F	; 63
    515c:	0e 94 80 05 	call	0xb00	; 0xb00 <__ltsf2>
    5160:	88 23       	and	r24, r24
    5162:	2c f4       	brge	.+10     	; 0x516e <UltraSonicLeftAction+0x162>
		__ticks = 1;
    5164:	81 e0       	ldi	r24, 0x01	; 1
    5166:	90 e0       	ldi	r25, 0x00	; 0
    5168:	9c 8b       	std	Y+20, r25	; 0x14
    516a:	8b 8b       	std	Y+19, r24	; 0x13
    516c:	3f c0       	rjmp	.+126    	; 0x51ec <UltraSonicLeftAction+0x1e0>
	else if (__tmp > 65535)
    516e:	6d 89       	ldd	r22, Y+21	; 0x15
    5170:	7e 89       	ldd	r23, Y+22	; 0x16
    5172:	8f 89       	ldd	r24, Y+23	; 0x17
    5174:	98 8d       	ldd	r25, Y+24	; 0x18
    5176:	20 e0       	ldi	r18, 0x00	; 0
    5178:	3f ef       	ldi	r19, 0xFF	; 255
    517a:	4f e7       	ldi	r20, 0x7F	; 127
    517c:	57 e4       	ldi	r21, 0x47	; 71
    517e:	0e 94 20 05 	call	0xa40	; 0xa40 <__gtsf2>
    5182:	18 16       	cp	r1, r24
    5184:	4c f5       	brge	.+82     	; 0x51d8 <UltraSonicLeftAction+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5186:	69 8d       	ldd	r22, Y+25	; 0x19
    5188:	7a 8d       	ldd	r23, Y+26	; 0x1a
    518a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    518c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    518e:	20 e0       	ldi	r18, 0x00	; 0
    5190:	30 e0       	ldi	r19, 0x00	; 0
    5192:	40 e2       	ldi	r20, 0x20	; 32
    5194:	51 e4       	ldi	r21, 0x41	; 65
    5196:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    519a:	dc 01       	movw	r26, r24
    519c:	cb 01       	movw	r24, r22
    519e:	bc 01       	movw	r22, r24
    51a0:	cd 01       	movw	r24, r26
    51a2:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    51a6:	dc 01       	movw	r26, r24
    51a8:	cb 01       	movw	r24, r22
    51aa:	9c 8b       	std	Y+20, r25	; 0x14
    51ac:	8b 8b       	std	Y+19, r24	; 0x13
    51ae:	0f c0       	rjmp	.+30     	; 0x51ce <UltraSonicLeftAction+0x1c2>
    51b0:	88 ec       	ldi	r24, 0xC8	; 200
    51b2:	90 e0       	ldi	r25, 0x00	; 0
    51b4:	9a 8b       	std	Y+18, r25	; 0x12
    51b6:	89 8b       	std	Y+17, r24	; 0x11
    51b8:	89 89       	ldd	r24, Y+17	; 0x11
    51ba:	9a 89       	ldd	r25, Y+18	; 0x12
    51bc:	01 97       	sbiw	r24, 0x01	; 1
    51be:	f1 f7       	brne	.-4      	; 0x51bc <UltraSonicLeftAction+0x1b0>
    51c0:	9a 8b       	std	Y+18, r25	; 0x12
    51c2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    51c4:	8b 89       	ldd	r24, Y+19	; 0x13
    51c6:	9c 89       	ldd	r25, Y+20	; 0x14
    51c8:	01 97       	sbiw	r24, 0x01	; 1
    51ca:	9c 8b       	std	Y+20, r25	; 0x14
    51cc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    51ce:	8b 89       	ldd	r24, Y+19	; 0x13
    51d0:	9c 89       	ldd	r25, Y+20	; 0x14
    51d2:	00 97       	sbiw	r24, 0x00	; 0
    51d4:	69 f7       	brne	.-38     	; 0x51b0 <UltraSonicLeftAction+0x1a4>
    51d6:	14 c0       	rjmp	.+40     	; 0x5200 <UltraSonicLeftAction+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    51d8:	6d 89       	ldd	r22, Y+21	; 0x15
    51da:	7e 89       	ldd	r23, Y+22	; 0x16
    51dc:	8f 89       	ldd	r24, Y+23	; 0x17
    51de:	98 8d       	ldd	r25, Y+24	; 0x18
    51e0:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    51e4:	dc 01       	movw	r26, r24
    51e6:	cb 01       	movw	r24, r22
    51e8:	9c 8b       	std	Y+20, r25	; 0x14
    51ea:	8b 8b       	std	Y+19, r24	; 0x13
    51ec:	8b 89       	ldd	r24, Y+19	; 0x13
    51ee:	9c 89       	ldd	r25, Y+20	; 0x14
    51f0:	98 8b       	std	Y+16, r25	; 0x10
    51f2:	8f 87       	std	Y+15, r24	; 0x0f
    51f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    51f6:	98 89       	ldd	r25, Y+16	; 0x10
    51f8:	01 97       	sbiw	r24, 0x01	; 1
    51fa:	f1 f7       	brne	.-4      	; 0x51f8 <UltraSonicLeftAction+0x1ec>
    51fc:	98 8b       	std	Y+16, r25	; 0x10
    51fe:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(200);
	Timer2_VidSETDUTY(THREE_QUARTER_PERCENTAGE);
    5200:	8b e4       	ldi	r24, 0x4B	; 75
    5202:	0e 94 b8 1c 	call	0x3970	; 0x3970 <Timer2_VidSETDUTY>
	DcMotor_VidRotate_Wheels1(CLK_WISE);
    5206:	81 e0       	ldi	r24, 0x01	; 1
    5208:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <DcMotor_VidRotate_Wheels1>
	DcMotor_VidRotate_Wheels2(STOP);
    520c:	80 e0       	ldi	r24, 0x00	; 0
    520e:	0e 94 c4 1f 	call	0x3f88	; 0x3f88 <DcMotor_VidRotate_Wheels2>
    5212:	80 e0       	ldi	r24, 0x00	; 0
    5214:	90 e0       	ldi	r25, 0x00	; 0
    5216:	a1 ee       	ldi	r26, 0xE1	; 225
    5218:	b3 e4       	ldi	r27, 0x43	; 67
    521a:	8b 87       	std	Y+11, r24	; 0x0b
    521c:	9c 87       	std	Y+12, r25	; 0x0c
    521e:	ad 87       	std	Y+13, r26	; 0x0d
    5220:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5222:	6b 85       	ldd	r22, Y+11	; 0x0b
    5224:	7c 85       	ldd	r23, Y+12	; 0x0c
    5226:	8d 85       	ldd	r24, Y+13	; 0x0d
    5228:	9e 85       	ldd	r25, Y+14	; 0x0e
    522a:	20 e0       	ldi	r18, 0x00	; 0
    522c:	30 e0       	ldi	r19, 0x00	; 0
    522e:	4a ef       	ldi	r20, 0xFA	; 250
    5230:	54 e4       	ldi	r21, 0x44	; 68
    5232:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    5236:	dc 01       	movw	r26, r24
    5238:	cb 01       	movw	r24, r22
    523a:	8f 83       	std	Y+7, r24	; 0x07
    523c:	98 87       	std	Y+8, r25	; 0x08
    523e:	a9 87       	std	Y+9, r26	; 0x09
    5240:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5242:	6f 81       	ldd	r22, Y+7	; 0x07
    5244:	78 85       	ldd	r23, Y+8	; 0x08
    5246:	89 85       	ldd	r24, Y+9	; 0x09
    5248:	9a 85       	ldd	r25, Y+10	; 0x0a
    524a:	20 e0       	ldi	r18, 0x00	; 0
    524c:	30 e0       	ldi	r19, 0x00	; 0
    524e:	40 e8       	ldi	r20, 0x80	; 128
    5250:	5f e3       	ldi	r21, 0x3F	; 63
    5252:	0e 94 80 05 	call	0xb00	; 0xb00 <__ltsf2>
    5256:	88 23       	and	r24, r24
    5258:	2c f4       	brge	.+10     	; 0x5264 <UltraSonicLeftAction+0x258>
		__ticks = 1;
    525a:	81 e0       	ldi	r24, 0x01	; 1
    525c:	90 e0       	ldi	r25, 0x00	; 0
    525e:	9e 83       	std	Y+6, r25	; 0x06
    5260:	8d 83       	std	Y+5, r24	; 0x05
    5262:	3f c0       	rjmp	.+126    	; 0x52e2 <UltraSonicLeftAction+0x2d6>
	else if (__tmp > 65535)
    5264:	6f 81       	ldd	r22, Y+7	; 0x07
    5266:	78 85       	ldd	r23, Y+8	; 0x08
    5268:	89 85       	ldd	r24, Y+9	; 0x09
    526a:	9a 85       	ldd	r25, Y+10	; 0x0a
    526c:	20 e0       	ldi	r18, 0x00	; 0
    526e:	3f ef       	ldi	r19, 0xFF	; 255
    5270:	4f e7       	ldi	r20, 0x7F	; 127
    5272:	57 e4       	ldi	r21, 0x47	; 71
    5274:	0e 94 20 05 	call	0xa40	; 0xa40 <__gtsf2>
    5278:	18 16       	cp	r1, r24
    527a:	4c f5       	brge	.+82     	; 0x52ce <UltraSonicLeftAction+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    527c:	6b 85       	ldd	r22, Y+11	; 0x0b
    527e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5280:	8d 85       	ldd	r24, Y+13	; 0x0d
    5282:	9e 85       	ldd	r25, Y+14	; 0x0e
    5284:	20 e0       	ldi	r18, 0x00	; 0
    5286:	30 e0       	ldi	r19, 0x00	; 0
    5288:	40 e2       	ldi	r20, 0x20	; 32
    528a:	51 e4       	ldi	r21, 0x41	; 65
    528c:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    5290:	dc 01       	movw	r26, r24
    5292:	cb 01       	movw	r24, r22
    5294:	bc 01       	movw	r22, r24
    5296:	cd 01       	movw	r24, r26
    5298:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    529c:	dc 01       	movw	r26, r24
    529e:	cb 01       	movw	r24, r22
    52a0:	9e 83       	std	Y+6, r25	; 0x06
    52a2:	8d 83       	std	Y+5, r24	; 0x05
    52a4:	0f c0       	rjmp	.+30     	; 0x52c4 <UltraSonicLeftAction+0x2b8>
    52a6:	88 ec       	ldi	r24, 0xC8	; 200
    52a8:	90 e0       	ldi	r25, 0x00	; 0
    52aa:	9c 83       	std	Y+4, r25	; 0x04
    52ac:	8b 83       	std	Y+3, r24	; 0x03
    52ae:	8b 81       	ldd	r24, Y+3	; 0x03
    52b0:	9c 81       	ldd	r25, Y+4	; 0x04
    52b2:	01 97       	sbiw	r24, 0x01	; 1
    52b4:	f1 f7       	brne	.-4      	; 0x52b2 <UltraSonicLeftAction+0x2a6>
    52b6:	9c 83       	std	Y+4, r25	; 0x04
    52b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    52ba:	8d 81       	ldd	r24, Y+5	; 0x05
    52bc:	9e 81       	ldd	r25, Y+6	; 0x06
    52be:	01 97       	sbiw	r24, 0x01	; 1
    52c0:	9e 83       	std	Y+6, r25	; 0x06
    52c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    52c4:	8d 81       	ldd	r24, Y+5	; 0x05
    52c6:	9e 81       	ldd	r25, Y+6	; 0x06
    52c8:	00 97       	sbiw	r24, 0x00	; 0
    52ca:	69 f7       	brne	.-38     	; 0x52a6 <UltraSonicLeftAction+0x29a>
    52cc:	14 c0       	rjmp	.+40     	; 0x52f6 <UltraSonicLeftAction+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    52ce:	6f 81       	ldd	r22, Y+7	; 0x07
    52d0:	78 85       	ldd	r23, Y+8	; 0x08
    52d2:	89 85       	ldd	r24, Y+9	; 0x09
    52d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    52d6:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    52da:	dc 01       	movw	r26, r24
    52dc:	cb 01       	movw	r24, r22
    52de:	9e 83       	std	Y+6, r25	; 0x06
    52e0:	8d 83       	std	Y+5, r24	; 0x05
    52e2:	8d 81       	ldd	r24, Y+5	; 0x05
    52e4:	9e 81       	ldd	r25, Y+6	; 0x06
    52e6:	9a 83       	std	Y+2, r25	; 0x02
    52e8:	89 83       	std	Y+1, r24	; 0x01
    52ea:	89 81       	ldd	r24, Y+1	; 0x01
    52ec:	9a 81       	ldd	r25, Y+2	; 0x02
    52ee:	01 97       	sbiw	r24, 0x01	; 1
    52f0:	f1 f7       	brne	.-4      	; 0x52ee <UltraSonicLeftAction+0x2e2>
    52f2:	9a 83       	std	Y+2, r25	; 0x02
    52f4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(450);
	DcMotor_VidRotate_Wheels1(STOP);
    52f6:	80 e0       	ldi	r24, 0x00	; 0
    52f8:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <DcMotor_VidRotate_Wheels1>
	DcMotor_VidRotate_Wheels2(STOP);
    52fc:	80 e0       	ldi	r24, 0x00	; 0
    52fe:	0e 94 c4 1f 	call	0x3f88	; 0x3f88 <DcMotor_VidRotate_Wheels2>
}
    5302:	aa 96       	adiw	r28, 0x2a	; 42
    5304:	0f b6       	in	r0, 0x3f	; 63
    5306:	f8 94       	cli
    5308:	de bf       	out	0x3e, r29	; 62
    530a:	0f be       	out	0x3f, r0	; 63
    530c:	cd bf       	out	0x3d, r28	; 61
    530e:	cf 91       	pop	r28
    5310:	df 91       	pop	r29
    5312:	08 95       	ret

00005314 <UltraSonicStopAction>:
 Name        : UltraSonicStopAction
 Input       : void
 Output      : void
 Description : To stop if all directions is blocked
*/
void UltraSonicStopAction () {
    5314:	df 93       	push	r29
    5316:	cf 93       	push	r28
    5318:	cd b7       	in	r28, 0x3d	; 61
    531a:	de b7       	in	r29, 0x3e	; 62
    531c:	2e 97       	sbiw	r28, 0x0e	; 14
    531e:	0f b6       	in	r0, 0x3f	; 63
    5320:	f8 94       	cli
    5322:	de bf       	out	0x3e, r29	; 62
    5324:	0f be       	out	0x3f, r0	; 63
    5326:	cd bf       	out	0x3d, r28	; 61
    ServoSetAngleOCR1B(ANGLE_ZERO);
    5328:	8c ed       	ldi	r24, 0xDC	; 220
    532a:	95 e0       	ldi	r25, 0x05	; 5
    532c:	0e 94 4b 20 	call	0x4096	; 0x4096 <ServoSetAngleOCR1B>
	DcMotor_VidRotate_Wheels1(STOP);
    5330:	80 e0       	ldi	r24, 0x00	; 0
    5332:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <DcMotor_VidRotate_Wheels1>
	DcMotor_VidRotate_Wheels2(STOP);
    5336:	80 e0       	ldi	r24, 0x00	; 0
    5338:	0e 94 c4 1f 	call	0x3f88	; 0x3f88 <DcMotor_VidRotate_Wheels2>
    533c:	80 e0       	ldi	r24, 0x00	; 0
    533e:	90 e0       	ldi	r25, 0x00	; 0
    5340:	aa ef       	ldi	r26, 0xFA	; 250
    5342:	b4 e4       	ldi	r27, 0x44	; 68
    5344:	8b 87       	std	Y+11, r24	; 0x0b
    5346:	9c 87       	std	Y+12, r25	; 0x0c
    5348:	ad 87       	std	Y+13, r26	; 0x0d
    534a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    534c:	6b 85       	ldd	r22, Y+11	; 0x0b
    534e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5350:	8d 85       	ldd	r24, Y+13	; 0x0d
    5352:	9e 85       	ldd	r25, Y+14	; 0x0e
    5354:	20 e0       	ldi	r18, 0x00	; 0
    5356:	30 e0       	ldi	r19, 0x00	; 0
    5358:	4a ef       	ldi	r20, 0xFA	; 250
    535a:	54 e4       	ldi	r21, 0x44	; 68
    535c:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    5360:	dc 01       	movw	r26, r24
    5362:	cb 01       	movw	r24, r22
    5364:	8f 83       	std	Y+7, r24	; 0x07
    5366:	98 87       	std	Y+8, r25	; 0x08
    5368:	a9 87       	std	Y+9, r26	; 0x09
    536a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    536c:	6f 81       	ldd	r22, Y+7	; 0x07
    536e:	78 85       	ldd	r23, Y+8	; 0x08
    5370:	89 85       	ldd	r24, Y+9	; 0x09
    5372:	9a 85       	ldd	r25, Y+10	; 0x0a
    5374:	20 e0       	ldi	r18, 0x00	; 0
    5376:	30 e0       	ldi	r19, 0x00	; 0
    5378:	40 e8       	ldi	r20, 0x80	; 128
    537a:	5f e3       	ldi	r21, 0x3F	; 63
    537c:	0e 94 80 05 	call	0xb00	; 0xb00 <__ltsf2>
    5380:	88 23       	and	r24, r24
    5382:	2c f4       	brge	.+10     	; 0x538e <UltraSonicStopAction+0x7a>
		__ticks = 1;
    5384:	81 e0       	ldi	r24, 0x01	; 1
    5386:	90 e0       	ldi	r25, 0x00	; 0
    5388:	9e 83       	std	Y+6, r25	; 0x06
    538a:	8d 83       	std	Y+5, r24	; 0x05
    538c:	3f c0       	rjmp	.+126    	; 0x540c <UltraSonicStopAction+0xf8>
	else if (__tmp > 65535)
    538e:	6f 81       	ldd	r22, Y+7	; 0x07
    5390:	78 85       	ldd	r23, Y+8	; 0x08
    5392:	89 85       	ldd	r24, Y+9	; 0x09
    5394:	9a 85       	ldd	r25, Y+10	; 0x0a
    5396:	20 e0       	ldi	r18, 0x00	; 0
    5398:	3f ef       	ldi	r19, 0xFF	; 255
    539a:	4f e7       	ldi	r20, 0x7F	; 127
    539c:	57 e4       	ldi	r21, 0x47	; 71
    539e:	0e 94 20 05 	call	0xa40	; 0xa40 <__gtsf2>
    53a2:	18 16       	cp	r1, r24
    53a4:	4c f5       	brge	.+82     	; 0x53f8 <UltraSonicStopAction+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    53a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    53a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    53aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    53ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    53ae:	20 e0       	ldi	r18, 0x00	; 0
    53b0:	30 e0       	ldi	r19, 0x00	; 0
    53b2:	40 e2       	ldi	r20, 0x20	; 32
    53b4:	51 e4       	ldi	r21, 0x41	; 65
    53b6:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    53ba:	dc 01       	movw	r26, r24
    53bc:	cb 01       	movw	r24, r22
    53be:	bc 01       	movw	r22, r24
    53c0:	cd 01       	movw	r24, r26
    53c2:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    53c6:	dc 01       	movw	r26, r24
    53c8:	cb 01       	movw	r24, r22
    53ca:	9e 83       	std	Y+6, r25	; 0x06
    53cc:	8d 83       	std	Y+5, r24	; 0x05
    53ce:	0f c0       	rjmp	.+30     	; 0x53ee <UltraSonicStopAction+0xda>
    53d0:	88 ec       	ldi	r24, 0xC8	; 200
    53d2:	90 e0       	ldi	r25, 0x00	; 0
    53d4:	9c 83       	std	Y+4, r25	; 0x04
    53d6:	8b 83       	std	Y+3, r24	; 0x03
    53d8:	8b 81       	ldd	r24, Y+3	; 0x03
    53da:	9c 81       	ldd	r25, Y+4	; 0x04
    53dc:	01 97       	sbiw	r24, 0x01	; 1
    53de:	f1 f7       	brne	.-4      	; 0x53dc <UltraSonicStopAction+0xc8>
    53e0:	9c 83       	std	Y+4, r25	; 0x04
    53e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    53e4:	8d 81       	ldd	r24, Y+5	; 0x05
    53e6:	9e 81       	ldd	r25, Y+6	; 0x06
    53e8:	01 97       	sbiw	r24, 0x01	; 1
    53ea:	9e 83       	std	Y+6, r25	; 0x06
    53ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    53ee:	8d 81       	ldd	r24, Y+5	; 0x05
    53f0:	9e 81       	ldd	r25, Y+6	; 0x06
    53f2:	00 97       	sbiw	r24, 0x00	; 0
    53f4:	69 f7       	brne	.-38     	; 0x53d0 <UltraSonicStopAction+0xbc>
    53f6:	14 c0       	rjmp	.+40     	; 0x5420 <UltraSonicStopAction+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    53f8:	6f 81       	ldd	r22, Y+7	; 0x07
    53fa:	78 85       	ldd	r23, Y+8	; 0x08
    53fc:	89 85       	ldd	r24, Y+9	; 0x09
    53fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    5400:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5404:	dc 01       	movw	r26, r24
    5406:	cb 01       	movw	r24, r22
    5408:	9e 83       	std	Y+6, r25	; 0x06
    540a:	8d 83       	std	Y+5, r24	; 0x05
    540c:	8d 81       	ldd	r24, Y+5	; 0x05
    540e:	9e 81       	ldd	r25, Y+6	; 0x06
    5410:	9a 83       	std	Y+2, r25	; 0x02
    5412:	89 83       	std	Y+1, r24	; 0x01
    5414:	89 81       	ldd	r24, Y+1	; 0x01
    5416:	9a 81       	ldd	r25, Y+2	; 0x02
    5418:	01 97       	sbiw	r24, 0x01	; 1
    541a:	f1 f7       	brne	.-4      	; 0x5418 <UltraSonicStopAction+0x104>
    541c:	9a 83       	std	Y+2, r25	; 0x02
    541e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(DWSTOP);
}
    5420:	2e 96       	adiw	r28, 0x0e	; 14
    5422:	0f b6       	in	r0, 0x3f	; 63
    5424:	f8 94       	cli
    5426:	de bf       	out	0x3e, r29	; 62
    5428:	0f be       	out	0x3f, r0	; 63
    542a:	cd bf       	out	0x3d, r28	; 61
    542c:	cf 91       	pop	r28
    542e:	df 91       	pop	r29
    5430:	08 95       	ret

00005432 <MultipleTasksCar_MapLine>:
 Input       : void
 Output      : void
 Description : to get into another selected point
*/

void MultipleTasksCar_MapLine(){
    5432:	df 93       	push	r29
    5434:	cf 93       	push	r28
    5436:	cd b7       	in	r28, 0x3d	; 61
    5438:	de b7       	in	r29, 0x3e	; 62
    543a:	2b 97       	sbiw	r28, 0x0b	; 11
    543c:	0f b6       	in	r0, 0x3f	; 63
    543e:	f8 94       	cli
    5440:	de bf       	out	0x3e, r29	; 62
    5442:	0f be       	out	0x3f, r0	; 63
    5444:	cd bf       	out	0x3d, r28	; 61
	/* flags */
	u8 YaxisFlag       = HIGH ;           //to count on Yaxis
    5446:	81 e0       	ldi	r24, 0x01	; 1
    5448:	8b 87       	std	Y+11, r24	; 0x0b
	u8 XaxisFlag       = LOW  ;           //to count on Xaxis
    544a:	1a 86       	std	Y+10, r1	; 0x0a
	u8 UpStairFlag_Y   = HIGH ;           //to determine the direction of move on Yaxis
    544c:	81 e0       	ldi	r24, 0x01	; 1
    544e:	89 87       	std	Y+9, r24	; 0x09
	u8 DownStairFlag_Y = LOW  ;           //to determine the direction of move on Yaxis
    5450:	18 86       	std	Y+8, r1	; 0x08
	u8 UpStairFlag_X   = HIGH ;           //to determine the direction of move on Xaxis
    5452:	81 e0       	ldi	r24, 0x01	; 1
    5454:	8f 83       	std	Y+7, r24	; 0x07
	u8 DownStairFlag_X = LOW  ;           //to determine the direction of move on Xaxis
    5456:	1e 82       	std	Y+6, r1	; 0x06
	u8 TurnYflag       = HIGH ;           //to determine turning on Yaxis
    5458:	81 e0       	ldi	r24, 0x01	; 1
    545a:	8d 83       	std	Y+5, r24	; 0x05
	u8 TurnXflag       = HIGH ;           //to determine turning on Xaxis
    545c:	81 e0       	ldi	r24, 0x01	; 1
    545e:	8c 83       	std	Y+4, r24	; 0x04
	u8 Stop            = LOW  ;           //to stop moving
    5460:	1b 82       	std	Y+3, r1	; 0x03

	/*  To stack programme to enter the target axises X then Y  */

	/* to enter x axis */
	while (1){
		TargerPoint[0] = MultipleTasksCar_GetMode()  ;
    5462:	0e 94 7a 23 	call	0x46f4	; 0x46f4 <MultipleTasksCar_GetMode>
    5466:	80 93 b4 01 	sts	0x01B4, r24

		if (TargerPoint[0] <='4' && TargerPoint[0] >= '0' ){
    546a:	80 91 b4 01 	lds	r24, 0x01B4
    546e:	85 33       	cpi	r24, 0x35	; 53
    5470:	c0 f7       	brcc	.-16     	; 0x5462 <MultipleTasksCar_MapLine+0x30>
    5472:	80 91 b4 01 	lds	r24, 0x01B4
    5476:	80 33       	cpi	r24, 0x30	; 48
    5478:	a0 f3       	brcs	.-24     	; 0x5462 <MultipleTasksCar_MapLine+0x30>
			TargerPoint[0] = TargerPoint[0] - '0' ;
    547a:	80 91 b4 01 	lds	r24, 0x01B4
    547e:	80 53       	subi	r24, 0x30	; 48
    5480:	80 93 b4 01 	sts	0x01B4, r24

	}//end while

	/* to enter y axis */
	while (1){
		TargerPoint[1] = MultipleTasksCar_GetMode()  ;
    5484:	0e 94 7a 23 	call	0x46f4	; 0x46f4 <MultipleTasksCar_GetMode>
    5488:	80 93 b5 01 	sts	0x01B5, r24

		if (TargerPoint[1] <='4' && TargerPoint[1] >= '0' ){
    548c:	80 91 b5 01 	lds	r24, 0x01B5
    5490:	85 33       	cpi	r24, 0x35	; 53
    5492:	c0 f7       	brcc	.-16     	; 0x5484 <MultipleTasksCar_MapLine+0x52>
    5494:	80 91 b5 01 	lds	r24, 0x01B5
    5498:	80 33       	cpi	r24, 0x30	; 48
    549a:	a0 f3       	brcs	.-24     	; 0x5484 <MultipleTasksCar_MapLine+0x52>
			TargerPoint[1] = TargerPoint[1] - '0' ;
    549c:	80 91 b5 01 	lds	r24, 0x01B5
    54a0:	80 53       	subi	r24, 0x30	; 48
    54a2:	80 93 b5 01 	sts	0x01B5, r24
	}//end while

    /************************************************************/

	/* To edit car if point under the acual point */
	if ( TargerPoint[Y_AXIS] <  ActualPoint[Y_AXIS] && TurnYflag ){
    54a6:	90 91 b5 01 	lds	r25, 0x01B5
    54aa:	80 91 b3 01 	lds	r24, 0x01B3
    54ae:	98 17       	cp	r25, r24
    54b0:	40 f4       	brcc	.+16     	; 0x54c2 <MultipleTasksCar_MapLine+0x90>
		if (TargerPoint[1] <='4' && TargerPoint[1] >= '0' ){
			TargerPoint[1] = TargerPoint[1] - '0' ;
			break ;
		}//end if

	}//end while
    54b2:	8d 81       	ldd	r24, Y+5	; 0x05
    54b4:	88 23       	and	r24, r24
    54b6:	29 f0       	breq	.+10     	; 0x54c2 <MultipleTasksCar_MapLine+0x90>
    /************************************************************/

	/* To edit car if point under the acual point */
	if ( TargerPoint[Y_AXIS] <  ActualPoint[Y_AXIS] && TurnYflag ){
		/* to turn 180 degree */
		MultipleTasksCar_TurnBack();
    54b8:	0e 94 13 2d 	call	0x5a26	; 0x5a26 <MultipleTasksCar_TurnBack>

		/* to raise down stair flag */
		DownStairFlag_Y = HIGH ;
    54bc:	81 e0       	ldi	r24, 0x01	; 1
    54be:	88 87       	std	Y+8, r24	; 0x08
		UpStairFlag_Y   = LOW  ;
    54c0:	19 86       	std	Y+9, r1	; 0x09
	}
	/************************************************/

	/* To edit car if point under the acual point */
	if ( TargerPoint[X_AXIS] <  ActualPoint[X_AXIS] && TurnXflag ){
    54c2:	90 91 b4 01 	lds	r25, 0x01B4
    54c6:	80 91 b2 01 	lds	r24, 0x01B2
    54ca:	98 17       	cp	r25, r24
    54cc:	38 f4       	brcc	.+14     	; 0x54dc <MultipleTasksCar_MapLine+0xaa>
    54ce:	8c 81       	ldd	r24, Y+4	; 0x04
    54d0:	88 23       	and	r24, r24
    54d2:	21 f0       	breq	.+8      	; 0x54dc <MultipleTasksCar_MapLine+0xaa>
		/* to raise down stair flag */
		DownStairFlag_X = HIGH ;
    54d4:	81 e0       	ldi	r24, 0x01	; 1
    54d6:	8e 83       	std	Y+6, r24	; 0x06
		UpStairFlag_X   = LOW  ;
    54d8:	1f 82       	std	Y+7, r1	; 0x07

		TurnXflag = LOW ;
    54da:	1c 82       	std	Y+4, r1	; 0x04
	}
	/************************************************/

	if ( (UpStairFlag_Y && UpStairFlag_X ) || (!UpStairFlag_Y && !UpStairFlag_X ) ){
    54dc:	89 85       	ldd	r24, Y+9	; 0x09
    54de:	88 23       	and	r24, r24
    54e0:	19 f0       	breq	.+6      	; 0x54e8 <MultipleTasksCar_MapLine+0xb6>
    54e2:	8f 81       	ldd	r24, Y+7	; 0x07
    54e4:	88 23       	and	r24, r24
    54e6:	31 f4       	brne	.+12     	; 0x54f4 <MultipleTasksCar_MapLine+0xc2>
    54e8:	89 85       	ldd	r24, Y+9	; 0x09
    54ea:	88 23       	and	r24, r24
    54ec:	31 f4       	brne	.+12     	; 0x54fa <MultipleTasksCar_MapLine+0xc8>
    54ee:	8f 81       	ldd	r24, Y+7	; 0x07
    54f0:	88 23       	and	r24, r24
    54f2:	19 f4       	brne	.+6      	; 0x54fa <MultipleTasksCar_MapLine+0xc8>
		TurnYflag = HIGH ;
    54f4:	81 e0       	ldi	r24, 0x01	; 1
    54f6:	8d 83       	std	Y+5, r24	; 0x05
    54f8:	77 c0       	rjmp	.+238    	; 0x55e8 <MultipleTasksCar_MapLine+0x1b6>
	}
	else if ((UpStairFlag_Y && !UpStairFlag_X ) || (!UpStairFlag_Y && UpStairFlag_X ) ){
    54fa:	89 85       	ldd	r24, Y+9	; 0x09
    54fc:	88 23       	and	r24, r24
    54fe:	19 f0       	breq	.+6      	; 0x5506 <MultipleTasksCar_MapLine+0xd4>
    5500:	8f 81       	ldd	r24, Y+7	; 0x07
    5502:	88 23       	and	r24, r24
    5504:	41 f0       	breq	.+16     	; 0x5516 <MultipleTasksCar_MapLine+0xe4>
    5506:	89 85       	ldd	r24, Y+9	; 0x09
    5508:	88 23       	and	r24, r24
    550a:	09 f0       	breq	.+2      	; 0x550e <MultipleTasksCar_MapLine+0xdc>
    550c:	6d c0       	rjmp	.+218    	; 0x55e8 <MultipleTasksCar_MapLine+0x1b6>
    550e:	8f 81       	ldd	r24, Y+7	; 0x07
    5510:	88 23       	and	r24, r24
    5512:	09 f4       	brne	.+2      	; 0x5516 <MultipleTasksCar_MapLine+0xe4>
    5514:	69 c0       	rjmp	.+210    	; 0x55e8 <MultipleTasksCar_MapLine+0x1b6>
		TurnYflag = LOW ;
    5516:	1d 82       	std	Y+5, r1	; 0x05
    5518:	67 c0       	rjmp	.+206    	; 0x55e8 <MultipleTasksCar_MapLine+0x1b6>

	/*  To Runing car  */
	while (Stop != HIGH ){

		/*  get IR conditon  */
		u8 IRRight   = DIO_U8GetPinValue(IR_PORT,IR_PIN_RIGHT);
    551a:	81 e0       	ldi	r24, 0x01	; 1
    551c:	61 e0       	ldi	r22, 0x01	; 1
    551e:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_U8GetPinValue>
    5522:	8a 83       	std	Y+2, r24	; 0x02
		u8 IRLeft    = DIO_U8GetPinValue(IR_PORT,IR_PIN_LEFT);
    5524:	81 e0       	ldi	r24, 0x01	; 1
    5526:	60 e0       	ldi	r22, 0x00	; 0
    5528:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_U8GetPinValue>
    552c:	89 83       	std	Y+1, r24	; 0x01
		/*********************/

		/* to walk up  */
		DcMotor_VidRotate_Wheels1(ANTI_CLK_WISE);
    552e:	82 e0       	ldi	r24, 0x02	; 2
    5530:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <DcMotor_VidRotate_Wheels1>
		DcMotor_VidRotate_Wheels2(ANTI_CLK_WISE);
    5534:	82 e0       	ldi	r24, 0x02	; 2
    5536:	0e 94 c4 1f 	call	0x3f88	; 0x3f88 <DcMotor_VidRotate_Wheels2>

		 /* if detect black line by two ir sensor*/
		 if ( IRRight &&  IRLeft ){
    553a:	8a 81       	ldd	r24, Y+2	; 0x02
    553c:	88 23       	and	r24, r24
    553e:	09 f4       	brne	.+2      	; 0x5542 <MultipleTasksCar_MapLine+0x110>
    5540:	53 c0       	rjmp	.+166    	; 0x55e8 <MultipleTasksCar_MapLine+0x1b6>
    5542:	89 81       	ldd	r24, Y+1	; 0x01
    5544:	88 23       	and	r24, r24
    5546:	09 f4       	brne	.+2      	; 0x554a <MultipleTasksCar_MapLine+0x118>
    5548:	4f c0       	rjmp	.+158    	; 0x55e8 <MultipleTasksCar_MapLine+0x1b6>
			 /* to stop motors to observe the movement*/
			 MultipleTasksCar_StopActionDelayed();
    554a:	0e 94 a4 2d 	call	0x5b48	; 0x5b48 <MultipleTasksCar_StopActionDelayed>

			 if (YaxisFlag){
    554e:	8b 85       	ldd	r24, Y+11	; 0x0b
    5550:	88 23       	and	r24, r24
    5552:	91 f0       	breq	.+36     	; 0x5578 <MultipleTasksCar_MapLine+0x146>
				 /* to increment or decrement actual point */
				 if (UpStairFlag_Y){
    5554:	89 85       	ldd	r24, Y+9	; 0x09
    5556:	88 23       	and	r24, r24
    5558:	31 f0       	breq	.+12     	; 0x5566 <MultipleTasksCar_MapLine+0x134>
					ActualPoint[Y_AXIS]++ ;
    555a:	80 91 b3 01 	lds	r24, 0x01B3
    555e:	8f 5f       	subi	r24, 0xFF	; 255
    5560:	80 93 b3 01 	sts	0x01B3, r24
    5564:	1a c0       	rjmp	.+52     	; 0x559a <MultipleTasksCar_MapLine+0x168>
				 }
				 else if (DownStairFlag_Y){
    5566:	88 85       	ldd	r24, Y+8	; 0x08
    5568:	88 23       	and	r24, r24
    556a:	b9 f0       	breq	.+46     	; 0x559a <MultipleTasksCar_MapLine+0x168>
					 ActualPoint[Y_AXIS]-- ;
    556c:	80 91 b3 01 	lds	r24, 0x01B3
    5570:	81 50       	subi	r24, 0x01	; 1
    5572:	80 93 b3 01 	sts	0x01B3, r24
    5576:	11 c0       	rjmp	.+34     	; 0x559a <MultipleTasksCar_MapLine+0x168>
				 }
			 }
			 else {
				 /* to increment or decrement actual point */
				 if (UpStairFlag_X){
    5578:	8f 81       	ldd	r24, Y+7	; 0x07
    557a:	88 23       	and	r24, r24
    557c:	31 f0       	breq	.+12     	; 0x558a <MultipleTasksCar_MapLine+0x158>
					ActualPoint[X_AXIS]++ ;
    557e:	80 91 b2 01 	lds	r24, 0x01B2
    5582:	8f 5f       	subi	r24, 0xFF	; 255
    5584:	80 93 b2 01 	sts	0x01B2, r24
    5588:	08 c0       	rjmp	.+16     	; 0x559a <MultipleTasksCar_MapLine+0x168>
				 }
				else if (DownStairFlag_X){
    558a:	8e 81       	ldd	r24, Y+6	; 0x06
    558c:	88 23       	and	r24, r24
    558e:	29 f0       	breq	.+10     	; 0x559a <MultipleTasksCar_MapLine+0x168>
					 ActualPoint[X_AXIS]-- ;
    5590:	80 91 b2 01 	lds	r24, 0x01B2
    5594:	81 50       	subi	r24, 0x01	; 1
    5596:	80 93 b2 01 	sts	0x01B2, r24
				 }
			 }

			if (ActualPoint[Y_AXIS] == TargerPoint[Y_AXIS] && YaxisFlag ){
    559a:	90 91 b3 01 	lds	r25, 0x01B3
    559e:	80 91 b5 01 	lds	r24, 0x01B5
    55a2:	98 17       	cp	r25, r24
    55a4:	71 f4       	brne	.+28     	; 0x55c2 <MultipleTasksCar_MapLine+0x190>
    55a6:	8b 85       	ldd	r24, Y+11	; 0x0b
    55a8:	88 23       	and	r24, r24
    55aa:	59 f0       	breq	.+22     	; 0x55c2 <MultipleTasksCar_MapLine+0x190>
				if (TurnYflag){
    55ac:	8d 81       	ldd	r24, Y+5	; 0x05
    55ae:	88 23       	and	r24, r24
    55b0:	19 f0       	breq	.+6      	; 0x55b8 <MultipleTasksCar_MapLine+0x186>
					/*  right action  */
					MultipleTasksCar_RightAction();
    55b2:	0e 94 01 2b 	call	0x5602	; 0x5602 <MultipleTasksCar_RightAction>
    55b6:	02 c0       	rjmp	.+4      	; 0x55bc <MultipleTasksCar_MapLine+0x18a>
				}
				else {
					/*  left action  */
					MultipleTasksCar_LeftAction();
    55b8:	0e 94 0a 2c 	call	0x5814	; 0x5814 <MultipleTasksCar_LeftAction>
				}

				/* To enable turn right or left one time */
				YaxisFlag = LOW ;
    55bc:	1b 86       	std	Y+11, r1	; 0x0b
				XaxisFlag = HIGH;
    55be:	81 e0       	ldi	r24, 0x01	; 1
    55c0:	8a 87       	std	Y+10, r24	; 0x0a
			}


			if (ActualPoint[X_AXIS] == TargerPoint[X_AXIS] && XaxisFlag ){
    55c2:	90 91 b2 01 	lds	r25, 0x01B2
    55c6:	80 91 b4 01 	lds	r24, 0x01B4
    55ca:	98 17       	cp	r25, r24
    55cc:	69 f4       	brne	.+26     	; 0x55e8 <MultipleTasksCar_MapLine+0x1b6>
    55ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    55d0:	88 23       	and	r24, r24
    55d2:	51 f0       	breq	.+20     	; 0x55e8 <MultipleTasksCar_MapLine+0x1b6>
				if (TurnXflag){
    55d4:	8c 81       	ldd	r24, Y+4	; 0x04
    55d6:	88 23       	and	r24, r24
    55d8:	19 f0       	breq	.+6      	; 0x55e0 <MultipleTasksCar_MapLine+0x1ae>
					/*  left action  */
					MultipleTasksCar_LeftAction();
    55da:	0e 94 0a 2c 	call	0x5814	; 0x5814 <MultipleTasksCar_LeftAction>
    55de:	02 c0       	rjmp	.+4      	; 0x55e4 <MultipleTasksCar_MapLine+0x1b2>
				}
				else {
					/*  right action  */
					MultipleTasksCar_RightAction();
    55e0:	0e 94 01 2b 	call	0x5602	; 0x5602 <MultipleTasksCar_RightAction>
				}

				/* rising stop flag  */
				Stop = HIGH ;
    55e4:	81 e0       	ldi	r24, 0x01	; 1
    55e6:	8b 83       	std	Y+3, r24	; 0x03
	else if ((UpStairFlag_Y && !UpStairFlag_X ) || (!UpStairFlag_Y && UpStairFlag_X ) ){
		TurnYflag = LOW ;
	}

	/*  To Runing car  */
	while (Stop != HIGH ){
    55e8:	8b 81       	ldd	r24, Y+3	; 0x03
    55ea:	81 30       	cpi	r24, 0x01	; 1
    55ec:	09 f0       	breq	.+2      	; 0x55f0 <MultipleTasksCar_MapLine+0x1be>
    55ee:	95 cf       	rjmp	.-214    	; 0x551a <MultipleTasksCar_MapLine+0xe8>
				Stop = HIGH ;
			}

		 }//end else if
	}//end while(1)
}
    55f0:	2b 96       	adiw	r28, 0x0b	; 11
    55f2:	0f b6       	in	r0, 0x3f	; 63
    55f4:	f8 94       	cli
    55f6:	de bf       	out	0x3e, r29	; 62
    55f8:	0f be       	out	0x3f, r0	; 63
    55fa:	cd bf       	out	0x3d, r28	; 61
    55fc:	cf 91       	pop	r28
    55fe:	df 91       	pop	r29
    5600:	08 95       	ret

00005602 <MultipleTasksCar_RightAction>:
 Name        : MultipleTasksCar_RightAction
 Input       : void
 Output      : void
 Description :
*/
void MultipleTasksCar_RightAction()        {
    5602:	df 93       	push	r29
    5604:	cf 93       	push	r28
    5606:	cd b7       	in	r28, 0x3d	; 61
    5608:	de b7       	in	r29, 0x3e	; 62
    560a:	6c 97       	sbiw	r28, 0x1c	; 28
    560c:	0f b6       	in	r0, 0x3f	; 63
    560e:	f8 94       	cli
    5610:	de bf       	out	0x3e, r29	; 62
    5612:	0f be       	out	0x3f, r0	; 63
    5614:	cd bf       	out	0x3d, r28	; 61
	DcMotor_VidRotate_Wheels1(ANTI_CLK_WISE);
    5616:	82 e0       	ldi	r24, 0x02	; 2
    5618:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <DcMotor_VidRotate_Wheels1>
	DcMotor_VidRotate_Wheels2(ANTI_CLK_WISE);
    561c:	82 e0       	ldi	r24, 0x02	; 2
    561e:	0e 94 c4 1f 	call	0x3f88	; 0x3f88 <DcMotor_VidRotate_Wheels2>
    5622:	80 e0       	ldi	r24, 0x00	; 0
    5624:	90 e0       	ldi	r25, 0x00	; 0
    5626:	a2 e0       	ldi	r26, 0x02	; 2
    5628:	b3 e4       	ldi	r27, 0x43	; 67
    562a:	89 8f       	std	Y+25, r24	; 0x19
    562c:	9a 8f       	std	Y+26, r25	; 0x1a
    562e:	ab 8f       	std	Y+27, r26	; 0x1b
    5630:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5632:	69 8d       	ldd	r22, Y+25	; 0x19
    5634:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5636:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5638:	9c 8d       	ldd	r25, Y+28	; 0x1c
    563a:	20 e0       	ldi	r18, 0x00	; 0
    563c:	30 e0       	ldi	r19, 0x00	; 0
    563e:	4a ef       	ldi	r20, 0xFA	; 250
    5640:	54 e4       	ldi	r21, 0x44	; 68
    5642:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    5646:	dc 01       	movw	r26, r24
    5648:	cb 01       	movw	r24, r22
    564a:	8d 8b       	std	Y+21, r24	; 0x15
    564c:	9e 8b       	std	Y+22, r25	; 0x16
    564e:	af 8b       	std	Y+23, r26	; 0x17
    5650:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5652:	6d 89       	ldd	r22, Y+21	; 0x15
    5654:	7e 89       	ldd	r23, Y+22	; 0x16
    5656:	8f 89       	ldd	r24, Y+23	; 0x17
    5658:	98 8d       	ldd	r25, Y+24	; 0x18
    565a:	20 e0       	ldi	r18, 0x00	; 0
    565c:	30 e0       	ldi	r19, 0x00	; 0
    565e:	40 e8       	ldi	r20, 0x80	; 128
    5660:	5f e3       	ldi	r21, 0x3F	; 63
    5662:	0e 94 80 05 	call	0xb00	; 0xb00 <__ltsf2>
    5666:	88 23       	and	r24, r24
    5668:	2c f4       	brge	.+10     	; 0x5674 <MultipleTasksCar_RightAction+0x72>
		__ticks = 1;
    566a:	81 e0       	ldi	r24, 0x01	; 1
    566c:	90 e0       	ldi	r25, 0x00	; 0
    566e:	9c 8b       	std	Y+20, r25	; 0x14
    5670:	8b 8b       	std	Y+19, r24	; 0x13
    5672:	3f c0       	rjmp	.+126    	; 0x56f2 <MultipleTasksCar_RightAction+0xf0>
	else if (__tmp > 65535)
    5674:	6d 89       	ldd	r22, Y+21	; 0x15
    5676:	7e 89       	ldd	r23, Y+22	; 0x16
    5678:	8f 89       	ldd	r24, Y+23	; 0x17
    567a:	98 8d       	ldd	r25, Y+24	; 0x18
    567c:	20 e0       	ldi	r18, 0x00	; 0
    567e:	3f ef       	ldi	r19, 0xFF	; 255
    5680:	4f e7       	ldi	r20, 0x7F	; 127
    5682:	57 e4       	ldi	r21, 0x47	; 71
    5684:	0e 94 20 05 	call	0xa40	; 0xa40 <__gtsf2>
    5688:	18 16       	cp	r1, r24
    568a:	4c f5       	brge	.+82     	; 0x56de <MultipleTasksCar_RightAction+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    568c:	69 8d       	ldd	r22, Y+25	; 0x19
    568e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5690:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5692:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5694:	20 e0       	ldi	r18, 0x00	; 0
    5696:	30 e0       	ldi	r19, 0x00	; 0
    5698:	40 e2       	ldi	r20, 0x20	; 32
    569a:	51 e4       	ldi	r21, 0x41	; 65
    569c:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    56a0:	dc 01       	movw	r26, r24
    56a2:	cb 01       	movw	r24, r22
    56a4:	bc 01       	movw	r22, r24
    56a6:	cd 01       	movw	r24, r26
    56a8:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    56ac:	dc 01       	movw	r26, r24
    56ae:	cb 01       	movw	r24, r22
    56b0:	9c 8b       	std	Y+20, r25	; 0x14
    56b2:	8b 8b       	std	Y+19, r24	; 0x13
    56b4:	0f c0       	rjmp	.+30     	; 0x56d4 <MultipleTasksCar_RightAction+0xd2>
    56b6:	88 ec       	ldi	r24, 0xC8	; 200
    56b8:	90 e0       	ldi	r25, 0x00	; 0
    56ba:	9a 8b       	std	Y+18, r25	; 0x12
    56bc:	89 8b       	std	Y+17, r24	; 0x11
    56be:	89 89       	ldd	r24, Y+17	; 0x11
    56c0:	9a 89       	ldd	r25, Y+18	; 0x12
    56c2:	01 97       	sbiw	r24, 0x01	; 1
    56c4:	f1 f7       	brne	.-4      	; 0x56c2 <MultipleTasksCar_RightAction+0xc0>
    56c6:	9a 8b       	std	Y+18, r25	; 0x12
    56c8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    56ca:	8b 89       	ldd	r24, Y+19	; 0x13
    56cc:	9c 89       	ldd	r25, Y+20	; 0x14
    56ce:	01 97       	sbiw	r24, 0x01	; 1
    56d0:	9c 8b       	std	Y+20, r25	; 0x14
    56d2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    56d4:	8b 89       	ldd	r24, Y+19	; 0x13
    56d6:	9c 89       	ldd	r25, Y+20	; 0x14
    56d8:	00 97       	sbiw	r24, 0x00	; 0
    56da:	69 f7       	brne	.-38     	; 0x56b6 <MultipleTasksCar_RightAction+0xb4>
    56dc:	14 c0       	rjmp	.+40     	; 0x5706 <MultipleTasksCar_RightAction+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    56de:	6d 89       	ldd	r22, Y+21	; 0x15
    56e0:	7e 89       	ldd	r23, Y+22	; 0x16
    56e2:	8f 89       	ldd	r24, Y+23	; 0x17
    56e4:	98 8d       	ldd	r25, Y+24	; 0x18
    56e6:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    56ea:	dc 01       	movw	r26, r24
    56ec:	cb 01       	movw	r24, r22
    56ee:	9c 8b       	std	Y+20, r25	; 0x14
    56f0:	8b 8b       	std	Y+19, r24	; 0x13
    56f2:	8b 89       	ldd	r24, Y+19	; 0x13
    56f4:	9c 89       	ldd	r25, Y+20	; 0x14
    56f6:	98 8b       	std	Y+16, r25	; 0x10
    56f8:	8f 87       	std	Y+15, r24	; 0x0f
    56fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    56fc:	98 89       	ldd	r25, Y+16	; 0x10
    56fe:	01 97       	sbiw	r24, 0x01	; 1
    5700:	f1 f7       	brne	.-4      	; 0x56fe <MultipleTasksCar_RightAction+0xfc>
    5702:	98 8b       	std	Y+16, r25	; 0x10
    5704:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(DFHVUD);    //for Three Quarter velocity
	DcMotor_VidRotate_Wheels1(ANTI_CLK_WISE);
    5706:	82 e0       	ldi	r24, 0x02	; 2
    5708:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <DcMotor_VidRotate_Wheels1>
	DcMotor_VidRotate_Wheels2(CLK_WISE);
    570c:	81 e0       	ldi	r24, 0x01	; 1
    570e:	0e 94 c4 1f 	call	0x3f88	; 0x3f88 <DcMotor_VidRotate_Wheels2>
    5712:	80 e0       	ldi	r24, 0x00	; 0
    5714:	90 e8       	ldi	r25, 0x80	; 128
    5716:	ad e1       	ldi	r26, 0x1D	; 29
    5718:	b4 e4       	ldi	r27, 0x44	; 68
    571a:	8b 87       	std	Y+11, r24	; 0x0b
    571c:	9c 87       	std	Y+12, r25	; 0x0c
    571e:	ad 87       	std	Y+13, r26	; 0x0d
    5720:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5722:	6b 85       	ldd	r22, Y+11	; 0x0b
    5724:	7c 85       	ldd	r23, Y+12	; 0x0c
    5726:	8d 85       	ldd	r24, Y+13	; 0x0d
    5728:	9e 85       	ldd	r25, Y+14	; 0x0e
    572a:	20 e0       	ldi	r18, 0x00	; 0
    572c:	30 e0       	ldi	r19, 0x00	; 0
    572e:	4a ef       	ldi	r20, 0xFA	; 250
    5730:	54 e4       	ldi	r21, 0x44	; 68
    5732:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    5736:	dc 01       	movw	r26, r24
    5738:	cb 01       	movw	r24, r22
    573a:	8f 83       	std	Y+7, r24	; 0x07
    573c:	98 87       	std	Y+8, r25	; 0x08
    573e:	a9 87       	std	Y+9, r26	; 0x09
    5740:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5742:	6f 81       	ldd	r22, Y+7	; 0x07
    5744:	78 85       	ldd	r23, Y+8	; 0x08
    5746:	89 85       	ldd	r24, Y+9	; 0x09
    5748:	9a 85       	ldd	r25, Y+10	; 0x0a
    574a:	20 e0       	ldi	r18, 0x00	; 0
    574c:	30 e0       	ldi	r19, 0x00	; 0
    574e:	40 e8       	ldi	r20, 0x80	; 128
    5750:	5f e3       	ldi	r21, 0x3F	; 63
    5752:	0e 94 80 05 	call	0xb00	; 0xb00 <__ltsf2>
    5756:	88 23       	and	r24, r24
    5758:	2c f4       	brge	.+10     	; 0x5764 <MultipleTasksCar_RightAction+0x162>
		__ticks = 1;
    575a:	81 e0       	ldi	r24, 0x01	; 1
    575c:	90 e0       	ldi	r25, 0x00	; 0
    575e:	9e 83       	std	Y+6, r25	; 0x06
    5760:	8d 83       	std	Y+5, r24	; 0x05
    5762:	3f c0       	rjmp	.+126    	; 0x57e2 <MultipleTasksCar_RightAction+0x1e0>
	else if (__tmp > 65535)
    5764:	6f 81       	ldd	r22, Y+7	; 0x07
    5766:	78 85       	ldd	r23, Y+8	; 0x08
    5768:	89 85       	ldd	r24, Y+9	; 0x09
    576a:	9a 85       	ldd	r25, Y+10	; 0x0a
    576c:	20 e0       	ldi	r18, 0x00	; 0
    576e:	3f ef       	ldi	r19, 0xFF	; 255
    5770:	4f e7       	ldi	r20, 0x7F	; 127
    5772:	57 e4       	ldi	r21, 0x47	; 71
    5774:	0e 94 20 05 	call	0xa40	; 0xa40 <__gtsf2>
    5778:	18 16       	cp	r1, r24
    577a:	4c f5       	brge	.+82     	; 0x57ce <MultipleTasksCar_RightAction+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    577c:	6b 85       	ldd	r22, Y+11	; 0x0b
    577e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5780:	8d 85       	ldd	r24, Y+13	; 0x0d
    5782:	9e 85       	ldd	r25, Y+14	; 0x0e
    5784:	20 e0       	ldi	r18, 0x00	; 0
    5786:	30 e0       	ldi	r19, 0x00	; 0
    5788:	40 e2       	ldi	r20, 0x20	; 32
    578a:	51 e4       	ldi	r21, 0x41	; 65
    578c:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    5790:	dc 01       	movw	r26, r24
    5792:	cb 01       	movw	r24, r22
    5794:	bc 01       	movw	r22, r24
    5796:	cd 01       	movw	r24, r26
    5798:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    579c:	dc 01       	movw	r26, r24
    579e:	cb 01       	movw	r24, r22
    57a0:	9e 83       	std	Y+6, r25	; 0x06
    57a2:	8d 83       	std	Y+5, r24	; 0x05
    57a4:	0f c0       	rjmp	.+30     	; 0x57c4 <MultipleTasksCar_RightAction+0x1c2>
    57a6:	88 ec       	ldi	r24, 0xC8	; 200
    57a8:	90 e0       	ldi	r25, 0x00	; 0
    57aa:	9c 83       	std	Y+4, r25	; 0x04
    57ac:	8b 83       	std	Y+3, r24	; 0x03
    57ae:	8b 81       	ldd	r24, Y+3	; 0x03
    57b0:	9c 81       	ldd	r25, Y+4	; 0x04
    57b2:	01 97       	sbiw	r24, 0x01	; 1
    57b4:	f1 f7       	brne	.-4      	; 0x57b2 <MultipleTasksCar_RightAction+0x1b0>
    57b6:	9c 83       	std	Y+4, r25	; 0x04
    57b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    57ba:	8d 81       	ldd	r24, Y+5	; 0x05
    57bc:	9e 81       	ldd	r25, Y+6	; 0x06
    57be:	01 97       	sbiw	r24, 0x01	; 1
    57c0:	9e 83       	std	Y+6, r25	; 0x06
    57c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    57c4:	8d 81       	ldd	r24, Y+5	; 0x05
    57c6:	9e 81       	ldd	r25, Y+6	; 0x06
    57c8:	00 97       	sbiw	r24, 0x00	; 0
    57ca:	69 f7       	brne	.-38     	; 0x57a6 <MultipleTasksCar_RightAction+0x1a4>
    57cc:	14 c0       	rjmp	.+40     	; 0x57f6 <MultipleTasksCar_RightAction+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    57ce:	6f 81       	ldd	r22, Y+7	; 0x07
    57d0:	78 85       	ldd	r23, Y+8	; 0x08
    57d2:	89 85       	ldd	r24, Y+9	; 0x09
    57d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    57d6:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    57da:	dc 01       	movw	r26, r24
    57dc:	cb 01       	movw	r24, r22
    57de:	9e 83       	std	Y+6, r25	; 0x06
    57e0:	8d 83       	std	Y+5, r24	; 0x05
    57e2:	8d 81       	ldd	r24, Y+5	; 0x05
    57e4:	9e 81       	ldd	r25, Y+6	; 0x06
    57e6:	9a 83       	std	Y+2, r25	; 0x02
    57e8:	89 83       	std	Y+1, r24	; 0x01
    57ea:	89 81       	ldd	r24, Y+1	; 0x01
    57ec:	9a 81       	ldd	r25, Y+2	; 0x02
    57ee:	01 97       	sbiw	r24, 0x01	; 1
    57f0:	f1 f7       	brne	.-4      	; 0x57ee <MultipleTasksCar_RightAction+0x1ec>
    57f2:	9a 83       	std	Y+2, r25	; 0x02
    57f4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(DFHVRL);    //for Three Quarter velocity
	DcMotor_VidRotate_Wheels1(STOP);
    57f6:	80 e0       	ldi	r24, 0x00	; 0
    57f8:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <DcMotor_VidRotate_Wheels1>
	DcMotor_VidRotate_Wheels2(STOP);
    57fc:	80 e0       	ldi	r24, 0x00	; 0
    57fe:	0e 94 c4 1f 	call	0x3f88	; 0x3f88 <DcMotor_VidRotate_Wheels2>
}
    5802:	6c 96       	adiw	r28, 0x1c	; 28
    5804:	0f b6       	in	r0, 0x3f	; 63
    5806:	f8 94       	cli
    5808:	de bf       	out	0x3e, r29	; 62
    580a:	0f be       	out	0x3f, r0	; 63
    580c:	cd bf       	out	0x3d, r28	; 61
    580e:	cf 91       	pop	r28
    5810:	df 91       	pop	r29
    5812:	08 95       	ret

00005814 <MultipleTasksCar_LeftAction>:
 Name        : MultipleTasksCar_LeftAction
 Input       : void
 Output      : void
 Description :
*/
void MultipleTasksCar_LeftAction()         {
    5814:	df 93       	push	r29
    5816:	cf 93       	push	r28
    5818:	cd b7       	in	r28, 0x3d	; 61
    581a:	de b7       	in	r29, 0x3e	; 62
    581c:	6c 97       	sbiw	r28, 0x1c	; 28
    581e:	0f b6       	in	r0, 0x3f	; 63
    5820:	f8 94       	cli
    5822:	de bf       	out	0x3e, r29	; 62
    5824:	0f be       	out	0x3f, r0	; 63
    5826:	cd bf       	out	0x3d, r28	; 61
	DcMotor_VidRotate_Wheels1(ANTI_CLK_WISE);
    5828:	82 e0       	ldi	r24, 0x02	; 2
    582a:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <DcMotor_VidRotate_Wheels1>
	DcMotor_VidRotate_Wheels2(ANTI_CLK_WISE);
    582e:	82 e0       	ldi	r24, 0x02	; 2
    5830:	0e 94 c4 1f 	call	0x3f88	; 0x3f88 <DcMotor_VidRotate_Wheels2>
    5834:	80 e0       	ldi	r24, 0x00	; 0
    5836:	90 e0       	ldi	r25, 0x00	; 0
    5838:	a2 e0       	ldi	r26, 0x02	; 2
    583a:	b3 e4       	ldi	r27, 0x43	; 67
    583c:	89 8f       	std	Y+25, r24	; 0x19
    583e:	9a 8f       	std	Y+26, r25	; 0x1a
    5840:	ab 8f       	std	Y+27, r26	; 0x1b
    5842:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5844:	69 8d       	ldd	r22, Y+25	; 0x19
    5846:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5848:	8b 8d       	ldd	r24, Y+27	; 0x1b
    584a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    584c:	20 e0       	ldi	r18, 0x00	; 0
    584e:	30 e0       	ldi	r19, 0x00	; 0
    5850:	4a ef       	ldi	r20, 0xFA	; 250
    5852:	54 e4       	ldi	r21, 0x44	; 68
    5854:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    5858:	dc 01       	movw	r26, r24
    585a:	cb 01       	movw	r24, r22
    585c:	8d 8b       	std	Y+21, r24	; 0x15
    585e:	9e 8b       	std	Y+22, r25	; 0x16
    5860:	af 8b       	std	Y+23, r26	; 0x17
    5862:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5864:	6d 89       	ldd	r22, Y+21	; 0x15
    5866:	7e 89       	ldd	r23, Y+22	; 0x16
    5868:	8f 89       	ldd	r24, Y+23	; 0x17
    586a:	98 8d       	ldd	r25, Y+24	; 0x18
    586c:	20 e0       	ldi	r18, 0x00	; 0
    586e:	30 e0       	ldi	r19, 0x00	; 0
    5870:	40 e8       	ldi	r20, 0x80	; 128
    5872:	5f e3       	ldi	r21, 0x3F	; 63
    5874:	0e 94 80 05 	call	0xb00	; 0xb00 <__ltsf2>
    5878:	88 23       	and	r24, r24
    587a:	2c f4       	brge	.+10     	; 0x5886 <MultipleTasksCar_LeftAction+0x72>
		__ticks = 1;
    587c:	81 e0       	ldi	r24, 0x01	; 1
    587e:	90 e0       	ldi	r25, 0x00	; 0
    5880:	9c 8b       	std	Y+20, r25	; 0x14
    5882:	8b 8b       	std	Y+19, r24	; 0x13
    5884:	3f c0       	rjmp	.+126    	; 0x5904 <MultipleTasksCar_LeftAction+0xf0>
	else if (__tmp > 65535)
    5886:	6d 89       	ldd	r22, Y+21	; 0x15
    5888:	7e 89       	ldd	r23, Y+22	; 0x16
    588a:	8f 89       	ldd	r24, Y+23	; 0x17
    588c:	98 8d       	ldd	r25, Y+24	; 0x18
    588e:	20 e0       	ldi	r18, 0x00	; 0
    5890:	3f ef       	ldi	r19, 0xFF	; 255
    5892:	4f e7       	ldi	r20, 0x7F	; 127
    5894:	57 e4       	ldi	r21, 0x47	; 71
    5896:	0e 94 20 05 	call	0xa40	; 0xa40 <__gtsf2>
    589a:	18 16       	cp	r1, r24
    589c:	4c f5       	brge	.+82     	; 0x58f0 <MultipleTasksCar_LeftAction+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    589e:	69 8d       	ldd	r22, Y+25	; 0x19
    58a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    58a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    58a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    58a6:	20 e0       	ldi	r18, 0x00	; 0
    58a8:	30 e0       	ldi	r19, 0x00	; 0
    58aa:	40 e2       	ldi	r20, 0x20	; 32
    58ac:	51 e4       	ldi	r21, 0x41	; 65
    58ae:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    58b2:	dc 01       	movw	r26, r24
    58b4:	cb 01       	movw	r24, r22
    58b6:	bc 01       	movw	r22, r24
    58b8:	cd 01       	movw	r24, r26
    58ba:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    58be:	dc 01       	movw	r26, r24
    58c0:	cb 01       	movw	r24, r22
    58c2:	9c 8b       	std	Y+20, r25	; 0x14
    58c4:	8b 8b       	std	Y+19, r24	; 0x13
    58c6:	0f c0       	rjmp	.+30     	; 0x58e6 <MultipleTasksCar_LeftAction+0xd2>
    58c8:	88 ec       	ldi	r24, 0xC8	; 200
    58ca:	90 e0       	ldi	r25, 0x00	; 0
    58cc:	9a 8b       	std	Y+18, r25	; 0x12
    58ce:	89 8b       	std	Y+17, r24	; 0x11
    58d0:	89 89       	ldd	r24, Y+17	; 0x11
    58d2:	9a 89       	ldd	r25, Y+18	; 0x12
    58d4:	01 97       	sbiw	r24, 0x01	; 1
    58d6:	f1 f7       	brne	.-4      	; 0x58d4 <MultipleTasksCar_LeftAction+0xc0>
    58d8:	9a 8b       	std	Y+18, r25	; 0x12
    58da:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    58dc:	8b 89       	ldd	r24, Y+19	; 0x13
    58de:	9c 89       	ldd	r25, Y+20	; 0x14
    58e0:	01 97       	sbiw	r24, 0x01	; 1
    58e2:	9c 8b       	std	Y+20, r25	; 0x14
    58e4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    58e6:	8b 89       	ldd	r24, Y+19	; 0x13
    58e8:	9c 89       	ldd	r25, Y+20	; 0x14
    58ea:	00 97       	sbiw	r24, 0x00	; 0
    58ec:	69 f7       	brne	.-38     	; 0x58c8 <MultipleTasksCar_LeftAction+0xb4>
    58ee:	14 c0       	rjmp	.+40     	; 0x5918 <MultipleTasksCar_LeftAction+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    58f0:	6d 89       	ldd	r22, Y+21	; 0x15
    58f2:	7e 89       	ldd	r23, Y+22	; 0x16
    58f4:	8f 89       	ldd	r24, Y+23	; 0x17
    58f6:	98 8d       	ldd	r25, Y+24	; 0x18
    58f8:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    58fc:	dc 01       	movw	r26, r24
    58fe:	cb 01       	movw	r24, r22
    5900:	9c 8b       	std	Y+20, r25	; 0x14
    5902:	8b 8b       	std	Y+19, r24	; 0x13
    5904:	8b 89       	ldd	r24, Y+19	; 0x13
    5906:	9c 89       	ldd	r25, Y+20	; 0x14
    5908:	98 8b       	std	Y+16, r25	; 0x10
    590a:	8f 87       	std	Y+15, r24	; 0x0f
    590c:	8f 85       	ldd	r24, Y+15	; 0x0f
    590e:	98 89       	ldd	r25, Y+16	; 0x10
    5910:	01 97       	sbiw	r24, 0x01	; 1
    5912:	f1 f7       	brne	.-4      	; 0x5910 <MultipleTasksCar_LeftAction+0xfc>
    5914:	98 8b       	std	Y+16, r25	; 0x10
    5916:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(DFHVUD);    //for Three Quarter velocity
	DcMotor_VidRotate_Wheels1(CLK_WISE);
    5918:	81 e0       	ldi	r24, 0x01	; 1
    591a:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <DcMotor_VidRotate_Wheels1>
	DcMotor_VidRotate_Wheels2(ANTI_CLK_WISE);
    591e:	82 e0       	ldi	r24, 0x02	; 2
    5920:	0e 94 c4 1f 	call	0x3f88	; 0x3f88 <DcMotor_VidRotate_Wheels2>
    5924:	80 e0       	ldi	r24, 0x00	; 0
    5926:	90 ec       	ldi	r25, 0xC0	; 192
    5928:	a3 e2       	ldi	r26, 0x23	; 35
    592a:	b4 e4       	ldi	r27, 0x44	; 68
    592c:	8b 87       	std	Y+11, r24	; 0x0b
    592e:	9c 87       	std	Y+12, r25	; 0x0c
    5930:	ad 87       	std	Y+13, r26	; 0x0d
    5932:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5934:	6b 85       	ldd	r22, Y+11	; 0x0b
    5936:	7c 85       	ldd	r23, Y+12	; 0x0c
    5938:	8d 85       	ldd	r24, Y+13	; 0x0d
    593a:	9e 85       	ldd	r25, Y+14	; 0x0e
    593c:	20 e0       	ldi	r18, 0x00	; 0
    593e:	30 e0       	ldi	r19, 0x00	; 0
    5940:	4a ef       	ldi	r20, 0xFA	; 250
    5942:	54 e4       	ldi	r21, 0x44	; 68
    5944:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    5948:	dc 01       	movw	r26, r24
    594a:	cb 01       	movw	r24, r22
    594c:	8f 83       	std	Y+7, r24	; 0x07
    594e:	98 87       	std	Y+8, r25	; 0x08
    5950:	a9 87       	std	Y+9, r26	; 0x09
    5952:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5954:	6f 81       	ldd	r22, Y+7	; 0x07
    5956:	78 85       	ldd	r23, Y+8	; 0x08
    5958:	89 85       	ldd	r24, Y+9	; 0x09
    595a:	9a 85       	ldd	r25, Y+10	; 0x0a
    595c:	20 e0       	ldi	r18, 0x00	; 0
    595e:	30 e0       	ldi	r19, 0x00	; 0
    5960:	40 e8       	ldi	r20, 0x80	; 128
    5962:	5f e3       	ldi	r21, 0x3F	; 63
    5964:	0e 94 80 05 	call	0xb00	; 0xb00 <__ltsf2>
    5968:	88 23       	and	r24, r24
    596a:	2c f4       	brge	.+10     	; 0x5976 <MultipleTasksCar_LeftAction+0x162>
		__ticks = 1;
    596c:	81 e0       	ldi	r24, 0x01	; 1
    596e:	90 e0       	ldi	r25, 0x00	; 0
    5970:	9e 83       	std	Y+6, r25	; 0x06
    5972:	8d 83       	std	Y+5, r24	; 0x05
    5974:	3f c0       	rjmp	.+126    	; 0x59f4 <MultipleTasksCar_LeftAction+0x1e0>
	else if (__tmp > 65535)
    5976:	6f 81       	ldd	r22, Y+7	; 0x07
    5978:	78 85       	ldd	r23, Y+8	; 0x08
    597a:	89 85       	ldd	r24, Y+9	; 0x09
    597c:	9a 85       	ldd	r25, Y+10	; 0x0a
    597e:	20 e0       	ldi	r18, 0x00	; 0
    5980:	3f ef       	ldi	r19, 0xFF	; 255
    5982:	4f e7       	ldi	r20, 0x7F	; 127
    5984:	57 e4       	ldi	r21, 0x47	; 71
    5986:	0e 94 20 05 	call	0xa40	; 0xa40 <__gtsf2>
    598a:	18 16       	cp	r1, r24
    598c:	4c f5       	brge	.+82     	; 0x59e0 <MultipleTasksCar_LeftAction+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    598e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5990:	7c 85       	ldd	r23, Y+12	; 0x0c
    5992:	8d 85       	ldd	r24, Y+13	; 0x0d
    5994:	9e 85       	ldd	r25, Y+14	; 0x0e
    5996:	20 e0       	ldi	r18, 0x00	; 0
    5998:	30 e0       	ldi	r19, 0x00	; 0
    599a:	40 e2       	ldi	r20, 0x20	; 32
    599c:	51 e4       	ldi	r21, 0x41	; 65
    599e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    59a2:	dc 01       	movw	r26, r24
    59a4:	cb 01       	movw	r24, r22
    59a6:	bc 01       	movw	r22, r24
    59a8:	cd 01       	movw	r24, r26
    59aa:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    59ae:	dc 01       	movw	r26, r24
    59b0:	cb 01       	movw	r24, r22
    59b2:	9e 83       	std	Y+6, r25	; 0x06
    59b4:	8d 83       	std	Y+5, r24	; 0x05
    59b6:	0f c0       	rjmp	.+30     	; 0x59d6 <MultipleTasksCar_LeftAction+0x1c2>
    59b8:	88 ec       	ldi	r24, 0xC8	; 200
    59ba:	90 e0       	ldi	r25, 0x00	; 0
    59bc:	9c 83       	std	Y+4, r25	; 0x04
    59be:	8b 83       	std	Y+3, r24	; 0x03
    59c0:	8b 81       	ldd	r24, Y+3	; 0x03
    59c2:	9c 81       	ldd	r25, Y+4	; 0x04
    59c4:	01 97       	sbiw	r24, 0x01	; 1
    59c6:	f1 f7       	brne	.-4      	; 0x59c4 <MultipleTasksCar_LeftAction+0x1b0>
    59c8:	9c 83       	std	Y+4, r25	; 0x04
    59ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    59cc:	8d 81       	ldd	r24, Y+5	; 0x05
    59ce:	9e 81       	ldd	r25, Y+6	; 0x06
    59d0:	01 97       	sbiw	r24, 0x01	; 1
    59d2:	9e 83       	std	Y+6, r25	; 0x06
    59d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    59d6:	8d 81       	ldd	r24, Y+5	; 0x05
    59d8:	9e 81       	ldd	r25, Y+6	; 0x06
    59da:	00 97       	sbiw	r24, 0x00	; 0
    59dc:	69 f7       	brne	.-38     	; 0x59b8 <MultipleTasksCar_LeftAction+0x1a4>
    59de:	14 c0       	rjmp	.+40     	; 0x5a08 <MultipleTasksCar_LeftAction+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    59e0:	6f 81       	ldd	r22, Y+7	; 0x07
    59e2:	78 85       	ldd	r23, Y+8	; 0x08
    59e4:	89 85       	ldd	r24, Y+9	; 0x09
    59e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    59e8:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    59ec:	dc 01       	movw	r26, r24
    59ee:	cb 01       	movw	r24, r22
    59f0:	9e 83       	std	Y+6, r25	; 0x06
    59f2:	8d 83       	std	Y+5, r24	; 0x05
    59f4:	8d 81       	ldd	r24, Y+5	; 0x05
    59f6:	9e 81       	ldd	r25, Y+6	; 0x06
    59f8:	9a 83       	std	Y+2, r25	; 0x02
    59fa:	89 83       	std	Y+1, r24	; 0x01
    59fc:	89 81       	ldd	r24, Y+1	; 0x01
    59fe:	9a 81       	ldd	r25, Y+2	; 0x02
    5a00:	01 97       	sbiw	r24, 0x01	; 1
    5a02:	f1 f7       	brne	.-4      	; 0x5a00 <MultipleTasksCar_LeftAction+0x1ec>
    5a04:	9a 83       	std	Y+2, r25	; 0x02
    5a06:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(DFHVRL+25);    //for Half velocity
	DcMotor_VidRotate_Wheels1(STOP);
    5a08:	80 e0       	ldi	r24, 0x00	; 0
    5a0a:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <DcMotor_VidRotate_Wheels1>
	DcMotor_VidRotate_Wheels2(STOP);
    5a0e:	80 e0       	ldi	r24, 0x00	; 0
    5a10:	0e 94 c4 1f 	call	0x3f88	; 0x3f88 <DcMotor_VidRotate_Wheels2>
}
    5a14:	6c 96       	adiw	r28, 0x1c	; 28
    5a16:	0f b6       	in	r0, 0x3f	; 63
    5a18:	f8 94       	cli
    5a1a:	de bf       	out	0x3e, r29	; 62
    5a1c:	0f be       	out	0x3f, r0	; 63
    5a1e:	cd bf       	out	0x3d, r28	; 61
    5a20:	cf 91       	pop	r28
    5a22:	df 91       	pop	r29
    5a24:	08 95       	ret

00005a26 <MultipleTasksCar_TurnBack>:
 Name        : MultipleTasksCar_TurnBack
 Input       : void
 Output      : void
 Description :
*/
void MultipleTasksCar_TurnBack()         {
    5a26:	df 93       	push	r29
    5a28:	cf 93       	push	r28
    5a2a:	cd b7       	in	r28, 0x3d	; 61
    5a2c:	de b7       	in	r29, 0x3e	; 62
    5a2e:	2e 97       	sbiw	r28, 0x0e	; 14
    5a30:	0f b6       	in	r0, 0x3f	; 63
    5a32:	f8 94       	cli
    5a34:	de bf       	out	0x3e, r29	; 62
    5a36:	0f be       	out	0x3f, r0	; 63
    5a38:	cd bf       	out	0x3d, r28	; 61
	DcMotor_VidRotate_Wheels1(ANTI_CLK_WISE);
    5a3a:	82 e0       	ldi	r24, 0x02	; 2
    5a3c:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <DcMotor_VidRotate_Wheels1>
	DcMotor_VidRotate_Wheels2(CLK_WISE);
    5a40:	81 e0       	ldi	r24, 0x01	; 1
    5a42:	0e 94 c4 1f 	call	0x3f88	; 0x3f88 <DcMotor_VidRotate_Wheels2>
    5a46:	80 e0       	ldi	r24, 0x00	; 0
    5a48:	90 e2       	ldi	r25, 0x20	; 32
    5a4a:	a3 ea       	ldi	r26, 0xA3	; 163
    5a4c:	b4 e4       	ldi	r27, 0x44	; 68
    5a4e:	8b 87       	std	Y+11, r24	; 0x0b
    5a50:	9c 87       	std	Y+12, r25	; 0x0c
    5a52:	ad 87       	std	Y+13, r26	; 0x0d
    5a54:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5a56:	6b 85       	ldd	r22, Y+11	; 0x0b
    5a58:	7c 85       	ldd	r23, Y+12	; 0x0c
    5a5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    5a5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    5a5e:	20 e0       	ldi	r18, 0x00	; 0
    5a60:	30 e0       	ldi	r19, 0x00	; 0
    5a62:	4a ef       	ldi	r20, 0xFA	; 250
    5a64:	54 e4       	ldi	r21, 0x44	; 68
    5a66:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    5a6a:	dc 01       	movw	r26, r24
    5a6c:	cb 01       	movw	r24, r22
    5a6e:	8f 83       	std	Y+7, r24	; 0x07
    5a70:	98 87       	std	Y+8, r25	; 0x08
    5a72:	a9 87       	std	Y+9, r26	; 0x09
    5a74:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5a76:	6f 81       	ldd	r22, Y+7	; 0x07
    5a78:	78 85       	ldd	r23, Y+8	; 0x08
    5a7a:	89 85       	ldd	r24, Y+9	; 0x09
    5a7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    5a7e:	20 e0       	ldi	r18, 0x00	; 0
    5a80:	30 e0       	ldi	r19, 0x00	; 0
    5a82:	40 e8       	ldi	r20, 0x80	; 128
    5a84:	5f e3       	ldi	r21, 0x3F	; 63
    5a86:	0e 94 80 05 	call	0xb00	; 0xb00 <__ltsf2>
    5a8a:	88 23       	and	r24, r24
    5a8c:	2c f4       	brge	.+10     	; 0x5a98 <MultipleTasksCar_TurnBack+0x72>
		__ticks = 1;
    5a8e:	81 e0       	ldi	r24, 0x01	; 1
    5a90:	90 e0       	ldi	r25, 0x00	; 0
    5a92:	9e 83       	std	Y+6, r25	; 0x06
    5a94:	8d 83       	std	Y+5, r24	; 0x05
    5a96:	3f c0       	rjmp	.+126    	; 0x5b16 <MultipleTasksCar_TurnBack+0xf0>
	else if (__tmp > 65535)
    5a98:	6f 81       	ldd	r22, Y+7	; 0x07
    5a9a:	78 85       	ldd	r23, Y+8	; 0x08
    5a9c:	89 85       	ldd	r24, Y+9	; 0x09
    5a9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5aa0:	20 e0       	ldi	r18, 0x00	; 0
    5aa2:	3f ef       	ldi	r19, 0xFF	; 255
    5aa4:	4f e7       	ldi	r20, 0x7F	; 127
    5aa6:	57 e4       	ldi	r21, 0x47	; 71
    5aa8:	0e 94 20 05 	call	0xa40	; 0xa40 <__gtsf2>
    5aac:	18 16       	cp	r1, r24
    5aae:	4c f5       	brge	.+82     	; 0x5b02 <MultipleTasksCar_TurnBack+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5ab0:	6b 85       	ldd	r22, Y+11	; 0x0b
    5ab2:	7c 85       	ldd	r23, Y+12	; 0x0c
    5ab4:	8d 85       	ldd	r24, Y+13	; 0x0d
    5ab6:	9e 85       	ldd	r25, Y+14	; 0x0e
    5ab8:	20 e0       	ldi	r18, 0x00	; 0
    5aba:	30 e0       	ldi	r19, 0x00	; 0
    5abc:	40 e2       	ldi	r20, 0x20	; 32
    5abe:	51 e4       	ldi	r21, 0x41	; 65
    5ac0:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    5ac4:	dc 01       	movw	r26, r24
    5ac6:	cb 01       	movw	r24, r22
    5ac8:	bc 01       	movw	r22, r24
    5aca:	cd 01       	movw	r24, r26
    5acc:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5ad0:	dc 01       	movw	r26, r24
    5ad2:	cb 01       	movw	r24, r22
    5ad4:	9e 83       	std	Y+6, r25	; 0x06
    5ad6:	8d 83       	std	Y+5, r24	; 0x05
    5ad8:	0f c0       	rjmp	.+30     	; 0x5af8 <MultipleTasksCar_TurnBack+0xd2>
    5ada:	88 ec       	ldi	r24, 0xC8	; 200
    5adc:	90 e0       	ldi	r25, 0x00	; 0
    5ade:	9c 83       	std	Y+4, r25	; 0x04
    5ae0:	8b 83       	std	Y+3, r24	; 0x03
    5ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    5ae4:	9c 81       	ldd	r25, Y+4	; 0x04
    5ae6:	01 97       	sbiw	r24, 0x01	; 1
    5ae8:	f1 f7       	brne	.-4      	; 0x5ae6 <MultipleTasksCar_TurnBack+0xc0>
    5aea:	9c 83       	std	Y+4, r25	; 0x04
    5aec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5aee:	8d 81       	ldd	r24, Y+5	; 0x05
    5af0:	9e 81       	ldd	r25, Y+6	; 0x06
    5af2:	01 97       	sbiw	r24, 0x01	; 1
    5af4:	9e 83       	std	Y+6, r25	; 0x06
    5af6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5af8:	8d 81       	ldd	r24, Y+5	; 0x05
    5afa:	9e 81       	ldd	r25, Y+6	; 0x06
    5afc:	00 97       	sbiw	r24, 0x00	; 0
    5afe:	69 f7       	brne	.-38     	; 0x5ada <MultipleTasksCar_TurnBack+0xb4>
    5b00:	14 c0       	rjmp	.+40     	; 0x5b2a <MultipleTasksCar_TurnBack+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5b02:	6f 81       	ldd	r22, Y+7	; 0x07
    5b04:	78 85       	ldd	r23, Y+8	; 0x08
    5b06:	89 85       	ldd	r24, Y+9	; 0x09
    5b08:	9a 85       	ldd	r25, Y+10	; 0x0a
    5b0a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5b0e:	dc 01       	movw	r26, r24
    5b10:	cb 01       	movw	r24, r22
    5b12:	9e 83       	std	Y+6, r25	; 0x06
    5b14:	8d 83       	std	Y+5, r24	; 0x05
    5b16:	8d 81       	ldd	r24, Y+5	; 0x05
    5b18:	9e 81       	ldd	r25, Y+6	; 0x06
    5b1a:	9a 83       	std	Y+2, r25	; 0x02
    5b1c:	89 83       	std	Y+1, r24	; 0x01
    5b1e:	89 81       	ldd	r24, Y+1	; 0x01
    5b20:	9a 81       	ldd	r25, Y+2	; 0x02
    5b22:	01 97       	sbiw	r24, 0x01	; 1
    5b24:	f1 f7       	brne	.-4      	; 0x5b22 <MultipleTasksCar_TurnBack+0xfc>
    5b26:	9a 83       	std	Y+2, r25	; 0x02
    5b28:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(DFHVBACK);    //for Three Quarter velocity
	DcMotor_VidRotate_Wheels1(STOP);
    5b2a:	80 e0       	ldi	r24, 0x00	; 0
    5b2c:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <DcMotor_VidRotate_Wheels1>
	DcMotor_VidRotate_Wheels2(STOP);
    5b30:	80 e0       	ldi	r24, 0x00	; 0
    5b32:	0e 94 c4 1f 	call	0x3f88	; 0x3f88 <DcMotor_VidRotate_Wheels2>
}
    5b36:	2e 96       	adiw	r28, 0x0e	; 14
    5b38:	0f b6       	in	r0, 0x3f	; 63
    5b3a:	f8 94       	cli
    5b3c:	de bf       	out	0x3e, r29	; 62
    5b3e:	0f be       	out	0x3f, r0	; 63
    5b40:	cd bf       	out	0x3d, r28	; 61
    5b42:	cf 91       	pop	r28
    5b44:	df 91       	pop	r29
    5b46:	08 95       	ret

00005b48 <MultipleTasksCar_StopActionDelayed>:
 Name        : MultipleTasksCar_StopActionDelayed
 Input       : void
 Output      : void
 Description :
*/
void MultipleTasksCar_StopActionDelayed()  {
    5b48:	df 93       	push	r29
    5b4a:	cf 93       	push	r28
    5b4c:	cd b7       	in	r28, 0x3d	; 61
    5b4e:	de b7       	in	r29, 0x3e	; 62
    5b50:	2e 97       	sbiw	r28, 0x0e	; 14
    5b52:	0f b6       	in	r0, 0x3f	; 63
    5b54:	f8 94       	cli
    5b56:	de bf       	out	0x3e, r29	; 62
    5b58:	0f be       	out	0x3f, r0	; 63
    5b5a:	cd bf       	out	0x3d, r28	; 61
	DcMotor_VidRotate_Wheels1(STOP);
    5b5c:	80 e0       	ldi	r24, 0x00	; 0
    5b5e:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <DcMotor_VidRotate_Wheels1>
	DcMotor_VidRotate_Wheels2(STOP);
    5b62:	80 e0       	ldi	r24, 0x00	; 0
    5b64:	0e 94 c4 1f 	call	0x3f88	; 0x3f88 <DcMotor_VidRotate_Wheels2>
    5b68:	80 e0       	ldi	r24, 0x00	; 0
    5b6a:	90 e0       	ldi	r25, 0x00	; 0
    5b6c:	a8 e4       	ldi	r26, 0x48	; 72
    5b6e:	b3 e4       	ldi	r27, 0x43	; 67
    5b70:	8b 87       	std	Y+11, r24	; 0x0b
    5b72:	9c 87       	std	Y+12, r25	; 0x0c
    5b74:	ad 87       	std	Y+13, r26	; 0x0d
    5b76:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5b78:	6b 85       	ldd	r22, Y+11	; 0x0b
    5b7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    5b7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    5b7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5b80:	20 e0       	ldi	r18, 0x00	; 0
    5b82:	30 e0       	ldi	r19, 0x00	; 0
    5b84:	4a ef       	ldi	r20, 0xFA	; 250
    5b86:	54 e4       	ldi	r21, 0x44	; 68
    5b88:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    5b8c:	dc 01       	movw	r26, r24
    5b8e:	cb 01       	movw	r24, r22
    5b90:	8f 83       	std	Y+7, r24	; 0x07
    5b92:	98 87       	std	Y+8, r25	; 0x08
    5b94:	a9 87       	std	Y+9, r26	; 0x09
    5b96:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5b98:	6f 81       	ldd	r22, Y+7	; 0x07
    5b9a:	78 85       	ldd	r23, Y+8	; 0x08
    5b9c:	89 85       	ldd	r24, Y+9	; 0x09
    5b9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5ba0:	20 e0       	ldi	r18, 0x00	; 0
    5ba2:	30 e0       	ldi	r19, 0x00	; 0
    5ba4:	40 e8       	ldi	r20, 0x80	; 128
    5ba6:	5f e3       	ldi	r21, 0x3F	; 63
    5ba8:	0e 94 80 05 	call	0xb00	; 0xb00 <__ltsf2>
    5bac:	88 23       	and	r24, r24
    5bae:	2c f4       	brge	.+10     	; 0x5bba <MultipleTasksCar_StopActionDelayed+0x72>
		__ticks = 1;
    5bb0:	81 e0       	ldi	r24, 0x01	; 1
    5bb2:	90 e0       	ldi	r25, 0x00	; 0
    5bb4:	9e 83       	std	Y+6, r25	; 0x06
    5bb6:	8d 83       	std	Y+5, r24	; 0x05
    5bb8:	3f c0       	rjmp	.+126    	; 0x5c38 <MultipleTasksCar_StopActionDelayed+0xf0>
	else if (__tmp > 65535)
    5bba:	6f 81       	ldd	r22, Y+7	; 0x07
    5bbc:	78 85       	ldd	r23, Y+8	; 0x08
    5bbe:	89 85       	ldd	r24, Y+9	; 0x09
    5bc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    5bc2:	20 e0       	ldi	r18, 0x00	; 0
    5bc4:	3f ef       	ldi	r19, 0xFF	; 255
    5bc6:	4f e7       	ldi	r20, 0x7F	; 127
    5bc8:	57 e4       	ldi	r21, 0x47	; 71
    5bca:	0e 94 20 05 	call	0xa40	; 0xa40 <__gtsf2>
    5bce:	18 16       	cp	r1, r24
    5bd0:	4c f5       	brge	.+82     	; 0x5c24 <MultipleTasksCar_StopActionDelayed+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5bd2:	6b 85       	ldd	r22, Y+11	; 0x0b
    5bd4:	7c 85       	ldd	r23, Y+12	; 0x0c
    5bd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    5bd8:	9e 85       	ldd	r25, Y+14	; 0x0e
    5bda:	20 e0       	ldi	r18, 0x00	; 0
    5bdc:	30 e0       	ldi	r19, 0x00	; 0
    5bde:	40 e2       	ldi	r20, 0x20	; 32
    5be0:	51 e4       	ldi	r21, 0x41	; 65
    5be2:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    5be6:	dc 01       	movw	r26, r24
    5be8:	cb 01       	movw	r24, r22
    5bea:	bc 01       	movw	r22, r24
    5bec:	cd 01       	movw	r24, r26
    5bee:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5bf2:	dc 01       	movw	r26, r24
    5bf4:	cb 01       	movw	r24, r22
    5bf6:	9e 83       	std	Y+6, r25	; 0x06
    5bf8:	8d 83       	std	Y+5, r24	; 0x05
    5bfa:	0f c0       	rjmp	.+30     	; 0x5c1a <MultipleTasksCar_StopActionDelayed+0xd2>
    5bfc:	88 ec       	ldi	r24, 0xC8	; 200
    5bfe:	90 e0       	ldi	r25, 0x00	; 0
    5c00:	9c 83       	std	Y+4, r25	; 0x04
    5c02:	8b 83       	std	Y+3, r24	; 0x03
    5c04:	8b 81       	ldd	r24, Y+3	; 0x03
    5c06:	9c 81       	ldd	r25, Y+4	; 0x04
    5c08:	01 97       	sbiw	r24, 0x01	; 1
    5c0a:	f1 f7       	brne	.-4      	; 0x5c08 <MultipleTasksCar_StopActionDelayed+0xc0>
    5c0c:	9c 83       	std	Y+4, r25	; 0x04
    5c0e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5c10:	8d 81       	ldd	r24, Y+5	; 0x05
    5c12:	9e 81       	ldd	r25, Y+6	; 0x06
    5c14:	01 97       	sbiw	r24, 0x01	; 1
    5c16:	9e 83       	std	Y+6, r25	; 0x06
    5c18:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5c1a:	8d 81       	ldd	r24, Y+5	; 0x05
    5c1c:	9e 81       	ldd	r25, Y+6	; 0x06
    5c1e:	00 97       	sbiw	r24, 0x00	; 0
    5c20:	69 f7       	brne	.-38     	; 0x5bfc <MultipleTasksCar_StopActionDelayed+0xb4>
    5c22:	14 c0       	rjmp	.+40     	; 0x5c4c <MultipleTasksCar_StopActionDelayed+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5c24:	6f 81       	ldd	r22, Y+7	; 0x07
    5c26:	78 85       	ldd	r23, Y+8	; 0x08
    5c28:	89 85       	ldd	r24, Y+9	; 0x09
    5c2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    5c2c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5c30:	dc 01       	movw	r26, r24
    5c32:	cb 01       	movw	r24, r22
    5c34:	9e 83       	std	Y+6, r25	; 0x06
    5c36:	8d 83       	std	Y+5, r24	; 0x05
    5c38:	8d 81       	ldd	r24, Y+5	; 0x05
    5c3a:	9e 81       	ldd	r25, Y+6	; 0x06
    5c3c:	9a 83       	std	Y+2, r25	; 0x02
    5c3e:	89 83       	std	Y+1, r24	; 0x01
    5c40:	89 81       	ldd	r24, Y+1	; 0x01
    5c42:	9a 81       	ldd	r25, Y+2	; 0x02
    5c44:	01 97       	sbiw	r24, 0x01	; 1
    5c46:	f1 f7       	brne	.-4      	; 0x5c44 <MultipleTasksCar_StopActionDelayed+0xfc>
    5c48:	9a 83       	std	Y+2, r25	; 0x02
    5c4a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(200);
}
    5c4c:	2e 96       	adiw	r28, 0x0e	; 14
    5c4e:	0f b6       	in	r0, 0x3f	; 63
    5c50:	f8 94       	cli
    5c52:	de bf       	out	0x3e, r29	; 62
    5c54:	0f be       	out	0x3f, r0	; 63
    5c56:	cd bf       	out	0x3d, r28	; 61
    5c58:	cf 91       	pop	r28
    5c5a:	df 91       	pop	r29
    5c5c:	08 95       	ret

00005c5e <main>:
#include "APP_DRIVER/MultipleTasksCar_Interface.h"


/* steps : 1 ) determine velocity 2) determine mode*/

void main (){
    5c5e:	df 93       	push	r29
    5c60:	cf 93       	push	r28
    5c62:	00 d0       	rcall	.+0      	; 0x5c64 <main+0x6>
    5c64:	00 d0       	rcall	.+0      	; 0x5c66 <main+0x8>
    5c66:	cd b7       	in	r28, 0x3d	; 61
    5c68:	de b7       	in	r29, 0x3e	; 62
	/* initializiation function of car  */
	MultipleTasksCar_VidInit();
    5c6a:	0e 94 c8 22 	call	0x4590	; 0x4590 <MultipleTasksCar_VidInit>

	/* to set the mode & velocity of the car */
	u8 mode , velocity ;

	while (1){
		velocity = MultipleTasksCar_GetMode() ;
    5c6e:	0e 94 7a 23 	call	0x46f4	; 0x46f4 <MultipleTasksCar_GetMode>
    5c72:	89 83       	std	Y+1, r24	; 0x01

		if (velocity <= '4' && velocity >= '1')
    5c74:	89 81       	ldd	r24, Y+1	; 0x01
    5c76:	85 33       	cpi	r24, 0x35	; 53
    5c78:	d0 f7       	brcc	.-12     	; 0x5c6e <main+0x10>
    5c7a:	89 81       	ldd	r24, Y+1	; 0x01
    5c7c:	81 33       	cpi	r24, 0x31	; 49
    5c7e:	b8 f3       	brcs	.-18     	; 0x5c6e <main+0x10>
			break ;
	}//end while (1)

	MultipleTasksCar_SetCarVelocity(velocity) ;
    5c80:	89 81       	ldd	r24, Y+1	; 0x01
    5c82:	0e 94 db 22 	call	0x45b6	; 0x45b6 <MultipleTasksCar_SetCarVelocity>

	/* to select mode */
	while (1){
		mode = MultipleTasksCar_GetMode() ;
    5c86:	0e 94 7a 23 	call	0x46f4	; 0x46f4 <MultipleTasksCar_GetMode>
    5c8a:	8a 83       	std	Y+2, r24	; 0x02

		if (mode <= '4' && mode >= '1')
    5c8c:	8a 81       	ldd	r24, Y+2	; 0x02
    5c8e:	85 33       	cpi	r24, 0x35	; 53
    5c90:	d0 f7       	brcc	.-12     	; 0x5c86 <main+0x28>
    5c92:	8a 81       	ldd	r24, Y+2	; 0x02
    5c94:	81 33       	cpi	r24, 0x31	; 49
    5c96:	b8 f3       	brcs	.-18     	; 0x5c86 <main+0x28>
			break ;
	}//end while (1)

	/* to implemnet ur target mode */
	while (1){
		switch (mode){
    5c98:	8a 81       	ldd	r24, Y+2	; 0x02
    5c9a:	28 2f       	mov	r18, r24
    5c9c:	30 e0       	ldi	r19, 0x00	; 0
    5c9e:	3c 83       	std	Y+4, r19	; 0x04
    5ca0:	2b 83       	std	Y+3, r18	; 0x03
    5ca2:	8b 81       	ldd	r24, Y+3	; 0x03
    5ca4:	9c 81       	ldd	r25, Y+4	; 0x04
    5ca6:	82 33       	cpi	r24, 0x32	; 50
    5ca8:	91 05       	cpc	r25, r1
    5caa:	c9 f0       	breq	.+50     	; 0x5cde <main+0x80>
    5cac:	2b 81       	ldd	r18, Y+3	; 0x03
    5cae:	3c 81       	ldd	r19, Y+4	; 0x04
    5cb0:	23 33       	cpi	r18, 0x33	; 51
    5cb2:	31 05       	cpc	r19, r1
    5cb4:	34 f4       	brge	.+12     	; 0x5cc2 <main+0x64>
    5cb6:	8b 81       	ldd	r24, Y+3	; 0x03
    5cb8:	9c 81       	ldd	r25, Y+4	; 0x04
    5cba:	81 33       	cpi	r24, 0x31	; 49
    5cbc:	91 05       	cpc	r25, r1
    5cbe:	61 f0       	breq	.+24     	; 0x5cd8 <main+0x7a>
    5cc0:	eb cf       	rjmp	.-42     	; 0x5c98 <main+0x3a>
    5cc2:	2b 81       	ldd	r18, Y+3	; 0x03
    5cc4:	3c 81       	ldd	r19, Y+4	; 0x04
    5cc6:	23 33       	cpi	r18, 0x33	; 51
    5cc8:	31 05       	cpc	r19, r1
    5cca:	61 f0       	breq	.+24     	; 0x5ce4 <main+0x86>
    5ccc:	8b 81       	ldd	r24, Y+3	; 0x03
    5cce:	9c 81       	ldd	r25, Y+4	; 0x04
    5cd0:	84 33       	cpi	r24, 0x34	; 52
    5cd2:	91 05       	cpc	r25, r1
    5cd4:	51 f0       	breq	.+20     	; 0x5cea <main+0x8c>
    5cd6:	e0 cf       	rjmp	.-64     	; 0x5c98 <main+0x3a>
		case '1' :  MultipleTasksCar_GetDirections() ;          break ;
    5cd8:	0e 94 17 23 	call	0x462e	; 0x462e <MultipleTasksCar_GetDirections>
    5cdc:	dd cf       	rjmp	.-70     	; 0x5c98 <main+0x3a>
		case '2' :  MultipleTasksCar_LineFollower()  ;          break ;
    5cde:	0e 94 83 23 	call	0x4706	; 0x4706 <MultipleTasksCar_LineFollower>
    5ce2:	da cf       	rjmp	.-76     	; 0x5c98 <main+0x3a>
		case '3' :  MultipleTasksCar_UltraSonic()    ;          break ;
    5ce4:	0e 94 c4 23 	call	0x4788	; 0x4788 <MultipleTasksCar_UltraSonic>
    5ce8:	d7 cf       	rjmp	.-82     	; 0x5c98 <main+0x3a>
		case '4' :  MultipleTasksCar_MapLine()       ;          break ;
    5cea:	0e 94 19 2a 	call	0x5432	; 0x5432 <MultipleTasksCar_MapLine>
    5cee:	d4 cf       	rjmp	.-88     	; 0x5c98 <main+0x3a>

00005cf0 <__udivmodhi4>:
    5cf0:	aa 1b       	sub	r26, r26
    5cf2:	bb 1b       	sub	r27, r27
    5cf4:	51 e1       	ldi	r21, 0x11	; 17
    5cf6:	07 c0       	rjmp	.+14     	; 0x5d06 <__udivmodhi4_ep>

00005cf8 <__udivmodhi4_loop>:
    5cf8:	aa 1f       	adc	r26, r26
    5cfa:	bb 1f       	adc	r27, r27
    5cfc:	a6 17       	cp	r26, r22
    5cfe:	b7 07       	cpc	r27, r23
    5d00:	10 f0       	brcs	.+4      	; 0x5d06 <__udivmodhi4_ep>
    5d02:	a6 1b       	sub	r26, r22
    5d04:	b7 0b       	sbc	r27, r23

00005d06 <__udivmodhi4_ep>:
    5d06:	88 1f       	adc	r24, r24
    5d08:	99 1f       	adc	r25, r25
    5d0a:	5a 95       	dec	r21
    5d0c:	a9 f7       	brne	.-22     	; 0x5cf8 <__udivmodhi4_loop>
    5d0e:	80 95       	com	r24
    5d10:	90 95       	com	r25
    5d12:	bc 01       	movw	r22, r24
    5d14:	cd 01       	movw	r24, r26
    5d16:	08 95       	ret

00005d18 <__prologue_saves__>:
    5d18:	2f 92       	push	r2
    5d1a:	3f 92       	push	r3
    5d1c:	4f 92       	push	r4
    5d1e:	5f 92       	push	r5
    5d20:	6f 92       	push	r6
    5d22:	7f 92       	push	r7
    5d24:	8f 92       	push	r8
    5d26:	9f 92       	push	r9
    5d28:	af 92       	push	r10
    5d2a:	bf 92       	push	r11
    5d2c:	cf 92       	push	r12
    5d2e:	df 92       	push	r13
    5d30:	ef 92       	push	r14
    5d32:	ff 92       	push	r15
    5d34:	0f 93       	push	r16
    5d36:	1f 93       	push	r17
    5d38:	cf 93       	push	r28
    5d3a:	df 93       	push	r29
    5d3c:	cd b7       	in	r28, 0x3d	; 61
    5d3e:	de b7       	in	r29, 0x3e	; 62
    5d40:	ca 1b       	sub	r28, r26
    5d42:	db 0b       	sbc	r29, r27
    5d44:	0f b6       	in	r0, 0x3f	; 63
    5d46:	f8 94       	cli
    5d48:	de bf       	out	0x3e, r29	; 62
    5d4a:	0f be       	out	0x3f, r0	; 63
    5d4c:	cd bf       	out	0x3d, r28	; 61
    5d4e:	09 94       	ijmp

00005d50 <__epilogue_restores__>:
    5d50:	2a 88       	ldd	r2, Y+18	; 0x12
    5d52:	39 88       	ldd	r3, Y+17	; 0x11
    5d54:	48 88       	ldd	r4, Y+16	; 0x10
    5d56:	5f 84       	ldd	r5, Y+15	; 0x0f
    5d58:	6e 84       	ldd	r6, Y+14	; 0x0e
    5d5a:	7d 84       	ldd	r7, Y+13	; 0x0d
    5d5c:	8c 84       	ldd	r8, Y+12	; 0x0c
    5d5e:	9b 84       	ldd	r9, Y+11	; 0x0b
    5d60:	aa 84       	ldd	r10, Y+10	; 0x0a
    5d62:	b9 84       	ldd	r11, Y+9	; 0x09
    5d64:	c8 84       	ldd	r12, Y+8	; 0x08
    5d66:	df 80       	ldd	r13, Y+7	; 0x07
    5d68:	ee 80       	ldd	r14, Y+6	; 0x06
    5d6a:	fd 80       	ldd	r15, Y+5	; 0x05
    5d6c:	0c 81       	ldd	r16, Y+4	; 0x04
    5d6e:	1b 81       	ldd	r17, Y+3	; 0x03
    5d70:	aa 81       	ldd	r26, Y+2	; 0x02
    5d72:	b9 81       	ldd	r27, Y+1	; 0x01
    5d74:	ce 0f       	add	r28, r30
    5d76:	d1 1d       	adc	r29, r1
    5d78:	0f b6       	in	r0, 0x3f	; 63
    5d7a:	f8 94       	cli
    5d7c:	de bf       	out	0x3e, r29	; 62
    5d7e:	0f be       	out	0x3f, r0	; 63
    5d80:	cd bf       	out	0x3d, r28	; 61
    5d82:	ed 01       	movw	r28, r26
    5d84:	08 95       	ret

00005d86 <_exit>:
    5d86:	f8 94       	cli

00005d88 <__stop_program>:
    5d88:	ff cf       	rjmp	.-2      	; 0x5d88 <__stop_program>
